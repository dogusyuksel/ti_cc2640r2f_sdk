<?xml version="1.0" encoding="utf-8"?>

<!-- EMULATOR - tms320c29xx -->
<!-- PROCESSOR ID: 0x5000a7f8 (320,0x29,127,0) -->

<!-- File name is based upon the PROCID assigned to the ISA -->
<!-- Root node for all TPI data.  id is just the PROCID in hex -->

<tpi_info id="tpi">
  <!-- machine_info node decribes the ISA details like bus widths and data sizes -->
  <!-- id = Unique name for ISA -->
  <!-- target_name = Unique string name for ISA -->
  <!-- *** These next 21 entries are used to fill out the Value Bits array passed from TPI to the debug tool *** -->
  <!-- size_char = Size in bits of a 'C' char.  Value Bits index = 0 -->
  <!-- size_short = Size in bits of a 'C' short.  Value Bits index = 1  -->
  <!-- size_enum = Size in bits of a 'C' enum.  Value Bits index = 2  -->
  <!-- size_int = Size in bits of a 'C' int.  Value Bits index = 3  -->
  <!-- size_long = Size in bits of a 'C' long.  Value Bits index = 4  -->
  <!-- size_void_ptr = Size in bits of a 'C' void pointer.  Value Bits index = 5  -->
  <!-- size_dataNN = Size in bits of a data units NN is just the width.  Must have entries for 8/16/24/32/40/48/64.  Value Bits indexes = 6 to 12  -->
  <!-- size_far_ptr = Size in bits of a far pointer.  Value Bits index = 13  -->
  <!-- size_near_ptr = Size in bits of a near pointer.  Value Bits index = 14  -->
  <!-- size_long_long = Size in bits of a longlong.  Value Bits index = 15   -->
  <!-- size_float = Size in bits of a float.  Value Bits index = 16   -->
  <!-- size_ieee_float = Size in bits of a IEEE float.  Value Bits index = 17   -->
  <!-- size_double = Size in bits of a double.  Value Bits index = 18   -->
  <!-- size_ieee_double = Size in bits of a IEEE double.  Value Bits index = 19   -->
  <!-- size_long_double = Size in bits of a long double.  Value Bits index = 20  -->
  <!-- *** These next 7 entries are used to fill out the Register Bus Bits array passed from TPI to the debug tool *** -->
  <!-- *** I don't think the address fiedls are used by the debugger, but this aligns with parameteres for the data pages *** -->
  <!-- reg_addr_unit = Size in bits the addressable unit used for register access.  Reg Bus Bits index = 0  -->
  <!-- reg_short_word = Size in bits of a register value cast as a 'C' short.  Reg Bus Bits index = 1  -->
  <!-- reg_word = Size in bits of a register value cast as a 'C' int.  Reg Bus Bits index = 2  -->
  <!-- reg_long_word = Size in bits of a register value cast as a 'C' long.  Reg Bus Bits index = 3  -->
  <!-- reg_rdc_addr = Size in bits the address used to access register in reduced address mode.  Reg Bus Bits index = 4  -->
  <!-- reg_addr = Size in bits the address used for register access.  Reg Bus Bits index = 5  -->
  <!-- reg_ext_addr = Size in bits the address for register access in extneded address mode.  Reg Bus Bits index = 6  -->
  <machine_info id="machine" target_name="c29xx" size_char="8" size_short="16" size_enum="32" size_int="32" size_long="32" size_void_ptr="32" size_data8="8" size_data16="16" size_data24="24" size_data32="32" size_data40="40" size_data48="48" size_data64="64" size_far_ptr="32" size_near_ptr="32" size_long_long="64" size_float="32" size_ieee="32" size_double="64" size_ieee_double="64" size_long_double="64" reg_addr_unit="32" reg_short_word="32" reg_word="32" reg_long_word="32" reg_rdc_addr="32" reg_addr="32" reg_ext_addr="32" is_cycle_step="0">
    <!--- List of all magic numbers supported by this ISA -->
    <elfs id="elf_numbers">
        <!-- id = index, magic_num = number in hex -->
        <elf id="0" elf_num="92" />
     </elfs>

    <!-- List of all page descriptors for this ISA -->
    <pages id="mem_pages">
      <!-- id = indxex of the entry in the list -->
      <!-- page_name = the text name of the page -->
      <!-- page_endian = the edianess of the page BIG and LITTLE supported -->
      <!-- page_addr_unit = Size in bits the addressable unit used for this page.  Bus Bits index = [page][0]  -->
      <!-- page_short_word = Size in bits of a memory value cast as a 'C' short.  Bus Bits index = [page][1]  -->
      <!-- page_word = Size in bits of a memory value cast as a 'C' int.  Bus Bits index = [page][2]  -->
      <!-- page_long_word = Size in bits of a memory value cast as a 'C' long.  Bus Bits index = [page][3]  -->
      <!-- page_rdc_addr = Size in bits the address used to access memory in reduced address mode.  Bus Bits index = [page][4]  -->
      <!-- page_addr = Size in bits the address used for memory access.  Bus Bits index = [page][5]  -->
      <!-- page_ext_addr = Size in bits the address for memory access in extneded address mode.  Bus Bits index = [page][6]  -->
      <page id="0" page_name="Memory" page_endian="LITTLE" page_addr_unit="8" page_short_word="16" page_word="32" page_long_word="32" page_rdc_addr="32" page_addr="32" page_ext_addr="32" />
    </pages>

        <sets id="reg_sets">

            <!-- reg_addr_unit  = Size in bits the addressable unit used for register access.         Reg Bus Bits index = 0  -->
            <!-- reg_short_word = Size in bits of a register value cast as a 'C' short.               Reg Bus Bits index = 1  -->
            <!-- reg_word       = Size in bits of a register value cast as a 'C' int.                 Reg Bus Bits index = 2  -->
            <!-- reg_long_word  = Size in bits of a register value cast as a 'C' long.                Reg Bus Bits index = 3  -->
            <!-- reg_rdc_addr   = Size in bits the address for register access in reduced addr mode.  Reg Bus Bits index = 4  -->
            <!-- reg_addr       = Size in bits the address used for register access.                  Reg Bus Bits index = 5  -->
            <!-- reg_ext_addr   = Size in bits the address for register access in extended addr mode. Reg Bus Bits index = 6  -->

            <set id="0" reg_addr_unit="8" reg_short_word="32" reg_word="32" reg_long_word="32" reg_rdc_addr="32"
                 reg_addr="32" reg_ext_addr="32" />

        </sets>

      <!-- List of delay slots, if applicable.  This information is required for assembly single stepping -->
      <delay_slots id="dslots">
        <!-- id = index of the entry in the list -->
        <!-- ins_type_call = Number of delay slots in a call type of instruction -->
        <!-- ins_type_notcall = Number of delay slots in a call type of instruction -->
        <!-- ins_type_1 = Number of delay slots in a type 1 instruction -->
        <!-- ins_type_2 = Number of delay slots in a type 2 instruction -->
        <!-- ins_type_3 = Number of delay slots in a type 3 instruction -->
        <!-- ins_type_4 = Number of delay slots in a type 4 instruction -->
        <!-- ins_type_5 = Number of delay slots in a type 5 instruction -->
        <!-- ins_type_6 = Number of delay slots in a type 6 instruction -->
          <dslot id="0" ins_type_call="1" ins_type_notcall="0" ins_type_1="1" ins_type_2="2" ins_type_3="3" ins_type_4="4" ins_type_5="5" ins_type_6="6"/>
        </delay_slots>

	<!-- To be determined -->
      <dwarf_regmap id = "regmaps">
        <map id=  "0" name=  "A0" />
        <map id=  "1" name=  "A1" />
        <map id=  "2" name=  "A2" />
        <map id=  "3" name=  "A3" />
        <map id=  "4" name=  "A4" />
        <map id=  "5" name=  "A5" />
        <map id=  "6" name=  "A6" />
        <map id=  "7" name=  "A7" />
        <map id=  "8" name=  "A8" />
        <map id=  "9" name=  "A9" />
        <map id= "10" name= "A10" />
        <map id= "11" name= "A11" />
        <map id= "12" name= "A12" />
        <map id= "13" name= "A13" />
        <map id= "14" name= "A14" />
        <map id= "15" name= "A15" />

        <map id= "16" name=  "D0" />
        <map id= "17" name=  "D1" />
        <map id= "18" name=  "D2" />
        <map id= "19" name=  "D3" />
        <map id= "20" name=  "D4" />
        <map id= "21" name=  "D5" />
        <map id= "22" name=  "D6" />
        <map id= "23" name=  "D7" />
        <map id= "24" name=  "D8" />
        <map id= "25" name=  "D9" />
        <map id= "26" name= "D10" />
        <map id= "27" name= "D11" />
        <map id= "28" name= "D12" />
        <map id= "29" name= "D13" />
        <map id= "30" name= "D14" />
        <map id= "31" name= "D15" />

        <map id= "32" name=  "M0" />
        <map id= "33" name=  "M1" />
        <map id= "34" name=  "M2" />
        <map id= "35" name=  "M3" />
        <map id= "36" name=  "M4" />
        <map id= "37" name=  "M5" />
        <map id= "38" name=  "M6" />
        <map id= "39" name=  "M7" />
        <map id= "40" name=  "M8" />
        <map id= "41" name=  "M9" />
        <map id= "42" name= "M10" />
        <map id= "43" name= "M11" />
        <map id= "44" name= "M12" />
        <map id= "45" name= "M13" />
        <map id= "46" name= "M14" />
        <map id= "47" name= "M15" />
        <map id= "48" name= "M16" />
        <map id= "49" name= "M17" />
        <map id= "50" name= "M18" />
        <map id= "51" name= "M19" />
        <map id= "52" name= "M20" />
        <map id= "53" name= "M21" />
        <map id= "54" name= "M22" />
        <map id= "55" name= "M23" />
        <map id= "56" name= "M24" />
        <map id= "57" name= "M25" />
        <map id= "58" name= "M26" />
        <map id= "59" name= "M27" />
        <map id= "60" name= "M28" />
        <map id= "61" name= "M29" />
        <map id= "62" name= "M30" />
        <map id= "63" name= "M31" />

        <map id= "64" name= "XA0" />
        <map id= "65" name= "XA2" />
        <map id= "66" name= "XA4" />
        <map id= "67" name= "XA6" />
        <map id= "68" name= "XA8" />
        <map id= "69" name="XA10" />
        <map id= "70" name="XA12" />
        <map id= "71" name="XA14" />

        <map id= "72" name= "XD0" />
        <map id= "73" name= "XD2" />
        <map id= "74" name= "XD4" />
        <map id= "75" name= "XD6" />
        <map id= "76" name= "XD8" />
        <map id= "77" name="XD10" />
        <map id= "78" name="XD12" />
        <map id= "79" name="XD14" />

        <map id= "80" name= "XM0" />
        <map id= "81" name= "XM2" />
        <map id= "82" name= "XM4" />
        <map id= "83" name= "XM6" />
        <map id= "84" name= "XM8" />
        <map id= "85" name="XM10" />
        <map id= "86" name="XM12" />
        <map id= "87" name="XM14" />
        <map id= "88" name="XM16" />
        <map id= "89" name="XM18" />
        <map id= "90" name="XM20" />
        <map id= "91" name="XM22" />
        <map id= "92" name="XM24" />
        <map id= "93" name="XM26" />
        <map id= "94" name="XM28" />
        <map id= "95" name="XM30" />

        <map id= "96" name=  "PC" />
        <map id= "97" name= "RPC" />
        <map id= "98" name="ESTS" />
        <map id= "99" name="DSTS" />
        <map id="100" name="ISTS" />
    </dwarf_regmap>

  </machine_info>

    <!-- TPI nteface info that descibes the main interfaces exported by TPI -->
    <interface_info id="interface">
    <!-- Node name defines the interface -->
    <!-- dll = the DLL that supports the interface -->
    <!-- generic = true/false.  True genreic support or custom interface -->
    <!-- db = location for XML to support a generic interface -->
    <!-- size_bis = Size of the base instruction in bits (used during disassembly).  Simple ISAs will have a fixed BIS -->
    <ctpidasm id="dasm" dll="LLVMDisassembleTpi" generic="false" db="" size_bis="32" page_endian="LITTLE" />
    <ctpistep id="step" dll="step_c29"  generic="false" />

    <!-- Source: disasm_interface.h, Target integer properties -->
    <!-- T16 Variants: T16_ISA_NONE=0, T16_ISA_V1=1, T16_ISA_V2=2, T16_ISA_EVE=3, T16_ISA_IME5=4, T16_ISA_ICONT5=5 -->
    <!-- Configure appropriate inputs for ISA variants -->
    <!-- NOTE: Configure isa_type = 0, if INT_PROP_SINGLE_OPCODE.  This is rare -->
    <!-- In this case, the isa_type is INT_PROP_C6000_ISA and the variant is C6000_ISA_6740-->
    <intprops id="iprops" isa_type="500" isa_variant="8" />

    <!-- Source: disasm_interface.h, Target boolean properties -->
    <!-- Boolean properties: BOOL_PROP_DISPLAY_BRANCH_ADDRESS, BOOL_PROP_NO_FP_HEADER, BOOL_PROP_SINGLE_MODE, BOOL_PROP_VENC_MODE -->
    <!-- Boolean properties: BOOL_PROP_ARM_IS_CORTEX_M3, BOOL_PROP_ARM_IS_THUMB_MODE, BOOL_PROP_ARM_IS_UAL_MODE, BOOL_PROP_LD3_HEX_NUMBERS-->
    <!-- Boolean properties: BOOL_PROP_LD3_R35_ENCODE, BOOL_PROP_LD3_ALGEBRAIC, BOOL_PROP_LD3_IS_VECTOR, BOOL_PROP_MSP_IS_MSPX-->
    <boolprops id="bprops" disp_baddr="true" no_fp_header="false" single_mode="false" venc_mode="false" cortexm3="false" thumb="false" ual="false" ld3_hex="false" ld3_r35="false" ld3_algebraic="false" ld3_is_vector="false" msp_is_mspx="false" />

    <ctpigen id="gen" dll="tpi" generic="true" db="proc_0x5000a7f8.xml" />
    <!-- This interface not required for CLA -->
    <ctpicallconv id="callconv" dll="tpi" generic="true" db="proc_0x5000a7f8.xml" />
    </interface_info>
</tpi_info>