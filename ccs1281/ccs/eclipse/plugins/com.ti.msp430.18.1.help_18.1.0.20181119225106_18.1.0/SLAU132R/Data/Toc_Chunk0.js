define({'/Content/SLAU132R_HTML/abstract.html':{i:[0,1,2,3,4,5],t:['Read This First','About This Manual','Notational Conventions','Related Documentation','Related Documentation From Texas Instruments','Trademarks'],b:['#Read_This_First','#About_This_Manual','#Notational_Conventions','#Related_Documentation','#Related_Documentation_From_Texas_Instruments','#Trademarks']},'/Content/SLAU132R_HTML/c-name-demangler.html':{i:[303,304,305,306,307,308,309],t:['8 C++ Name Demangler','8.1 Invoking the C++ Name Demangler','8.2 C++ Name Demangler Options','8.3 Sample Usage of the C++ Name Demangler','Example 8-1 C++ Code for calories_in_a_banana','Example 8-2 Resulting Assembly for calories_in_a_banana','Example 8-3 Result After Running the C++ Name Demangler'],b:['#8_C++_Name_Demangler','#8.1_Invoking_the_C++_Name_Demangler','#8.2_C++_Name_Demangler_Options','#8.3_Sample_Usage_of_the_C++_Name_Demangler','#Example_8-1_C++_Code_for_calories_in_a_banana','#Example_8-2_Resulting_Assembly_for_calories_in_a_banana','#Example_8-3_Result_After_Running_the_C++_Name_Demangler']},'/Content/SLAU132R_HTML/glossary.html':{i:[310,311],t:['A Glossary','A.1 Terminology'],b:['#A_Glossary','#A.1_Terminology']},'/Content/SLAU132R_HTML/introduction-to-the-software-development-tools.html':{i:[6,7,8,9,10,11],t:['1 Introduction to the Software Development Tools','1.1 Software Development Tools Overview','1.2 Compiler Interface','1.3 ANSI/ISO Standard','1.4 Output Files','1.5 Utilities'],b:['#1_Introduction_to_the_Software_Development_Tools','#1.1_Software_Development_Tools_Overview','#1.2_Compiler_Interface','#1.3_ANSI_ISO_Standard','#1.4_Output_Files','#1.5_Utilities']},'/Content/SLAU132R_HTML/linking-c-c-code.html':{i:[110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132],t:['4 Linking C/C++ Code','4.1 Invoking the Linker Through the Compiler (-z Option)','4.1.1 Invoking the Linker Separately','4.1.2 Invoking the Linker as Part of the Compile Step','4.1.3 Disabling the Linker (--compile_only Compiler Option)','4.2 Linker Code Optimizations','4.2.1 Conditional Linking','4.2.2 Generating Aggregate Data Subsections (--gen_data_subsections Compiler Option)','4.3 Controlling the Linking Process','4.3.1 Including the Run-Time-Support Library','4.3.1.1 Automatic Run-Time-Support Library Selection','Example 4-1 Using the --issue_remarks Option','4.3.1.2 Manual Run-Time-Support Library Selection','4.3.1.3 Library Order for Searching for Symbols','4.3.2 Run-Time Initialization','4.3.3 Initialization by the Interrupt Vector','4.3.4 Initialization of the FRAM Memory Protection Unit','4.3.5 Initialization of Cinit and Watchdog Timer Hold','4.3.6 Global Object Constructors','4.3.7 Specifying the Type of Global Variable Initialization','4.3.8 Specifying Where to Allocate Sections in Memory','4.3.9 A Sample Linker Command File','Example 4-2 Linker Command File'],b:['#4_Linking_C_C++_Code','#4.1_Invoking_the_Linker_Through_the_Compiler_(-z_Option)','#4.1.1_Invoking_the_Linker_Separately','#4.1.2_Invoking_the_Linker_as_Part_of_the_Compile_Step','#4.1.3_Disabling_the_Linker_(--compile_only_Compiler_Option)','#4.2_Linker_Code_Optimizations','#4.2.1_Conditional_Linking','#4.2.2_Generating_Aggregate_Data_Subsections_(--gen_data_subsections_Compiler_...','#4.3_Controlling_the_Linking_Process','#4.3.1_Including_the_Run-Time-Support_Library','#4.3.1.1_Automatic_Run-Time-Support_Library_Selection','#Example_4-1_Using_the_--issue_remarks_Option','#4.3.1.2_Manual_Run-Time-Support_Library_Selection','#4.3.1.3_Library_Order_for_Searching_for_Symbols','#4.3.2_Run-Time_Initialization','#4.3.3_Initialization_by_the_Interrupt_Vector','#4.3.4_Initialization_of_the_FRAM_Memory_Protection_Unit','#4.3.5_Initialization_of_Cinit_and_Watchdog_Timer_Hold','#4.3.6_Global_Object_Constructors','#4.3.7_Specifying_the_Type_of_Global_Variable_Initialization','#4.3.8_Specifying_Where_to_Allocate_Sections_in_Memory','#4.3.9_A_Sample_Linker_Command_File','#Example_4-2_Linker_Command_File']},'/Content/SLAU132R_HTML/msp430-c-c-language-implementation.html':{i:[133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203],t:['5 MSP430 C/C++ Language Implementation','5.1 Characteristics of MSP430 C','5.1.1 Implementation-Defined Behavior','5.2 Characteristics of MSP430 C++','5.3 Using MISRA C 2004','5.4 Using the ULP Advisor','5.5 Advice on Hardware Configuration','5.6 Data Types','5.6.1 Size of Enum Types','5.7 Keywords','5.7.1 The const Keyword','5.7.2 The __interrupt Keyword','5.7.3 The restrict Keyword','Example 5-1 Use of the restrict Type Qualifier With Pointers','Example 5-2 Use of the restrict Type Qualifier With Arrays','5.7.4 The volatile Keyword','Example 5-3 Volatile for Local Variables With setjmp','5.8 C++ Exception Handling','5.9 Register Variables and Parameters','5.10 The __asm Statement','5.11 Pragma Directives','5.11.1 The BIS_IE1_INTERRUPT','5.11.2 The CALLS Pragma','5.11.3 The CHECK_MISRA Pragma','5.11.4 The CHECK_ULP Pragma','5.11.5 The CLINK Pragma','5.11.6 The CODE_SECTION Pragma','Example 5-4 Using the CODE_SECTION Pragma C Source File','Example 5-5 Generated Assembly Code From Example 5-4','Example 5-6 Using the CODE_SECTION Pragma C++ Source File','Example 5-7 Generated Assembly Code From Example 5-6','5.11.7 The DATA_ALIGN Pragma','5.11.8 The DATA_SECTION Pragma','Example 5-8 Using the DATA_SECTION Pragma C Source File','Example 5-9 Using the DATA_SECTION Pragma C++ Source File','Example 5-10 Using the DATA_SECTION Pragma Assembly Source File','5.11.9 The Diagnostic Message Pragmas','5.11.10 The FUNC_ALWAYS_INLINE Pragma','5.11.11 The FUNC_CANNOT_INLINE Pragma','5.11.12 The FUNC_EXT_CALLED Pragma','5.11.13 The FUNC_IS_PURE Pragma','5.11.14 The FUNC_NEVER_RETURNS Pragma','5.11.15 The FUNC_NO_GLOBAL_ASG Pragma','5.11.16 The FUNC_NO_IND_ASG Pragma','5.11.17 The FUNCTION_OPTIONS Pragma','5.11.18 The INTERRUPT Pragma','5.11.19 The LOCATION Pragma','5.11.20 The NOINIT and PERSISTENT Pragmas','5.11.21 The NO_HOOKS Pragma','5.11.22 The pack Pragma','5.11.23 The RESET_MISRA Pragma','5.11.24 The RESET_ULP Pragma','5.11.25 The RETAIN Pragma','5.11.26 The SET_CODE_SECTION and SET_DATA_SECTION Pragmas','Example 5-11 Setting Section With SET_DATA_SECTION Pragma','Example 5-12 Setting a Section With SET_CODE_SECTION Pragma','Example 5-13 Overriding SET_DATA_SECTION Setting','5.11.27 The vector Pragma','5.12 The _Pragma Operator','5.13 Application Binary Interface','5.14 Object File Symbol Naming Conventions (Linknames)','5.15 Changing the ANSI/ISO C/C++ Language Mode','5.15.1 C99 Support (--c99)','5.15.2 Strict ANSI Mode and Relaxed ANSI Mode (--strict_ansi and --relaxed_ansi)','5.16 GNU and Clang Language Extensions','5.16.1 Extensions','5.16.2 Function Attributes','5.16.3 Variable Attributes','5.16.4 Type Attributes','5.16.5 Built-In Functions','5.17 Compiler Limits'],b:['#5_MSP430_C_C++_Language_Implementation','#5.1_Characteristics_of_MSP430_C','#5.1.1_Implementation-Defined_Behavior','#5.2_Characteristics_of_MSP430_C++','#5.3_Using_MISRA_C_2004','#5.4_Using_the_ULP_Advisor','#5.5_Advice_on_Hardware_Configuration','#5.6_Data_Types','#5.6.1_Size_of_Enum_Types','#5.7_Keywords','#5.7.1_The_const_Keyword','#5.7.2_The___interrupt_Keyword','#5.7.3_The_restrict_Keyword','#Example_5-1_Use_of_the_restrict_Type_Qualifier_With_Pointers','#Example_5-2_Use_of_the_restrict_Type_Qualifier_With_Arrays','#5.7.4_The_volatile_Keyword','#Example_5-3_Volatile_for_Local_Variables_With_setjmp','#5.8_C++_Exception_Handling','#5.9_Register_Variables_and_Parameters','#5.10_The___asm_Statement','#5.11_Pragma_Directives','#5.11.1_The_BIS_IE1_INTERRUPT','#5.11.2_The_CALLS_Pragma','#5.11.3_The_CHECK_MISRA_Pragma','#5.11.4_The_CHECK_ULP_Pragma','#5.11.5_The_CLINK_Pragma','#5.11.6_The_CODE_SECTION_Pragma','#Example_5-4_Using_the_CODE_SECTION_Pragma_C_Source_File','#Example_5-5_Generated_Assembly_Code_From_Example_5-4','#Example_5-6_Using_the_CODE_SECTION_Pragma_C++_Source_File','#Example_5-7_Generated_Assembly_Code_From_Example_5-6','#5.11.7_The_DATA_ALIGN_Pragma','#5.11.8_The_DATA_SECTION_Pragma','#Example_5-8_Using_the_DATA_SECTION_Pragma_C_Source_File','#Example_5-9_Using_the_DATA_SECTION_Pragma_C++_Source_File','#Example_5-10_Using_the_DATA_SECTION_Pragma_Assembly_Source_File','#5.11.9_The_Diagnostic_Message_Pragmas','#5.11.10_The_FUNC_ALWAYS_INLINE_Pragma','#5.11.11_The_FUNC_CANNOT_INLINE_Pragma','#5.11.12_The_FUNC_EXT_CALLED_Pragma','#5.11.13_The_FUNC_IS_PURE_Pragma','#5.11.14_The_FUNC_NEVER_RETURNS_Pragma','#5.11.15_The_FUNC_NO_GLOBAL_ASG_Pragma','#5.11.16_The_FUNC_NO_IND_ASG_Pragma','#5.11.17_The_FUNCTION_OPTIONS_Pragma','#5.11.18_The_INTERRUPT_Pragma','#5.11.19_The_LOCATION_Pragma','#5.11.20_The_NOINIT_and_PERSISTENT_Pragmas','#5.11.21_The_NO_HOOKS_Pragma','#5.11.22_The_pack_Pragma','#5.11.23_The_RESET_MISRA_Pragma','#5.11.24_The_RESET_ULP_Pragma','#5.11.25_The_RETAIN_Pragma','#5.11.26_The_SET_CODE_SECTION_and_SET_DATA_SECTION_Pragmas','#Example_5-11_Setting_Section_With_SET_DATA_SECTION_Pragma','#Example_5-12_Setting_a_Section_With_SET_CODE_SECTION_Pragma','#Example_5-13_Overriding_SET_DATA_SECTION_Setting','#5.11.27_The_vector_Pragma','#5.12_The__Pragma_Operator','#5.13_Application_Binary_Interface','#5.14_Object_File_Symbol_Naming_Conventions_(Linknames)','#5.15_Changing_the_ANSI_ISO_C_C++_Language_Mode','#5.15.1_C99_Support_(--c99)','#5.15.2_Strict_ANSI_Mode_and_Relaxed_ANSI_Mode_(--strict_ansi_and_--relaxed_ansi)','#5.16_GNU_and_Clang_Language_Extensions','#5.16.1_Extensions','#5.16.2_Function_Attributes','#5.16.3_Variable_Attributes','#5.16.4_Type_Attributes','#5.16.5_Built-In_Functions','#5.17_Compiler_Limits']},'/Content/SLAU132R_HTML/optimizing-your-code.html':{i:[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109],t:['3 Optimizing Your Code','3.1 Invoking Optimization','3.2 Performing File-Level Optimization (--opt_level=3 option)','3.2.1 Creating an Optimization Information File (--gen_opt_info Option)','3.3 Program-Level Optimization (--program_level_compile and --opt_level=3 options)','3.3.1 Controlling Program-Level Optimization (--call_assumptions Option)','3.3.2 Optimization Considerations When Mixing C/C++ and Assembly','3.4 Link-Time Optimization (--opt_level=4 Option)','3.4.1 Option Handling','3.4.2 Incompatible Types','3.5 Using Feedback Directed Optimization','3.5.1 Feedback Directed Optimization','3.5.1.1 Phase 1 -- Collect Program Profile Information','3.5.1.2 Phase 2 -- Use Application Profile Information for Optimization','3.5.1.3 Generating and Using Profile Information','3.5.1.4 Example Use of Feedback Directed Optimization','3.5.1.5 The .ppdata Section','3.5.1.6 Feedback Directed Optimization and Code Size Tune','3.5.1.7 Instrumented Program Execution Overhead','3.5.1.8 Invalid Profile Data','3.5.2 Profile Data Decoder','3.5.3 Feedback Directed Optimization API','3.5.4 Feedback Directed Optimization Summary','3.6 Using Profile Information to Analyze Code Coverage','3.6.1 Code Coverage','3.6.1.1 Phase1 -- Collect Program Profile Information','3.6.1.2 Phase 2 -- Generate Code Coverage Reports','3.6.2 Related Features and Capabilities','3.6.2.1 Path Profiler','3.6.2.2 Analysis Options','3.6.2.3 Environment Variables','3.7 Accessing Aliased Variables in Optimized Code','3.8 Use Caution With asm Statements in Optimized Code','3.9 Automatic Inline Expansion (--auto_inline Option)','3.10 Using the Interlist Feature With Optimization','Example 3-1 The Function From Example 2-1 Compiled With the -O2 and --optimizer_interlist Options','Example 3-2 The Function From Example 2-1 Compiled with the --opt_level=2, --optimizer_interlist, and --c_src_interlist Options','3.11 Debugging Optimized Code','3.12 Controlling Code Size Versus Speed ','3.13 What Kind of Optimization Is Being Performed?','3.13.1 Cost-Based Register Allocation','3.13.2 Alias Disambiguation','3.13.3 Branch Optimizations and Control-Flow Simplification','3.13.4 Data Flow Optimizations','3.13.5 Expression Simplification','3.13.6 Inline Expansion of Functions','3.13.7 Function Symbol Aliasing','3.13.8 Induction Variables and Strength Reduction','3.13.9 Loop-Invariant Code Motion','3.13.10 Loop Rotation','3.13.11 Instruction Scheduling','3.13.12 Tail Merging','3.13.13 Integer Division With Constant Divisor'],b:['#3_Optimizing_Your_Code','#3.1_Invoking_Optimization','#3.2_Performing_File-Level_Optimization_(--opt_level=3_option)','#3.2.1_Creating_an_Optimization_Information_File_(--gen_opt_info_Option)','#3.3_Program-Level_Optimization_(--program_level_compile_and_--opt_level=3_opt...','#3.3.1_Controlling_Program-Level_Optimization_(--call_assumptions_Option)','#3.3.2_Optimization_Considerations_When_Mixing_C_C++_and_Assembly','#3.4_Link-Time_Optimization_(--opt_level=4_Option)','#3.4.1_Option_Handling','#3.4.2_Incompatible_Types','#3.5_Using_Feedback_Directed_Optimization','#3.5.1_Feedback_Directed_Optimization','#3.5.1.1_Phase_1_--_Collect_Program_Profile_Information','#3.5.1.2_Phase_2_--_Use_Application_Profile_Information_for_Optimization','#3.5.1.3_Generating_and_Using_Profile_Information','#3.5.1.4_Example_Use_of_Feedback_Directed_Optimization','#3.5.1.5_The_.ppdata_Section','#3.5.1.6_Feedback_Directed_Optimization_and_Code_Size_Tune','#3.5.1.7_Instrumented_Program_Execution_Overhead','#3.5.1.8_Invalid_Profile_Data','#3.5.2_Profile_Data_Decoder','#3.5.3_Feedback_Directed_Optimization_API','#3.5.4_Feedback_Directed_Optimization_Summary','#3.6_Using_Profile_Information_to_Analyze_Code_Coverage','#3.6.1_Code_Coverage','#3.6.1.1_Phase1_--_Collect_Program_Profile_Information','#3.6.1.2_Phase_2_--_Generate_Code_Coverage_Reports','#3.6.2_Related_Features_and_Capabilities','#3.6.2.1_Path_Profiler','#3.6.2.2_Analysis_Options','#3.6.2.3_Environment_Variables','#3.7_Accessing_Aliased_Variables_in_Optimized_Code','#3.8_Use_Caution_With_asm_Statements_in_Optimized_Code','#3.9_Automatic_Inline_Expansion_(--auto_inline_Option)','#3.10_Using_the_Interlist_Feature_With_Optimization','#Example_3-1_The_Function_From_Example_2-1_Compiled_With_the_-O2_and_--optimiz...','#Example_3-2_The_Function_From_Example_2-1_Compiled_with_the_--opt_level=2,_--...','#3.11_Debugging_Optimized_Code','#3.12_Controlling_Code_Size_Versus_Speed','#3.13_What_Kind_of_Optimization_Is_Being_Performed_','#3.13.1_Cost-Based_Register_Allocation','#3.13.2_Alias_Disambiguation','#3.13.3_Branch_Optimizations_and_Control-Flow_Simplification','#3.13.4_Data_Flow_Optimizations','#3.13.5_Expression_Simplification','#3.13.6_Inline_Expansion_of_Functions','#3.13.7_Function_Symbol_Aliasing','#3.13.8_Induction_Variables_and_Strength_Reduction','#3.13.9_Loop-Invariant_Code_Motion','#3.13.10_Loop_Rotation','#3.13.11_Instruction_Scheduling','#3.13.12_Tail_Merging','#3.13.13_Integer_Division_With_Constant_Divisor']},'/Content/SLAU132R_HTML/revision-history.html':{i:[312,313],t:['B Revision History','B.1 Recent Revisions'],b:['#B_Revision_History','#B.1_Recent_Revisions']},'/Content/SLAU132R_HTML/run-time-environment.html':{i:[204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271],t:['6 Run-Time Environment','6.1 Memory Model','6.1.1 Code Memory Models','6.1.2 Data Memory Models','6.1.3 Support for Near Data','6.1.4 Sections','6.1.5 C/C++ Software Stack','6.1.6 Dynamic Memory Allocation','6.2 Object Representation','6.2.1 Data Type Storage','6.2.1.1 Pointer to Member Function Types','6.2.1.2 Structure and Array Alignment','6.2.1.3 Field/Structure Alignment','Example 6-1 C Code Definition of var','6.2.2 Character String Constants','6.3 Register Conventions','6.4 Function Structure and Calling Conventions','6.4.1 How a Function Makes a Call','6.4.2 How a Called Function Responds','6.4.3 Accessing Arguments and Local Variables','6.5 Accessing Linker Symbols in C and C++','6.6 Interfacing C and C++ With Assembly Language','6.6.1 Using Assembly Language Modules With C/C++ Code','6.6.2 Accessing Assembly Language Functions From C/C++','Example 6-2 Calling an Assembly Language Function From a C/C++ Program','Example 6-3 Assembly Language Program Called by Example 6-2','6.6.3 Accessing Assembly Language Variables From C/C++','6.6.3.1 Accessing Assembly Language Global Variables','Example 6-4 Assembly Language Variable Program','Example 6-5 C Program to Access Assembly Language From Example 6-4','6.6.3.2 Accessing Assembly Language Constants','Example 6-6 Accessing an Assembly Language Constant From C','Example 6-7 Assembly Language Program for Example 6-6','6.6.4 Sharing C/C++ Header Files With Assembly Source','6.6.5 Using Inline Assembly Language','6.7 Interrupt Handling','6.7.1 Saving Registers During Interrupts','6.7.2 Using C/C++ Interrupt Routines','6.7.3 Using Assembly Language Interrupt Routines','6.7.4 Interrupt Vectors','6.7.5 Other Interrupt Information','6.8 Using Intrinsics to Access Assembly Language Statements','6.8.1 MSP430 Intrinsics','6.8.2 Deprecated Intrinsics','6.8.3 The __delay_cycle Intrinsic','6.8.4 The __never_executed Intrinsic','6.8.4.1 Using __never_executed With a Vector Generator','Example 6-8 TBIV Vector Generator','6.8.4.2 Using __never_executed With General Switch Expressions','Example 6-9 General Switch Statement','6.9 System Initialization','6.9.1 Boot Hook Functions for System Pre-Initialization','6.9.2 Run-Time Stack','6.9.3 Automatic Initialization of Variables','6.9.3.1 Zero Initializing Variables ','6.9.3.2 Direct Initialization','6.9.3.3 Autoinitialization of Variables at Run Time','6.9.3.4 Autoinitialization Tables','6.9.3.4.1 Length Followed by Data Format','6.9.3.4.2 Zero Initialization Format','6.9.3.4.3 Run Length Encoded (RLE) Format','6.9.3.4.4 Lempel-Ziv-Storer-Szymanski Compression (LZSS) Format','6.9.3.5 Initialization of Variables at Load Time','6.9.3.6 Global Constructors','6.9.4 Initialization Tables','Example 6-10 Initialized Variables Defined in C','Example 6-11 Initialized Information for Variables Defined in Example 6-10','6.10 Compiling for 20-Bit MSP430X Devices'],b:['#6_Run-Time_Environment','#6.1_Memory_Model','#6.1.1_Code_Memory_Models','#6.1.2_Data_Memory_Models','#6.1.3_Support_for_Near_Data','#6.1.4_Sections','#6.1.5_C_C++_Software_Stack','#6.1.6_Dynamic_Memory_Allocation','#6.2_Object_Representation','#6.2.1_Data_Type_Storage','#6.2.1.1_Pointer_to_Member_Function_Types','#6.2.1.2_Structure_and_Array_Alignment','#6.2.1.3_Field_Structure_Alignment','#Example_6-1_C_Code_Definition_of_var','#6.2.2_Character_String_Constants','#6.3_Register_Conventions','#6.4_Function_Structure_and_Calling_Conventions','#6.4.1_How_a_Function_Makes_a_Call','#6.4.2_How_a_Called_Function_Responds','#6.4.3_Accessing_Arguments_and_Local_Variables','#6.5_Accessing_Linker_Symbols_in_C_and_C++','#6.6_Interfacing_C_and_C++_With_Assembly_Language','#6.6.1_Using_Assembly_Language_Modules_With_C_C++_Code','#6.6.2_Accessing_Assembly_Language_Functions_From_C_C++','#Example_6-2_Calling_an_Assembly_Language_Function_From_a_C_C++_Program','#Example_6-3_Assembly_Language_Program_Called_by_Example_6-2','#6.6.3_Accessing_Assembly_Language_Variables_From_C_C++','#6.6.3.1_Accessing_Assembly_Language_Global_Variables','#Example_6-4_Assembly_Language_Variable_Program','#Example_6-5_C_Program_to_Access_Assembly_Language_From_Example_6-4','#6.6.3.2_Accessing_Assembly_Language_Constants','#Example_6-6_Accessing_an_Assembly_Language_Constant_From_C','#Example_6-7_Assembly_Language_Program_for_Example_6-6','#6.6.4_Sharing_C_C++_Header_Files_With_Assembly_Source','#6.6.5_Using_Inline_Assembly_Language','#6.7_Interrupt_Handling','#6.7.1_Saving_Registers_During_Interrupts','#6.7.2_Using_C_C++_Interrupt_Routines','#6.7.3_Using_Assembly_Language_Interrupt_Routines','#6.7.4_Interrupt_Vectors','#6.7.5_Other_Interrupt_Information','#6.8_Using_Intrinsics_to_Access_Assembly_Language_Statements','#6.8.1_MSP430_Intrinsics','#6.8.2_Deprecated_Intrinsics','#6.8.3_The___delay_cycle_Intrinsic','#6.8.4_The___never_executed_Intrinsic','#6.8.4.1_Using___never_executed_With_a_Vector_Generator','#Example_6-8_TBIV_Vector_Generator','#6.8.4.2_Using___never_executed_With_General_Switch_Expressions','#Example_6-9_General_Switch_Statement','#6.9_System_Initialization','#6.9.1_Boot_Hook_Functions_for_System_Pre-Initialization','#6.9.2_Run-Time_Stack','#6.9.3_Automatic_Initialization_of_Variables','#6.9.3.1_Zero_Initializing_Variables','#6.9.3.2_Direct_Initialization','#6.9.3.3_Autoinitialization_of_Variables_at_Run_Time','#6.9.3.4_Autoinitialization_Tables','#6.9.3.4.1_Length_Followed_by_Data_Format','#6.9.3.4.2_Zero_Initialization_Format','#6.9.3.4.3_Run_Length_Encoded_(RLE)_Format','#6.9.3.4.4_Lempel-Ziv-Storer-Szymanski_Compression_(LZSS)_Format','#6.9.3.5_Initialization_of_Variables_at_Load_Time','#6.9.3.6_Global_Constructors','#6.9.4_Initialization_Tables','#Example_6-10_Initialized_Variables_Defined_in_C','#Example_6-11_Initialized_Information_for_Variables_Defined_in_Example_6-10','#6.10_Compiling_for_20-Bit_MSP430X_Devices']},'/Content/SLAU132R_HTML/using-run-time-support-functions-and-building-libraries.html':{i:[272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302],t:['7 Using Run-Time-Support Functions and Building Libraries','7.1 C and C++ Run-Time Support Libraries','7.1.1 Linking Code With the Object Library','7.1.2 Header Files','7.1.3 Modifying a Library Function','7.1.4 Support for String Handling','7.1.5 Minimal Support for Internationalization','7.1.6 Allowable Number of Open Files','7.1.7 Nonstandard Header Files in the Source Tree','7.1.8 Library Naming Conventions','7.2 The C I/O Functions','7.2.1 High-Level I/O Functions','7.2.2 Overview of Low-Level I/O Implementation','7.2.3 Device-Driver Level I/O Functions','7.2.4 Adding a User-Defined Device Driver for C I/O','Example 7-1 Mapping Default Streams to Device','7.2.5 The device Prefix','Example 7-2 Program for C I/O Device','7.3 Handling Reentrancy (_register_lock() and _register_unlock() Functions)','7.4 Library-Build Process','7.4.1 Required Non-Texas Instruments Software','7.4.2 Using the Library-Build Process','7.4.2.1 Automatic Standard Library Rebuilding by the Linker','7.4.2.2 Invoking mklib Manually','7.4.2.2.1 Building Standard Libraries ','7.4.2.2.2 Shared or Read-Only Library Directory','7.4.2.2.3 Building Libraries With Custom Options ','7.4.2.2.4 The mklib Program Option Summary ','7.4.3 Extending mklib','7.4.3.1 Underlying Mechanism','7.4.3.2 Libraries From Other Vendors'],b:['#7_Using_Run-Time-Support_Functions_and_Building_Libraries','#7.1_C_and_C++_Run-Time_Support_Libraries','#7.1.1_Linking_Code_With_the_Object_Library','#7.1.2_Header_Files','#7.1.3_Modifying_a_Library_Function','#7.1.4_Support_for_String_Handling','#7.1.5_Minimal_Support_for_Internationalization','#7.1.6_Allowable_Number_of_Open_Files','#7.1.7_Nonstandard_Header_Files_in_the_Source_Tree','#7.1.8_Library_Naming_Conventions','#7.2_The_C_I_O_Functions','#7.2.1_High-Level_I_O_Functions','#7.2.2_Overview_of_Low-Level_I_O_Implementation','#7.2.3_Device-Driver_Level_I_O_Functions','#7.2.4_Adding_a_User-Defined_Device_Driver_for_C_I_O','#Example_7-1_Mapping_Default_Streams_to_Device','#7.2.5_The_device_Prefix','#Example_7-2_Program_for_C_I_O_Device','#7.3_Handling_Reentrancy_(_register_lock()_and__register_unlock()_Functions)','#7.4_Library-Build_Process','#7.4.1_Required_Non-Texas_Instruments_Software','#7.4.2_Using_the_Library-Build_Process','#7.4.2.1_Automatic_Standard_Library_Rebuilding_by_the_Linker','#7.4.2.2_Invoking_mklib_Manually','#7.4.2.2.1_Building_Standard_Libraries','#7.4.2.2.2_Shared_or_Read-Only_Library_Directory','#7.4.2.2.3_Building_Libraries_With_Custom_Options','#7.4.2.2.4_The_mklib_Program_Option_Summary','#7.4.3_Extending_mklib','#7.4.3.1_Underlying_Mechanism','#7.4.3.2_Libraries_From_Other_Vendors']},'/Content/SLAU132R_HTML/using-the-c-c-compiler.html':{i:[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],t:['2 Using the C/C++ Compiler','2.1 About the Compiler','2.2 Invoking the C/C++ Compiler','2.3 Changing the Compiler\u0027s Behavior with Options','2.3.1 Linker Options','2.3.2 Frequently Used Options','2.3.3 Miscellaneous Useful Options','2.3.4 Run-Time Model Options','2.3.5 Symbolic Debugging Options','2.3.6 Specifying Filenames','2.3.7 Changing How the Compiler Interprets Filenames','2.3.8 Changing How the Compiler Processes C Files','2.3.9 Changing How the Compiler Interprets and Names Extensions','2.3.10 Specifying Directories','2.3.11 Assembler Options','2.3.12 Deprecated Options','2.4 Controlling the Compiler Through Environment Variables','2.4.1 Setting Default Compiler Options (MSP430_C_OPTION)','2.4.2 Naming One or More Alternate Directories (MSP430_C_DIR)','2.5 Controlling the Preprocessor','2.5.1 Predefined Macro Names','2.5.2 The Search Path for #include Files','2.5.2.1 Adding a Directory to the #include File Search Path (--include_path Option)','2.5.3 Support for the #warning and #warn Directives','2.5.4 Generating a Preprocessed Listing File (--preproc_only Option)','2.5.5 Continuing Compilation After Preprocessing (--preproc_with_compile Option)','2.5.6 Generating a Preprocessed Listing File with Comments (--preproc_with_comment Option)','2.5.7 Generating Preprocessed Listing with Line-Control Details (--preproc_with_line Option)','2.5.8 Generating Preprocessed Output for a Make Utility (--preproc_dependency Option)','2.5.9 Generating a List of Files Included with #include (--preproc_includes Option)','2.5.10 Generating a List of Macros in a File (--preproc_macros Option)','2.6 Passing Arguments to main()','2.7 Understanding Diagnostic Messages','2.7.1 Controlling Diagnostic Messages','2.7.2 How You Can Use Diagnostic Suppression Options','2.8 Other Messages','2.9 Generating Cross-Reference Listing Information (--gen_cross_reference Option)','2.10 Generating a Raw Listing File (--gen_preprocessor_listing Option)','2.11 Using Inline Function Expansion','2.11.1 Inlining Intrinsic Operators','2.11.2 Inlining Restrictions','2.12 Using Interlist','Example 2-1 An Interlisted Assembly Language File','2.13 Controlling Application Binary Interface','2.14 Enabling Entry Hook and Exit Hook Functions'],b:['#2_Using_the_C_C++_Compiler','#2.1_About_the_Compiler','#2.2_Invoking_the_C_C++_Compiler','#2.3_Changing_the_Compiler\u0027s_Behavior_with_Options','#2.3.1_Linker_Options','#2.3.2_Frequently_Used_Options','#2.3.3_Miscellaneous_Useful_Options','#2.3.4_Run-Time_Model_Options','#2.3.5_Symbolic_Debugging_Options','#2.3.6_Specifying_Filenames','#2.3.7_Changing_How_the_Compiler_Interprets_Filenames','#2.3.8_Changing_How_the_Compiler_Processes_C_Files','#2.3.9_Changing_How_the_Compiler_Interprets_and_Names_Extensions','#2.3.10_Specifying_Directories','#2.3.11_Assembler_Options','#2.3.12_Deprecated_Options','#2.4_Controlling_the_Compiler_Through_Environment_Variables','#2.4.1_Setting_Default_Compiler_Options_(MSP430_C_OPTION)','#2.4.2_Naming_One_or_More_Alternate_Directories_(MSP430_C_DIR)','#2.5_Controlling_the_Preprocessor','#2.5.1_Predefined_Macro_Names','#2.5.2_The_Search_Path_for__include_Files','#2.5.2.1_Adding_a_Directory_to_the__include_File_Search_Path_(--include_path_O...','#2.5.3_Support_for_the__warning_and__warn_Directives','#2.5.4_Generating_a_Preprocessed_Listing_File_(--preproc_only_Option)','#2.5.5_Continuing_Compilation_After_Preprocessing_(--preproc_with_compile_Option)','#2.5.6_Generating_a_Preprocessed_Listing_File_with_Comments_(--preproc_with_co...','#2.5.7_Generating_Preprocessed_Listing_with_Line-Control_Details_(--preproc_wi...','#2.5.8_Generating_Preprocessed_Output_for_a_Make_Utility_(--preproc_dependency...','#2.5.9_Generating_a_List_of_Files_Included_with__include_(--preproc_includes_O...','#2.5.10_Generating_a_List_of_Macros_in_a_File_(--preproc_macros_Option)','#2.6_Passing_Arguments_to_main()','#2.7_Understanding_Diagnostic_Messages','#2.7.1_Controlling_Diagnostic_Messages','#2.7.2_How_You_Can_Use_Diagnostic_Suppression_Options','#2.8_Other_Messages','#2.9_Generating_Cross-Reference_Listing_Information_(--gen_cross_reference_Opt...','#2.10_Generating_a_Raw_Listing_File_(--gen_preprocessor_listing_Option)','#2.11_Using_Inline_Function_Expansion','#2.11.1_Inlining_Intrinsic_Operators','#2.11.2_Inlining_Restrictions','#2.12_Using_Interlist','#Example_2-1_An_Interlisted_Assembly_Language_File','#2.13_Controlling_Application_Binary_Interface','#2.14_Enabling_Entry_Hook_and_Exit_Hook_Functions']}});