define({"0":{i:0.00853615666022314,u:"../Content/SLAU131R_HTML/abstract.html",a:"About This Manual The  MSP430 Assembly Language Tools User\u0027s Guide explains how to use the following Texas Instruments Code Generation object file tools: Assembler Archiver Linker Library information archiver Absolute lister Cross-reference lister Disassembler Object file display utility Name ...",t:"Read This First"},"1":{i:0.0100941427170067,u:"../Content/SLAU131R_HTML/introduction-to-the-software-development-tools.html",a:"The MSP430™ is supported by a set of software development tools, which includes an optimizing C/C++ compiler, an assembler, a linker, and assorted utilities. This chapter provides an overview of these tools. The MSP430 is supported by the following assembly language development tools: Assembler ...",t:"1 Introduction to the Software Development Tools"},"2":{i:0.0465340286567265,u:"../Content/SLAU131R_HTML/introduction-to-object-modules.html",a:"The assembler creates object modules from assembly code, and the linker creates executable object files from object modules. These executable object files can be executed by an MSP430 device.  Object modules make modular programming easier because they encourage you to think in terms of blocks of ...",t:"2 Introduction to Object Modules"},"3":{i:0.0351457873649085,u:"../Content/SLAU131R_HTML/program-loading-and-running.html",a:"Even after a program is written, compiled, and linked into an executable object file, there are still many tasks that need to be performed before the program does its job. The program must be loaded onto the target, memory and registers must be initialized, and the program must be set to running.  ...",t:"3 Program Loading and Running"},"4":{i:0.0535852269575304,u:"../Content/SLAU131R_HTML/assembler-description.html",a:"4 Assembler Description  The MSP430 assembler translates assembly language source files into machine language object files. These files are object modules, which are discussed in  Section 2. Source files can contain the following assembly language elements:",t:"4 Assembler Description"},"5":{i:0.0709049921807356,u:"../Content/SLAU131R_HTML/assembler-directives.html",a:" Assembler directives supply data to the program and control the assembly process. Assembler directives enable you to do the following: Assemble code and data into specified sections Reserve space in memory for uninitialized variables Control the appearance of listings Initialize memory Assemble ...",t:"5 Assembler Directives"},"6":{i:0.0616848605197676,u:"../Content/SLAU131R_HTML/macro-language-description.html",a:" The MSP430 assembler supports a macro language that enables you to create your own instructions. This is especially useful when a program executes a particular task several times. The macro language lets you: Define your own macros and redefine existing macros Simplify long or complicated assembly ...",t:"6 Macro Language Description"},"7":{i:0.0479833245507919,u:"../Content/SLAU131R_HTML/archiver-description.html",a:" The MSP430  archiver lets you combine several individual files into a single archive file. For example, you can collect several macros into a macro library. The assembler searches the library and uses the members that are called as macros by the source file. You can also use the archiver to collect ...",t:"7 Archiver Description"},"8":{i:0.0464158046256082,u:"../Content/SLAU131R_HTML/linker-description.html",a:"The MSP430 linker creates executable object files by combining object modules. This chapter describes the linker options, directives, and statements used to create executable object files. Object libraries, command files, and other key concepts are discussed as well. The concept of sections is basic ...",t:"8 Linker Description"},"9":{i:0.107833413673442,u:"../Content/SLAU131R_HTML/absolute-lister-description.html",a:" The MSP430 absolute lister is a debugging tool that accepts linked object files as input and creates .abs files as output. These .abs files can be assembled to produce a listing that shows the absolute addresses of object code. Manually, this could be a tedious process requiring many operations; ...",t:"9 Absolute Lister Description"},"10":{i:0.0632605542197354,u:"../Content/SLAU131R_HTML/cross-reference-lister-description.html",a:"The MSP430 cross-reference lister is a debugging tool. This utility accepts linked object files as input and produces a cross-reference listing as output. This listing shows symbols, their definitions, and their references in the linked source files.  10.1 Producing a Cross-Reference Listing Figure ...",t:"10 Cross-Reference Lister Description"},"11":{i:0.0155147619562294,u:"../Content/SLAU131R_HTML/object-file-utilities.html",a:"This chapter describes how to invoke the following utilities:  The object file display utility prints the contents of object files, executable files, and/or archive libraries in both text and XML formats.  The disassembler accepts object files and executable files as input and produces an assembly ...",t:"11 Object File Utilities"},"12":{i:0.113982896220847,u:"../Content/SLAU131R_HTML/hex-conversion-utility-description.html",a:" The MSP430 assembler and linker create object files which are in binary formats that encourage modular programming and provide powerful and flexible methods for managing code segments and target system memory. Most EPROM programmers do not accept object files as input. The hex conversion utility ...",t:"12 Hex Conversion Utility Description"},"13":{i:0.0264947557488291,u:"../Content/SLAU131R_HTML/sharing-c-c-header-files-with-assembly-source.html",a:"You can use the .cdecls assembler directive to share C headers containing declarations and prototypes between C and assembly code. Any legal C/C++ can be used in a .cdecls block and the C/C++ declarations will cause suitable assembly to be generated automatically, allowing you to reference the C/C++ ...",t:"13 Sharing C/C++ Header Files With Assembly Source"},"14":{i:0.105508935058218,u:"../Content/SLAU131R_HTML/symbolic-debugging-directives.html",a:"The assembler supports several directives that the MSP430 C/C++ compiler uses for symbolic debugging.  These directives are not meant for use by assembly-language programmers. They require arguments that can be difficult to calculate manually, and their usage must conform to a predetermined ...",t:"A Symbolic Debugging Directives"},"15":{i:0.0860972451752225,u:"../Content/SLAU131R_HTML/xml-link-information-file-description.html",a:" The MSP430  linker supports the generation of an XML link information file via the --xml_link_info file option. This option causes the linker to generate a well-formed XML file containing detailed information about the result of a link. The information included in this file includes all of the ...",t:"A XML Link Information File Description"},"16":{i:0.0242734537697214,u:"../Content/SLAU131R_HTML/crc-reference-implementation.html",a:"This appendix contains source code in C for a reference implementation of a CRC calculation routine that is compatible with the linker-generated CRC tables ( Section A.1). This code is found in the file labeled ref_crc.c. This appendix also contains source code for a simple example application using ...",t:"A CRC Reference Implementation"},"17":{i:0.00914080332658253,u:"../Content/SLAU131R_HTML/glossary.html",a:"A.1 Terminology ABI  Application binary interface. absolute address   An address that is permanently assigned to a MSP430 memory location. absolute constant expression  An expression that does not refer to any external symbols or any registers or memory reference. The value of the expression must be ...",t:"A Glossary"},"18":{i:0.00853615666022314,u:"../Content/SLAU131R_HTML/revision-history.html",a:"B Revision History B.1 Recent Revisions This table lists significant changes made to this document. The left column identifies the first version of this document in which a particular change appeared.",t:"B Revision History"},"19":{i:0.00853615666022314,u:"../Content/Resources/MasterPages/important_notice.html",a:"Texas Instruments Incorporated and its subsidiaries (TI) reserve the right to make corrections, enhancements, improvements and other changes to its semiconductor products and services per JESD46, latest issue, and to discontinue any product or service per JESD48, latest issue. Buyers should obtain ...",t:"IMPORTANT NOTICE"},"20":{i:0.0157919166565358,u:"../Content/SLAU131R_HTML/includes/important_notice.html",a:"Texas Instruments Incorporated (‘TI”) technical, application or other design advice, services or information, including, but not limited to, reference designs and materials relating to evaluation modules, (collectively, “TI Resources”) are intended to assist designers who are developing applications ...",t:"IMPORTANT NOTICE FOR TI DESIGN INFORMATION AND RESOURCES"},"21":{i:0.00853615666022314,u:"../Content/SLAU131R_HTML/includes/meta.html",a:"",t:"meta"},"22":{i:0.00853615666022314,u:"../Content/SLAU131R_HTML/includes/pagebottom.html",a:"Copyright© 2018, Texas Instruments Incorporated. An  IMPORTANT NOTICE  for this document addresses availability, warranty, changes, use in safety-critical applications, intellectual property matters and other important disclaimers. Submit Documentation Feedback",t:"pagebottom"},"23":{i:0.00853615666022314,u:"../Content/SLAU131R_HTML/includes/pagetop.html",a:"MSP430 Assembly\n\t Language Tools\n\t v18.1.0.LTS User\u0027s Guide SLAU131R - REVISED JANUARY 2018 Download PDF",t:"pagetop"},"24":{i:0.00853615666022314,u:"../Content/SLAU131R_HTML/includes/toc.html",a:"Read This First About This Manual How to Use This Manual Notational Conventions Related Documentation From Texas Instruments Trademarks 1 Introduction to the Software Development Tools 1.1 Software Development Tools Overview 1.2 Tools Descriptions 2 Introduction to Object Modules 2.1 Object File ...",t:"toc"},});