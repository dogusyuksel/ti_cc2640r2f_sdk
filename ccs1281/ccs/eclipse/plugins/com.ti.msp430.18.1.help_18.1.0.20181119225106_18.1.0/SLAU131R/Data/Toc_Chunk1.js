define({'/Content/SLAU131R_HTML/linker-description.html':{i:[164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333],t:['8 Linker Description','8.1 Linker Overview','8.2 The Linker\u0027s Role in the Software Development Flow','8.3 Invoking the Linker','8.4 Linker Options','8.4.1 Wildcards in File, Section, and Symbol Patterns','8.4.2 Specifying C/C++ Symbols with Linker Options','8.4.3 Relocation Capabilities (--absolute_exe and --relocatable Options)','8.4.3.1 Producing an Absolute Output Module (--absolute_exe option)','8.4.3.2 Producing a Relocatable Output Module (--relocatable option)','8.4.3.3 Producing an Executable, Relocatable Output Module (-ar Option)','8.4.4 Allocate Memory for Use by the Loader to Pass Arguments (--arg_size Option)','8.4.5 Compression (--cinit_compression and --copy_compression Option)','8.4.6 Control Linker Diagnostics','8.4.7 Automatic Library Selection (--disable_auto_rts Option)','8.4.8 Linker Command File Preprocessing (--disable_pp, --define and --undefine Options)','8.4.9 Error Correcting Code Testing (--ecc Options)','8.4.10 Define an Entry Point (--entry_point Option)','8.4.11 Set Default Fill Value (--fill_value Option)','8.4.12 Define Heap Size (--heap_size Option)','8.4.13 Hiding Symbols','8.4.14 Alter the Library Search Algorithm (--library Option, --search_path Option, and MSP430_C_DIR Environment Variable)','8.4.14.1 Name an Alternate Library Directory (--search_path Option)','8.4.14.2 Name an Alternate Library Directory (MSP430_C_DIR Environment Variable)','8.4.14.3 Exhaustively Read and Search Libraries (--reread_libs and --priority Options)','8.4.15 Change Symbol Localization','8.4.15.1 Make All Global Symbols Static (--make_static Option)','8.4.16 Create a Map File (--map_file Option)','8.4.17 Managing Map File Contents (--mapfile_contents Option)','8.4.18 Disable Name Demangling (--no_demangle)','8.4.19 Disable Merging of Symbolic Debugging Information (--no_sym_merge Option)','8.4.20 Strip Symbolic Information (--no_symtable Option)','8.4.21 Name an Output Module (--output_file Option)','8.4.22 Prioritizing Function Placement (--preferred_order Option)','8.4.23 C Language Options (--ram_model and --rom_model Options)','8.4.24 Retain Discarded Sections (--retain Option)','8.4.25 Create an Absolute Listing File (--run_abs Option)','8.4.26 Scan All Libraries for Duplicate Symbol Definitions (--scan_libraries)','8.4.27 Define Stack Size (--stack_size Option)','8.4.28 Enforce Strict Compatibility (--strict_compatibility Option)','8.4.29 Mapping of Symbols (--symbol_map Option)','8.4.30 Introduce an Unresolved Symbol (--undef_sym Option)','8.4.31 Replace Multiply Routine With Hardware Multiplier Routine (--use_hw_mpy)','8.4.32 Display a Message When an Undefined Output Section Is Created (--warn_sections)','8.4.33 Generate XML Link Information File (--xml_link_info Option)','8.4.34 Zero Initialization (--zero_init Option)','8.5 Linker Command Files','Example 8-1 Linker Command File','Example 8-2 Command File With Linker Directives','8.5.1 Reserved Names in Linker Command Files','8.5.2 Constants in Linker Command Files','8.5.3 Accessing Files and Libraries from a Linker Command File','8.5.4 The MEMORY Directive','8.5.4.1 Default Memory Model','8.5.4.2 MEMORY Directive Syntax','Example 8-3 The MEMORY Directive','8.5.4.3 Expressions and Address Operators','Example 8-4 Origin and Length as Expressions','8.5.5 The SECTIONS Directive','8.5.5.1 SECTIONS Directive Syntax','Example 8-5 The SECTIONS Directive','8.5.5.2 Section Allocation and Placement','8.5.5.2.1 Example: Placing Functions in RAM','8.5.5.2.2 Binding','8.5.5.2.3 Named Memory','8.5.5.2.4 Controlling Placement Using The HIGH Location Specifier','Example 8-6 Linker Placement With the HIGH Specifier','Example 8-7 Linker Placement Without HIGH Specifier','8.5.5.2.5 Alignment and Blocking','8.5.5.2.6 Alignment With Padding','8.5.5.3 Specifying Input Sections','Example 8-8 The Most Common Method of Specifying Section Contents','8.5.5.4 Using Multi-Level Subsections','8.5.5.5 Specifying Library or Archive Members as Input to Output Sections','Example 8-9 Archive Members to Output Sections','8.5.5.6 Allocation Using Multiple Memory Ranges','8.5.5.7 Automatic Splitting of Output Sections Among Non-Contiguous Memory Ranges','8.5.6 Placing a Section at Different Load and Run Addresses','8.5.6.1 Specifying Load and Run Addresses','8.5.6.2 Referring to the Load Address by Using the .label Directive','Example 8-10 Moving a Function from Slow to Fast Memory at Run Time','Example 8-11 Linker Command File for Example 8-10','8.5.7 Using GROUP and UNION Statements','8.5.7.1 Grouping Output Sections Together','Example 8-12 Allocate Sections Together','8.5.7.2 Overlaying Sections With the UNION Statement','Example 8-13 The UNION Statement','Example 8-14 Separate Load Addresses for UNION Sections','8.5.7.3 Nesting UNIONs and GROUPs','Example 8-15 Nesting GROUP and UNION Statements','8.5.7.4 Checking the Consistency of Allocators','8.5.7.5 Naming UNIONs and GROUPs','8.5.8 Special Section Types (DSECT, COPY, NOLOAD, NOINIT, and VECT_INIT)','8.5.9 Configuring Error Correcting Code (ECC) with the Linker','8.5.9.1 Using the ECC Specifier in the Memory Map','8.5.9.2 Using the ECC Directive','8.5.9.3 Using the VFILL Specifier in the Memory Map','8.5.10 Assigning Symbols at Link Time','8.5.10.1 Syntax of Assignment Statements','8.5.10.2 Assigning the SPC to a Symbol','8.5.10.3 Assignment Expressions','8.5.10.4 Symbols Defined by the Linker','8.5.10.5 Assigning Exact Start, End, and Size Values of a Section to a Symbol','8.5.10.6 Why the Dot Operator Does Not Always Work','8.5.10.7 Address and Dimension Operators','8.5.10.7.1 Input Items','8.5.10.7.2 Output Section','8.5.10.7.3 GROUPs','8.5.10.7.4 UNIONs','8.5.11 Creating and Filling Holes','8.5.11.1 Initialized and Uninitialized Sections','8.5.11.2 Creating Holes','8.5.11.3 Filling Holes','8.5.11.4 Explicit Initialization of Uninitialized Sections','8.6 Linker Symbols','8.6.1 Using Linker Symbols in C/C++ Applications','8.6.2 Declaring Weak Symbols','8.6.3 Resolving Symbols with Object Libraries','8.7 Default Placement Algorithm','Example 8-16 Default Allocation for MSP430 Devices','8.7.1 How the Allocation Algorithm Creates Output Sections','8.7.2 Reducing Memory Fragmentation','8.8 Linker-Generated Copy Tables','8.8.1 Using Copy Tables for Boot Loading','8.8.2 Using Built-in Link Operators in Copy Tables','8.8.3 Overlay Management Example','Example 8-17 Using a UNION for Memory Overlay','8.8.4 Generating Copy Tables With the table() Operator','Example 8-18 Produce Address for Linker Generated Copy Table','8.8.4.1 The table() Operator','8.8.4.2 Boot-Time Copy Tables','8.8.4.3 Using the table() Operator to Manage Object Components','Example 8-19 Linker Command File to Manage Object Components','8.8.4.4 Linker-Generated Copy Table Sections and Symbols','Example 8-20 Controlling the Placement of the Linker-Generated Copy Table Sections','8.8.4.5 Splitting Object Components and Overlay Management','Example 8-21 Creating a Copy Table to Access a Split Object Component','Example 8-22 Split Object Component Driver','8.8.5 Compression','8.8.5.1 Compressed Copy Table Format','8.8.5.2 Compressed Section Representation in the Object File','8.8.5.3 Compressed Data Layout','8.8.5.4 Run-Time Decompression','8.8.5.5 Compression Algorithms','8.8.6 Copy Table Contents','Example 8-23 MSP430 cpy_tbl.h File','8.8.7 General Purpose Copy Routine','Example 8-24 Run-Time-Support cpy_tbl.c File','8.9 Linker-Generated CRC Tables','8.9.1 The crc_table() Operator','8.9.2 Restrictions','8.9.3 Examples','Example 8-25 Using crc_table() Operator to Compute the CRC Value for .text Data','Example 8-26 Specifying an Algorithm in the crc_table() Operator','Example 8-27 Using a Single Table for Multiple Sections','Example 8-28 Applying the crc_table() Operator to a GROUP or UNION','8.9.4 Interface','Example 8-29 The CRC Table Header, crc_tbl.h ','Example 8-30 General Purpose CRC Check Routine','8.9.5 Verification of Linker Computed CRC on MSP430','8.10 Partial (Incremental) Linking','8.11 Linking C/C++ Code','8.11.1 Run-Time Initialization','8.11.2 Object Libraries and Run-Time Support','8.11.3 Setting the Size of the Stack and Heap Sections','8.11.4 Initializing and AutoInitialzing Variables at Run Time','8.11.5 Initialization of Cinit and Watchdog Timer Hold','8.12 Linker Example','Example 8-31 Linker Command File, demo.cmd','Example 8-32 Output Map File, demo.map'],b:['#8_Linker_Description','#8.1_Linker_Overview','#8.2_The_Linker\u0027s_Role_in_the_Software_Development_Flow','#8.3_Invoking_the_Linker','#8.4_Linker_Options','#8.4.1_Wildcards_in_File,_Section,_and_Symbol_Patterns','#8.4.2_Specifying_C_C++_Symbols_with_Linker_Options','#8.4.3_Relocation_Capabilities_(--absolute_exe_and_--relocatable_Options)','#8.4.3.1_Producing_an_Absolute_Output_Module_(--absolute_exe_option)','#8.4.3.2_Producing_a_Relocatable_Output_Module_(--relocatable_option)','#8.4.3.3_Producing_an_Executable,_Relocatable_Output_Module_(-ar_Option)','#8.4.4_Allocate_Memory_for_Use_by_the_Loader_to_Pass_Arguments_(--arg_size_Opt...','#8.4.5_Compression_(--cinit_compression_and_--copy_compression_Option)','#8.4.6_Control_Linker_Diagnostics','#8.4.7_Automatic_Library_Selection_(--disable_auto_rts_Option)','#8.4.8_Linker_Command_File_Preprocessing_(--disable_pp,_--define_and_--undefin...','#8.4.9_Error_Correcting_Code_Testing_(--ecc_Options)','#8.4.10_Define_an_Entry_Point_(--entry_point_Option)','#8.4.11_Set_Default_Fill_Value_(--fill_value_Option)','#8.4.12_Define_Heap_Size_(--heap_size_Option)','#8.4.13_Hiding_Symbols','#8.4.14_Alter_the_Library_Search_Algorithm_(--library_Option,_--search_path_Op...','#8.4.14.1_Name_an_Alternate_Library_Directory_(--search_path_Option)','#8.4.14.2_Name_an_Alternate_Library_Directory_(MSP430_C_DIR_Environment_Variable)','#8.4.14.3_Exhaustively_Read_and_Search_Libraries_(--reread_libs_and_--priority...','#8.4.15_Change_Symbol_Localization','#8.4.15.1_Make_All_Global_Symbols_Static_(--make_static_Option)','#8.4.16_Create_a_Map_File_(--map_file_Option)','#8.4.17_Managing_Map_File_Contents_(--mapfile_contents_Option)','#8.4.18_Disable_Name_Demangling_(--no_demangle)','#8.4.19_Disable_Merging_of_Symbolic_Debugging_Information_(--no_sym_merge_Option)','#8.4.20_Strip_Symbolic_Information_(--no_symtable_Option)','#8.4.21_Name_an_Output_Module_(--output_file_Option)','#8.4.22_Prioritizing_Function_Placement_(--preferred_order_Option)','#8.4.23_C_Language_Options_(--ram_model_and_--rom_model_Options)','#8.4.24_Retain_Discarded_Sections_(--retain_Option)','#8.4.25_Create_an_Absolute_Listing_File_(--run_abs_Option)','#8.4.26_Scan_All_Libraries_for_Duplicate_Symbol_Definitions_(--scan_libraries)','#8.4.27_Define_Stack_Size_(--stack_size_Option)','#8.4.28_Enforce_Strict_Compatibility_(--strict_compatibility_Option)','#8.4.29_Mapping_of_Symbols_(--symbol_map_Option)','#8.4.30_Introduce_an_Unresolved_Symbol_(--undef_sym_Option)','#8.4.31_Replace_Multiply_Routine_With_Hardware_Multiplier_Routine_(--use_hw_mpy)','#8.4.32_Display_a_Message_When_an_Undefined_Output_Section_Is_Created_(--warn_...','#8.4.33_Generate_XML_Link_Information_File_(--xml_link_info_Option)','#8.4.34_Zero_Initialization_(--zero_init_Option)','#8.5_Linker_Command_Files','#Example_8-1_Linker_Command_File','#Example_8-2_Command_File_With_Linker_Directives','#8.5.1_Reserved_Names_in_Linker_Command_Files','#8.5.2_Constants_in_Linker_Command_Files','#8.5.3_Accessing_Files_and_Libraries_from_a_Linker_Command_File','#8.5.4_The_MEMORY_Directive','#8.5.4.1_Default_Memory_Model','#8.5.4.2_MEMORY_Directive_Syntax','#Example_8-3_The_MEMORY_Directive','#8.5.4.3_Expressions_and_Address_Operators','#Example_8-4_Origin_and_Length_as_Expressions','#8.5.5_The_SECTIONS_Directive','#8.5.5.1_SECTIONS_Directive_Syntax','#Example_8-5_The_SECTIONS_Directive','#8.5.5.2_Section_Allocation_and_Placement','#8.5.5.2.1_Example:_Placing_Functions_in_RAM','#8.5.5.2.2_Binding','#8.5.5.2.3_Named_Memory','#8.5.5.2.4_Controlling_Placement_Using_The_HIGH_Location_Specifier','#Example_8-6_Linker_Placement_With_the_HIGH_Specifier','#Example_8-7_Linker_Placement_Without_HIGH_Specifier','#8.5.5.2.5_Alignment_and_Blocking','#8.5.5.2.6_Alignment_With_Padding','#8.5.5.3_Specifying_Input_Sections','#Example_8-8_The_Most_Common_Method_of_Specifying_Section_Contents','#8.5.5.4_Using_Multi-Level_Subsections','#8.5.5.5_Specifying_Library_or_Archive_Members_as_Input_to_Output_Sections','#Example_8-9_Archive_Members_to_Output_Sections','#8.5.5.6_Allocation_Using_Multiple_Memory_Ranges','#8.5.5.7_Automatic_Splitting_of_Output_Sections_Among_Non-Contiguous_Memory_Ra...','#8.5.6_Placing_a_Section_at_Different_Load_and_Run_Addresses','#8.5.6.1_Specifying_Load_and_Run_Addresses','#8.5.6.2_Referring_to_the_Load_Address_by_Using_the_.label_Directive','#Example_8-10_Moving_a_Function_from_Slow_to_Fast_Memory_at_Run_Time','#Example_8-11_Linker_Command_File_for_Example_8-10','#8.5.7_Using_GROUP_and_UNION_Statements','#8.5.7.1_Grouping_Output_Sections_Together','#Example_8-12_Allocate_Sections_Together','#8.5.7.2_Overlaying_Sections_With_the_UNION_Statement','#Example_8-13_The_UNION_Statement','#Example_8-14_Separate_Load_Addresses_for_UNION_Sections','#8.5.7.3_Nesting_UNIONs_and_GROUPs','#Example_8-15_Nesting_GROUP_and_UNION_Statements','#8.5.7.4_Checking_the_Consistency_of_Allocators','#8.5.7.5_Naming_UNIONs_and_GROUPs','#8.5.8_Special_Section_Types_(DSECT,_COPY,_NOLOAD,_NOINIT,_and_VECT_INIT)','#8.5.9_Configuring_Error_Correcting_Code_(ECC)_with_the_Linker','#8.5.9.1_Using_the_ECC_Specifier_in_the_Memory_Map','#8.5.9.2_Using_the_ECC_Directive','#8.5.9.3_Using_the_VFILL_Specifier_in_the_Memory_Map','#8.5.10_Assigning_Symbols_at_Link_Time','#8.5.10.1_Syntax_of_Assignment_Statements','#8.5.10.2_Assigning_the_SPC_to_a_Symbol','#8.5.10.3_Assignment_Expressions','#8.5.10.4_Symbols_Defined_by_the_Linker','#8.5.10.5_Assigning_Exact_Start,_End,_and_Size_Values_of_a_Section_to_a_Symbol','#8.5.10.6_Why_the_Dot_Operator_Does_Not_Always_Work','#8.5.10.7_Address_and_Dimension_Operators','#8.5.10.7.1_Input_Items','#8.5.10.7.2_Output_Section','#8.5.10.7.3_GROUPs','#8.5.10.7.4_UNIONs','#8.5.11_Creating_and_Filling_Holes','#8.5.11.1_Initialized_and_Uninitialized_Sections','#8.5.11.2_Creating_Holes','#8.5.11.3_Filling_Holes','#8.5.11.4_Explicit_Initialization_of_Uninitialized_Sections','#8.6_Linker_Symbols','#8.6.1_Using_Linker_Symbols_in_C_C++_Applications','#8.6.2_Declaring_Weak_Symbols','#8.6.3_Resolving_Symbols_with_Object_Libraries','#8.7_Default_Placement_Algorithm','#Example_8-16_Default_Allocation_for_MSP430_Devices','#8.7.1_How_the_Allocation_Algorithm_Creates_Output_Sections','#8.7.2_Reducing_Memory_Fragmentation','#8.8_Linker-Generated_Copy_Tables','#8.8.1_Using_Copy_Tables_for_Boot_Loading','#8.8.2_Using_Built-in_Link_Operators_in_Copy_Tables','#8.8.3_Overlay_Management_Example','#Example_8-17_Using_a_UNION_for_Memory_Overlay','#8.8.4_Generating_Copy_Tables_With_the_table()_Operator','#Example_8-18_Produce_Address_for_Linker_Generated_Copy_Table','#8.8.4.1_The_table()_Operator','#8.8.4.2_Boot-Time_Copy_Tables','#8.8.4.3_Using_the_table()_Operator_to_Manage_Object_Components','#Example_8-19_Linker_Command_File_to_Manage_Object_Components','#8.8.4.4_Linker-Generated_Copy_Table_Sections_and_Symbols','#Example_8-20_Controlling_the_Placement_of_the_Linker-Generated_Copy_Table_Sec...','#8.8.4.5_Splitting_Object_Components_and_Overlay_Management','#Example_8-21_Creating_a_Copy_Table_to_Access_a_Split_Object_Component','#Example_8-22_Split_Object_Component_Driver','#8.8.5_Compression','#8.8.5.1_Compressed_Copy_Table_Format','#8.8.5.2_Compressed_Section_Representation_in_the_Object_File','#8.8.5.3_Compressed_Data_Layout','#8.8.5.4_Run-Time_Decompression','#8.8.5.5_Compression_Algorithms','#8.8.6_Copy_Table_Contents','#Example_8-23_MSP430_cpy_tbl.h_File','#8.8.7_General_Purpose_Copy_Routine','#Example_8-24_Run-Time-Support_cpy_tbl.c_File','#8.9_Linker-Generated_CRC_Tables','#8.9.1_The_crc_table()_Operator','#8.9.2_Restrictions','#8.9.3_Examples','#Example_8-25_Using_crc_table()_Operator_to_Compute_the_CRC_Value_for_.text_Data','#Example_8-26_Specifying_an_Algorithm_in_the_crc_table()_Operator','#Example_8-27_Using_a_Single_Table_for_Multiple_Sections','#Example_8-28_Applying_the_crc_table()_Operator_to_a_GROUP_or_UNION','#8.9.4_Interface','#Example_8-29_The_CRC_Table_Header,_crc_tbl.h','#Example_8-30_General_Purpose_CRC_Check_Routine','#8.9.5_Verification_of_Linker_Computed_CRC_on_MSP430','#8.10_Partial_(Incremental)_Linking','#8.11_Linking_C_C++_Code','#8.11.1_Run-Time_Initialization','#8.11.2_Object_Libraries_and_Run-Time_Support','#8.11.3_Setting_the_Size_of_the_Stack_and_Heap_Sections','#8.11.4_Initializing_and_AutoInitialzing_Variables_at_Run_Time','#8.11.5_Initialization_of_Cinit_and_Watchdog_Timer_Hold','#8.12_Linker_Example','#Example_8-31_Linker_Command_File,_demo.cmd','#Example_8-32_Output_Map_File,_demo.map']},'/Content/SLAU131R_HTML/macro-language-description.html':{i:[119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152],t:['6 Macro Language Description','6.1 Using Macros','6.2 Defining Macros','Example 6-1 Macro Definition, Call, and Expansion','6.3 Macro Parameters/Substitution Symbols','Example 6-2 Calling a Macro With Varying Numbers of Arguments','6.3.1 Directives That Define Substitution Symbols','Example 6-3 The .asg Directive','Example 6-4 The .eval Directive','6.3.2 Built-In Substitution Symbol Functions','Example 6-5 Using Built-In Substitution Symbol Functions','6.3.3 Recursive Substitution Symbols','Example 6-6 Recursive Substitution','6.3.4 Forced Substitution','Example 6-7 Using the Forced Substitution Operator','6.3.5 Accessing Individual Characters of Subscripted Substitution Symbols','Example 6-8 Using Subscripted Substitution Symbols to Redefine an Instruction','Example 6-9 Using Subscripted Substitution Symbols to Find Substrings','6.3.6 Substitution Symbols as Local Variables in Macros','6.4 Macro Libraries','6.5 Using Conditional Assembly in Macros','Example 6-10 The .loop/.break/.endloop Directives','Example 6-11 Nested Conditional Assembly Directives','Example 6-12 Built-In Substitution Symbol Functions in a Conditional Assembly Code Block','6.6 Using Labels in Macros','Example 6-13 Unique Labels in a Macro','6.7 Producing Messages in Macros','Example 6-14 Producing Messages in a Macro','6.8 Using Directives to Format the Output Listing','6.9 Using Recursive and Nested Macros','Example 6-15 Using Nested Macros','Example 6-16 Using Recursive Macros','6.10 Macro Directives Summary','Table 6-3 Manipulating Substitution Symbols'],b:['#6_Macro_Language_Description','#6.1_Using_Macros','#6.2_Defining_Macros','#Example_6-1_Macro_Definition,_Call,_and_Expansion','#6.3_Macro_Parameters_Substitution_Symbols','#Example_6-2_Calling_a_Macro_With_Varying_Numbers_of_Arguments','#6.3.1_Directives_That_Define_Substitution_Symbols','#Example_6-3_The_.asg_Directive','#Example_6-4_The_.eval_Directive','#6.3.2_Built-In_Substitution_Symbol_Functions','#Example_6-5_Using_Built-In_Substitution_Symbol_Functions','#6.3.3_Recursive_Substitution_Symbols','#Example_6-6_Recursive_Substitution','#6.3.4_Forced_Substitution','#Example_6-7_Using_the_Forced_Substitution_Operator','#6.3.5_Accessing_Individual_Characters_of_Subscripted_Substitution_Symbols','#Example_6-8_Using_Subscripted_Substitution_Symbols_to_Redefine_an_Instruction','#Example_6-9_Using_Subscripted_Substitution_Symbols_to_Find_Substrings','#6.3.6_Substitution_Symbols_as_Local_Variables_in_Macros','#6.4_Macro_Libraries','#6.5_Using_Conditional_Assembly_in_Macros','#Example_6-10_The_.loop_.break_.endloop_Directives','#Example_6-11_Nested_Conditional_Assembly_Directives','#Example_6-12_Built-In_Substitution_Symbol_Functions_in_a_Conditional_Assembly...','#6.6_Using_Labels_in_Macros','#Example_6-13_Unique_Labels_in_a_Macro','#6.7_Producing_Messages_in_Macros','#Example_6-14_Producing_Messages_in_a_Macro','#6.8_Using_Directives_to_Format_the_Output_Listing','#6.9_Using_Recursive_and_Nested_Macros','#Example_6-15_Using_Nested_Macros','#Example_6-16_Using_Recursive_Macros','#6.10_Macro_Directives_Summary','#Table_6-3_Manipulating_Substitution_Symbols']},'/Content/SLAU131R_HTML/object-file-utilities.html':{i:[345,346,347,348,349],t:['11 Object File Utilities','11.1 Invoking the Object File Display Utility','11.2 Invoking the Disassembler','11.3 Invoking the Name Utility','11.4 Invoking the Strip Utility'],b:['#11_Object_File_Utilities','#11.1_Invoking_the_Object_File_Display_Utility','#11.2_Invoking_the_Disassembler','#11.3_Invoking_the_Name_Utility','#11.4_Invoking_the_Strip_Utility']},'/Content/SLAU131R_HTML/program-loading-and-running.html':{i:[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],t:['3 Program Loading and Running','3.1 Loading','3.1.1 Load and Run Addresses','3.1.2 Bootstrap Loading','3.1.2.1 Boot, Load, and Run Addresses','3.1.2.2 Primary Bootloader','3.1.2.3 Secondary Bootloader','3.1.2.4 Boot Table','3.1.2.5 Bootloader Routine','Example 3-1 Sample Secondary Bootloader Routine','3.2 Entry Point','3.3 Run-Time Initialization','3.3.1  _c_int00','3.3.2 RAM Model vs. ROM Model','3.3.2.1 Autoinitializing Variables at Run Time (--rom_model)','3.3.2.2 Initializing Variables at Load Time (--ram_model)','3.3.2.3 The --rom_model and --ram_model Linker Options','3.3.3 Copy Tables','3.3.3.1 BINIT','3.3.3.2 CINIT','3.4 Arguments to main','3.5 Run-Time Relocation','3.6 Additional Information'],b:['#3_Program_Loading_and_Running','#3.1_Loading','#3.1.1_Load_and_Run_Addresses','#3.1.2_Bootstrap_Loading','#3.1.2.1_Boot,_Load,_and_Run_Addresses','#3.1.2.2_Primary_Bootloader','#3.1.2.3_Secondary_Bootloader','#3.1.2.4_Boot_Table','#3.1.2.5_Bootloader_Routine','#Example_3-1_Sample_Secondary_Bootloader_Routine','#3.2_Entry_Point','#3.3_Run-Time_Initialization','#3.3.1___c_int00','#3.3.2_RAM_Model_vs._ROM_Model','#3.3.2.1_Autoinitializing_Variables_at_Run_Time_(--rom_model)','#3.3.2.2_Initializing_Variables_at_Load_Time_(--ram_model)','#3.3.2.3_The_--rom_model_and_--ram_model_Linker_Options','#3.3.3_Copy_Tables','#3.3.3.1_BINIT','#3.3.3.2_CINIT','#3.4_Arguments_to_main','#3.5_Run-Time_Relocation','#3.6_Additional_Information']},'/Content/SLAU131R_HTML/revision-history.html':{i:[450,451],t:['E Revision History','E.1 Recent Revisions'],b:['#E_Revision_History','#E.1_Recent_Revisions']},'/Content/SLAU131R_HTML/sharing-c-c-header-files-with-assembly-source.html':{i:[386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417],t:['13 Sharing C/C++ Header Files With Assembly Source','13.1 Overview of the .cdecls Directive','13.2 Notes on C/C++ Conversions','13.2.1 Comments','13.2.2 Conditional Compilation (#if/#else/#ifdef/etc.)','13.2.3 Pragmas','13.2.4 The #error and #warning Directives','13.2.5 Predefined symbol _ _ASM_HEADER_ _','13.2.6 Usage Within C/C++ asm( ) Statements','13.2.7 The #include Directive','13.2.8 Conversion of #define Macros','13.2.9 The #undef Directive','13.2.10 Enumerations ','13.2.11 C Strings','13.2.12 C/C++ Built-In Functions','13.2.13 Structures and Unions','13.2.14 Function/Variable Prototypes','13.2.15 C Constant Suffixes ','13.2.16 Basic C/C++ Types ','13.3 Notes on C++ Specific Conversions','13.3.1 Name Mangling','13.3.2 Derived Classes','13.3.3 Templates','13.3.4 Virtual Functions ','13.4 Special Assembler Support','13.4.1 Enumerations (.enum/.emember/.endenum)','13.4.2 The .define Directive','13.4.3 The .undefine/.unasg Directives','13.4.4 The $defined( ) Built-In Function','13.4.5 The $sizeof Built-In Function','13.4.6 Structure/Union Alignment and $alignof( )','13.4.7 The .cstring Directive'],b:['#13_Sharing_C_C++_Header_Files_With_Assembly_Source','#13.1_Overview_of_the_.cdecls_Directive','#13.2_Notes_on_C_C++_Conversions','#13.2.1_Comments','#13.2.2_Conditional_Compilation_(_if__else__ifdef_etc.)','#13.2.3_Pragmas','#13.2.4_The__error_and__warning_Directives','#13.2.5_Predefined_symbol____ASM_HEADER___','#13.2.6_Usage_Within_C_C++_asm(_)_Statements','#13.2.7_The__include_Directive','#13.2.8_Conversion_of__define_Macros','#13.2.9_The__undef_Directive','#13.2.10_Enumerations','#13.2.11_C_Strings','#13.2.12_C_C++_Built-In_Functions','#13.2.13_Structures_and_Unions','#13.2.14_Function_Variable_Prototypes','#13.2.15_C_Constant_Suffixes','#13.2.16_Basic_C_C++_Types','#13.3_Notes_on_C++_Specific_Conversions','#13.3.1_Name_Mangling','#13.3.2_Derived_Classes','#13.3.3_Templates','#13.3.4_Virtual_Functions','#13.4_Special_Assembler_Support','#13.4.1_Enumerations_(.enum_.emember_.endenum)','#13.4.2_The_.define_Directive','#13.4.3_The_.undefine_.unasg_Directives','#13.4.4_The_$defined(_)_Built-In_Function','#13.4.5_The_$sizeof_Built-In_Function','#13.4.6_Structure_Union_Alignment_and_$alignof(_)','#13.4.7_The_.cstring_Directive']},'/Content/SLAU131R_HTML/symbolic-debugging-directives.html':{i:[418,419,420],t:['A Symbolic Debugging Directives','A.1 DWARF Debugging Format','A.2 Debug Directive Syntax'],b:['#A_Symbolic_Debugging_Directives','#A.1_DWARF_Debugging_Format','#A.2_Debug_Directive_Syntax']},'/Content/SLAU131R_HTML/xml-link-information-file-description.html':{i:[421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437],t:['B XML Link Information File Description','B.1 XML Information File Element Types','B.2 Document Elements','B.2.1 Header Elements','Example B-1 Header Element for the hi.out Output File','B.2.2 Input File List','Example B-2 Input File List for the hi.out Output File','B.2.3 Object Component List','Example B-3 Object Component List for the fl-4 Input File','B.2.4 Logical Group List','Example B-4 Logical Group List for the fl-4 Input File','B.2.5 Placement Map','Example B-5 Placement Map for the fl-4 Input File','B.2.6 Far Call Trampoline List','Example B-6 Fall Call Trampoline List for the fl-4 Input File','B.2.7 Symbol Table','Example B-7 Symbol Table for the fl-4 Input File'],b:['#B_XML_Link_Information_File_Description','#B.1_XML_Information_File_Element_Types','#B.2_Document_Elements','#B.2.1_Header_Elements','#Example_B-1_Header_Element_for_the_hi.out_Output_File','#B.2.2_Input_File_List','#Example_B-2_Input_File_List_for_the_hi.out_Output_File','#B.2.3_Object_Component_List','#Example_B-3_Object_Component_List_for_the_fl-4_Input_File','#B.2.4_Logical_Group_List','#Example_B-4_Logical_Group_List_for_the_fl-4_Input_File','#B.2.5_Placement_Map','#Example_B-5_Placement_Map_for_the_fl-4_Input_File','#B.2.6_Far_Call_Trampoline_List','#Example_B-6_Fall_Call_Trampoline_List_for_the_fl-4_Input_File','#B.2.7_Symbol_Table','#Example_B-7_Symbol_Table_for_the_fl-4_Input_File']}});