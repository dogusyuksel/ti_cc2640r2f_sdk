<body>

	<group id="required" name="Required"/>
	<group id="advisory" name="Advisory"/>
	
	<category id="1" name="Environment">
		<rule id="1.1" groups="required" name="All code shall conform to ISO 9899:1990 &quot;Programming languages - C&quot;, amended and corrected by ISO/IEC 9899/COR1:1995, ISO/IEC 9899/AMD1:1995, and ISO/IEC 9899/COR2:1996."/>
	</category>
	
	<category id="2" name="Language extensions">
		<rule id="2.1" groups="required" name="Assembly language shall be encapsulated and isolated."/>
		<rule id="2.2" groups="required" name="Source code shall only use /* ... */ style comments."/>
		<rule id="2.3" groups="required" name="The character sequence /* shall not be used within a comment."/>
	</category>
	
	<category id="3" name="Documentation">
	</category>
	
	<category id="4" name="Character sets">
		<rule id="4.1" groups="required" name="Only those excape sequences that are defined in the ISO C standard shall be used."/>
		<rule id="4.2" groups="required" name="Trigraphs shall not be used."/>
	</category>
	
	<category id="5" name="Identifiers">
		<rule id="5.2" groups="required" name="Identifiers in an inner scope shall not use the same name as an identifier in an outer scope, and therefore hide that identifier."/>
		<rule id="5.4" groups="required" name="A tag name shall be a unique identifier."/>
	</category>
	
	<category id="6" name="Types">
		<rule id="6.1" groups="required" name="The plain char type shall be used only for storage and use of character values."/>
		<rule id="6.2" groups="required" name="signed and unsigned char type shall be used only of the storage and use of numeric values."/>
		<rule id="6.4" groups="required" name="Bit fields shall only be defined to be of type unsigned inti or signed int."/>
		<rule id="6.5" groups="required" name="Bit fields of the type signed int shall be at least 2 bits long."/>
	</category>
	
	<category id="7" name="Constants">
		<rule id="7.1" groups="required" name="Octal extensions (other than zero) and octal escape sequences shall not be used."/>
	</category>
	
	<category id="8" name="Declarations and definitions">
		<rule id="8.1" groups="required" name="Functions shall have prototype declarsions and the prototype shall be visible at both the function definition and call."/>
		<rule id="8.2" groups="required" name="Whenever an object or function is declared or defined, its type shall be explicitly stated."/>
		<rule id="8.5" groups="required" name="There shall be no definitions of objects or functons in a header file."/>
		<rule id="8.6" groups="required" name="Functions shall be declared at file scope."/>
		<rule id="8.7" groups="required" name="Objects shall be defined at block scope if they are only accessed from within a single function."/>
		<rule id="8.11" groups="required" name="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage."/>
		<rule id="8.12" groups="required" name="When an array is declared with external linkage, its size shall be stated explicitly or defined implicitly by initialization."/>
	</category>
	
	<category id="9" name="Initialization">
		<rule id="9.1" groups="required" name="All automatic variables shall have been assigned a value before being used."/>
		<rule id="9.2" groups="required" name="Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures."/>
		<rule id="9.3" groups="required" name="In an enumerator list, the &quot;=&quot; construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized."/>
	</category>
	
	<category id="10" name="Arithmetic type conversions">
		<rule id="10.1" groups="required" name="The value of an expression of integer type shall not be implicitly converted to a different underlying type if: a) it is not a conversion to a wider integer type of the same signedness, or b) the expression is complex, or c) the expression is not constant and is a function argument, or d) the expression is not constant and is a return expression."/>
		<rule id="10.2" groups="required" name="The value of an expression of floating type shall not be implicitly converted to a different type if: a) it is not a conversion to a wider floating type, or b) the expression is complex, or c) the expression is a function argument, or d) the expression is a return expression."/>
		<rule id="10.3" groups="required" name="The value of a complex expression of integer type may only be cast to a type that is narrower and of the same signedness as the underlying type of the expression."/>
		<rule id="10.4" groups="required" name="The value of a complex expression of floating type may only be cast to a narrower floating type."/>
		<rule id="10.5" groups="required" name="If the bitwise operations ~ and &lt;&lt; are applied to an operand of underlying type unsigned char  or unsigned short, the result shall immediately cast to the underlying type of the operand."/>
		<rule id="10.6" groups="required" name="A &quot;U&quot; suffix shall be applied to all constans of unsigned type."/>
	</category>
	
	<category id="11" name="Pointer type conversions">
		<rule id="11.1" groups="required" name="Conversions shall not be performed between a pointer to a function and any type other than an integral type."/>
		<rule id="11.2" groups="required" name="Conversions shall not be perfornmed between a  pointer to object and any type other than an integral type, another pointer to object type or a pointer to void."/>
		<rule id="11.3" groups="advisory" name="A cast should not be performed between a pointer type and an integral type."/>
		<rule id="11.4" groups="advisory" name="A cast should not be performed between a pointer to object type and a different pointer to object type."/>
		<rule id="11.5" groups="required" name="A cast shall not be performed that removes any const or volatile qualifications from the type addressed by a pointer."/>
	</category>
	
	<category id="12" name="Expressions">
		<rule id="12.1" groups="advisory" name="Limited dependence should be placed on C's operator precedence rules in expressions."/>
		<rule id="12.2" groups="required" name="The value of an expression shall be the same under any order of evaluation that the standard permits."/>
		<rule id="12.3" groups="required" name="The sizeof operator shall not be used on expression that contain side effects."/>
		<rule id="12.4" groups="required" name="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects."/>
		<rule id="12.5" groups="required" name="The operations of a logical &amp;&amp; or || shall be primary-expressions."/>
		<rule id="12.6" groups="advisory" name="The operands of logical operators (&amp;&amp;, || and !) should be effectively Boolean. Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, || and !)."/>
		<rule id="12.7" groups="required" name="Bitwise operators shall not be applied to operands whose underlying type is signed."/>
		<rule id="12.8" groups="required" name="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand."/>
		<rule id="12.9" groups="required" name="The unary minus operator shall not be applied to an expression whose underlying type is unsigned."/>
		<rule id="12.13" groups="advisory" name="The increment (++ and decrement (--) operators should not be mixed with other operators in an expression."/>
	</category>
	
	<category id="13" name="Control statement expressions">
		<rule id="13.1" groups="required" name="Assignment operators shall not be used in expressiopns that yield a Boolean value."/>
		<rule id="13.3" groups="required" name="Floating-point expressions shall not be tested for equality nor inequality."/>
		<rule id="13.4" groups="required" name="The controlling expression of a for statement shall not contain any objects of floating type."/>
	</category>
	
	<category id="14" name="Control Flow">
		<rule id="14.1" groups="required" name="There shall be no unreachable code."/>
		<rule id="14.2" groups="required" name="All non-null statements shall either: a) have at least one side effect however executed, or b) cause cohntrol flow to change."/>
		<rule id="14.3" groups="required" name="Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that the first character following the null statement is a white-space character."/>
		<rule id="14.4" groups="required" name="The goto statement shall not be used."/>
		<rule id="14.5" groups="required" name="The continue statement shall not be used."/>
		<rule id="14.6" groups="required" name="For any iteration statement there shall be at most one break statement used for loop termination."/>
		<rule id="14.7" groups="required" name="A function shall have a single point of exit at the end of the function."/>
		<rule id="14.8" groups="required" name="The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement."/>
		<rule id="14.9" groups="required" name="An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement."/>
	</category>
	
	<category id="15" name="Switch statements">
		<rule id="15.1" groups="required" name="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement."/>
		<rule id="15.2" groups="required" name="An unconditional break statement shall terminate every non-empty switch clause."/>
		<rule id="15.3" groups="required" name="The final clause of a switch statement sahll be the default clause."/>
		<rule id="15.4" groups="required" name="A switch statement shall not represent a value that is effectively Boolean."/>
		<rule id="15.5" groups="required" name="Every switch statement shall have at least one case clause."/>
	</category>
	
	<category id="16" name="Functions">
		<rule id="16.1" groups="required" name="Functions shall not be defined with variable numbers of arguments."/>
		<rule id="16.3" groups="required" name="Identifiers shall be given for all of the parameters in a functuion protoype declaration."/>
		<rule id="16.4" groups="required" name="The identifiers used in the declaration and definition of a function shall be identical."/>
		<rule id="16.5" groups="required" name="Functions with no parameters shall be declared with parameter type void."/>
		<rule id="16.7" groups="advisory" name="A pointer parameter in a function prototype shall be declared as pointer to const if the pointer is not used to modify the adressed object."/>
		<rule id="16.8" groups="required" name="All exit paths from a function with non-void return type shall have an explicit return statement with an expression."/>
		<rule id="16.9" groups="required" name="A function identifier shall only be used with either a preceding &amp;, or with a parenthesized parameter list, which may be empty."/>
	</category>
	
	<category id="17" name="Pointers and arrays">
		<rule id="17.4" groups="required" name="Array indexing shall be the only allowed form of pointer arithmetic."/>
		<rule id="17.5" groups="advisory" name="The declaration of objects should contain no more than 2 levels of pointer indirection."/>
		<rule id="17.6" groups="required" name="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist."/>
	</category>
	
	<category id="18" name="Structures and unions">
		<rule id="18.1" groups="required" name="All structure or union types shall be complete at the end of a translation unit."/>
		<rule id="18.4" groups="required" name="Unions shall not be used."/>
	</category>
	
	<category id="19" name="Preprocessing directives">
		<rule id="19.1" groups="advisory" name="#include statements in a file should only be preceded by other preprocessor directives or comments."/>
		<rule id="19.2" groups="advisory" name="Non-standard characters should not occur in header file hnames in #include directives."/>
		<rule id="19.3" groups="required" name="The #include directive shall be followed by either a &lt;filename&gt; or &quot;filename&quot; sequence."/>
		<rule id="19.4" groups="required" name="C macros shall only expand to a braced initializer, a constant, a parenthesized expression, a type qualifier, a storage class specifier, or a do-while-zero construct."/>
		<rule id="19.5" groups="required" name="Macros shall not be #define'd or #undef'd within a block."/>
		<rule id="19.6" groups="required" name="#undef shall not be used."/>
		<rule id="19.7" groups="advisory" name="A function should be used in preference to a function-like macro."/>
		<rule id="19.8" groups="required" name="A function-like macro shall not be invoked without all of its arguments."/>
		<rule id="19.9" groups="required" name="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives."/>
		<rule id="19.10" groups="required" name="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it it used as the operand of # or ##."/>
		<rule id="19.11" groups="required" name="All macro identifiers in preprocessor directives shall be defined before use, except in #ifdef and #ifndef preprocessor directives and the defined() operator."/>
		<rule id="19.12" groups="required" name="There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition."/>
		<rule id="19.13" groups="advisory" name="The # and ## preprocessor operators should not be used."/>
		<rule id="19.14" groups="required" name="The defined preprocessor operator shall only be used in one of the two standard forms."/>
		<rule id="19.16" groups="required" name="Preprocessoing directives shall be syntactically meaningful even when excluded by the preprocessor."/>
		<rule id="19.17" groups="required" name="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related."/>
	</category>
	
	<category id="20" name="Standard libraries">
		<rule id="20.1" groups="required" name="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined."/>
		<rule id="20.2" groups="required" name="The names of standard library macros, obhjects and functions shall not be reused."/>
		<rule id="20.4" groups="required" name="Dynamic heap memory allocation shall not be used."/>
		<rule id="20.5" groups="required" name="The error indicator errno shall not be used."/>
		<rule id="20.6" groups="required" name="The macro offsetof, in library &lt;stddef.h&gt;, shall not be used."/>
		<rule id="20.7" groups="required" name="The setjmp macro and the longjmp function shall not be used."/>
		<rule id="20.8" groups="required" name="The signal handling facilities of &lt;signal.h&gt; shall not be used."/>
		<rule id="20.9" groups="required" name="The input/output library &lt;stdio.h&gt; shall not be used in production code."/>
		<rule id="20.10" groups="required" name="The library functions atof, atoi and atol from library &lt;stdlib.h&gt; shall not be used."/>
		<rule id="20.11" groups="required" name="The library functions abort, exit, getenv and system from library &lt;stdlib.h&gt; shall not be used."/>
		<rule id="20.12" groups="required" name="The time handling functions of library &lt;time.h&gt; shall not be used."/>
	</category>
	
</body>
