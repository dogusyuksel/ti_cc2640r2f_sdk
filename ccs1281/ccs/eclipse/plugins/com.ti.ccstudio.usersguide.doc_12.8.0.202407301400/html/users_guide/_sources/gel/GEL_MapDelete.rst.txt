GEL_MapDelete()
---------------

Deletes from the memory map.

**Syntax**

**GEL_MapDelete(**\ address\ **,** page\ **);**

**Parameters**

addressidentifies the memory range already defined in the memory map
that is to be deleted from the memory map. Address can be any valid
address in the memory map range that is to be deleted. This Parameters
can be an absolute address, any C expression, the name of a C function,
or an assembly language label.

pageidentifies the page that the memory range is on: 0 (Program memory),
1 (Data memory) or 2 (I/O space)

For processors that do not have more than one type of memory, use 0 for
this Parameters. For simulated targets, the I/O space Parameters is not
supported.

**Description**

This function deletes a range of memory from the memory map. When
deleted, the Code Composer Studio debugger does not read or write
from/to the target. If you display a memory location that is not
readable, the debugger does not display the value on the target, instead
it displays the default value.

GEL_MapDelete deletes an entire memory map range. Although you specify a
specific memory address as a parameter, in fact it deletes the entire
range in which this memory address is located. For example, if you have
a range of (0x000 – 0x1007), specifying any address in that range within
the GEL_MapDelete causes the whole range to be deleted.

If you wanted to delete a whole range of memory map entries, you could
re-add them with another GEL_MapAdd statement, and then delete the newly
added range. Suppose you had a map that looked like:

0x1000 – 0x1007

0x1009 – 0x100e

0x1010 – 0x1017

0x1020 – 0x102e

You could delete everything between 0x1000 and 0x102f by first adding a
new range between 0x1000 and 0x102f and then call GEL_MapDelete with any
address falling in that range.

GEL_MapAdd(0x1000, page, 0x2f, readable, writable)

/\*causes existing map entries to be combined \*/

GEL \_MapDelete(0x1000, page) /\* deletes this new entry \*/

**Synchronous**

Synchronous from GEL: Yes

Completely synchronous: Yes

**Example**

GEL_MapDelete(0x1000, 0);

**Related Topics**

`GEL_MapAdd <GEL_MapAdd.html>`__

`GEL_MapOn <GEL_MapOn.html>`__

`GEL_MapOff <GEL_MapOff.html>`__

`GEL_MapReset <GEL_MapReset.html>`__
