define({'/Content/SPNU118U_HTML/absolute-lister-description.html':{i:[344,345,346,347,348,349],t:['9 Absolute Lister Description','9.1 Producing an Absolute Listing','9.2 Invoking the Absolute Lister','9.3 Absolute Lister Example','Example 9-1 module1.lst','Example 9-2 module2.lst'],b:['#9_Absolute_Lister_Description','#9.1_Producing_an_Absolute_Listing','#9.2_Invoking_the_Absolute_Lister','#9.3_Absolute_Lister_Example','#Example_9-1_module1.lst','#Example_9-2_module2.lst']},'/Content/SPNU118U_HTML/abstract.html':{i:[0,1,2,3,4,5],t:['Read This First','About This Manual','How to Use This Manual','Notational Conventions','Related Documentation From Texas Instruments','Trademarks'],b:['#Read_This_First','#About_This_Manual','#How_to_Use_This_Manual','#Notational_Conventions','#Related_Documentation_From_Texas_Instruments','#Trademarks']},'/Content/SPNU118U_HTML/archiver-description.html':{i:[154,155,156,157,158,159,160,161,162,163,164],t:['7 Archiver Description','7.1 Archiver Overview','7.2 The Archiver\u0027s Role in the Software Development Flow','7.3 Invoking the Archiver','7.4 Archiver Examples','Example 7-1 Archiver Command File','7.5 Library Information Archiver Description','7.5.1 Invoking the Library Information Archiver','7.5.2 Library Information Archiver Example','7.5.3 Listing the Contents of an Index Library','7.5.4 Requirements'],b:['#7_Archiver_Description','#7.1_Archiver_Overview','#7.2_The_Archiver\u0027s_Role_in_the_Software_Development_Flow','#7.3_Invoking_the_Archiver','#7.4_Archiver_Examples','#Example_7-1_Archiver_Command_File','#7.5_Library_Information_Archiver_Description','#7.5.1_Invoking_the_Library_Information_Archiver','#7.5.2_Library_Information_Archiver_Example','#7.5.3_Listing_the_Contents_of_an_Index_Library','#7.5.4_Requirements']},'/Content/SPNU118U_HTML/assembler-description.html':{i:[55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104],t:['4 Assembler Description','4.1 Assembler Overview','4.2 The Assembler\u0027s Role in the Software Development Flow','4.3 Invoking the Assembler','4.4 Controlling Application Binary Interface','4.5 Naming Alternate Directories for Assembler Input','4.5.1 Using the --include_path Assembler Option','4.5.2 Using the TI_ARM_A_DIR Environment Variable','4.6 Source Statement Format','4.6.1 Label Field','4.6.2 Mnemonic Field','4.6.3 Operand Field ','4.6.3.1 Operand Syntaxes for Instructions','4.6.3.2 Immediate Values as Operands for Directives','4.6.4 Comment Field','4.7 Literal Constants','4.7.1 Integer Literals','4.7.1.1 Binary Integer Literals','4.7.1.2 Octal Integer Literals','4.7.1.3 Decimal Integer Literals','4.7.1.4 Hexadecimal Integer Literals','4.7.1.5 Character Literals','4.7.2 Character String Literals','4.7.3 Floating-Point Literals','4.8 Assembler Symbols','4.8.1 Identifiers','4.8.2 Labels','4.8.3 Local Labels','Example 4-1 Local Labels of the Form $n','4.8.4 Symbolic Constants','4.8.5 Defining Symbolic Constants (--asm_define Option)','Example 4-2 Using Symbolic Constants Defined on Command Line','4.8.6 Predefined Symbolic Constants','4.8.7 Registers','4.8.8 Substitution Symbols','4.9 Expressions','4.9.1 Mathematical and Logical Operators','4.9.2 Relational Operators and Conditional Expressions','4.9.3 Well-Defined Expressions','4.9.4 Relocatable Symbols and Legal Expressions','4.9.5 Expression Examples','4.10 Built-in Functions and Operators','4.10.1 Built-In Math and Trigonometric Functions','4.11 Unified Assembly Language Syntax Support','4.12 Source Listings','4.13 Debugging Assembly Source','Example 4-3 Viewing Assembly Variables as C Types C Program','Example 4-4 Assembly Program for Example 4-3','4.14 Cross-Reference Listings','Example 4-5 An Assembler Cross-Reference Listing'],b:['#4_Assembler_Description','#4.1_Assembler_Overview','#4.2_The_Assembler\u0027s_Role_in_the_Software_Development_Flow','#4.3_Invoking_the_Assembler','#4.4_Controlling_Application_Binary_Interface','#4.5_Naming_Alternate_Directories_for_Assembler_Input','#4.5.1_Using_the_--include_path_Assembler_Option','#4.5.2_Using_the_TI_ARM_A_DIR_Environment_Variable','#4.6_Source_Statement_Format','#4.6.1_Label_Field','#4.6.2_Mnemonic_Field','#4.6.3_Operand_Field','#4.6.3.1_Operand_Syntaxes_for_Instructions','#4.6.3.2_Immediate_Values_as_Operands_for_Directives','#4.6.4_Comment_Field','#4.7_Literal_Constants','#4.7.1_Integer_Literals','#4.7.1.1_Binary_Integer_Literals','#4.7.1.2_Octal_Integer_Literals','#4.7.1.3_Decimal_Integer_Literals','#4.7.1.4_Hexadecimal_Integer_Literals','#4.7.1.5_Character_Literals','#4.7.2_Character_String_Literals','#4.7.3_Floating-Point_Literals','#4.8_Assembler_Symbols','#4.8.1_Identifiers','#4.8.2_Labels','#4.8.3_Local_Labels','#Example_4-1_Local_Labels_of_the_Form_$n','#4.8.4_Symbolic_Constants','#4.8.5_Defining_Symbolic_Constants_(--asm_define_Option)','#Example_4-2_Using_Symbolic_Constants_Defined_on_Command_Line','#4.8.6_Predefined_Symbolic_Constants','#4.8.7_Registers','#4.8.8_Substitution_Symbols','#4.9_Expressions','#4.9.1_Mathematical_and_Logical_Operators','#4.9.2_Relational_Operators_and_Conditional_Expressions','#4.9.3_Well-Defined_Expressions','#4.9.4_Relocatable_Symbols_and_Legal_Expressions','#4.9.5_Expression_Examples','#4.10_Built-in_Functions_and_Operators','#4.10.1_Built-In_Math_and_Trigonometric_Functions','#4.11_Unified_Assembly_Language_Syntax_Support','#4.12_Source_Listings','#4.13_Debugging_Assembly_Source','#Example_4-3_Viewing_Assembly_Variables_as_C_Types_C_Program','#Example_4-4_Assembly_Program_for_Example_4-3','#4.14_Cross-Reference_Listings','#Example_4-5_An_Assembler_Cross-Reference_Listing']},'/Content/SPNU118U_HTML/assembler-directives.html':{i:[105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],t:['5 Assembler Directives','5.1 Directives Summary','5.2 Directives that Define Sections','Example 5-1 Sections Directives','5.3 Directives that Change the Instruction Type','5.4 Directives that Initialize Values','5.5 Directives that Perform Alignment and Reserve Space','5.6 Directives that Format the Output Listings','5.7 Directives that Reference Other Files','5.8 Directives that Enable Conditional Assembly','5.9 Directives that Define Union or Structure Types','5.10 Directives that Define Enumerated Types','5.11 Directives that Define Symbols at Assembly Time','5.12 Miscellaneous Directives','5.13 Directives Reference'],b:['#5_Assembler_Directives','#5.1_Directives_Summary','#5.2_Directives_that_Define_Sections','#Example_5-1_Sections_Directives','#5.3_Directives_that_Change_the_Instruction_Type','#5.4_Directives_that_Initialize_Values','#5.5_Directives_that_Perform_Alignment_and_Reserve_Space','#5.6_Directives_that_Format_the_Output_Listings','#5.7_Directives_that_Reference_Other_Files','#5.8_Directives_that_Enable_Conditional_Assembly','#5.9_Directives_that_Define_Union_or_Structure_Types','#5.10_Directives_that_Define_Enumerated_Types','#5.11_Directives_that_Define_Symbols_at_Assembly_Time','#5.12_Miscellaneous_Directives','#5.13_Directives_Reference']},'/Content/SPNU118U_HTML/cross-reference-lister-description.html':{i:[350,351,352,353,354],t:['10 Cross-Reference Lister Description','10.1 Producing a Cross-Reference Listing','10.2 Invoking the Cross-Reference Lister','10.3 Cross-Reference Listing Example','Example 10-1 Cross-Reference Listing'],b:['#10_Cross-Reference_Lister_Description','#10.1_Producing_a_Cross-Reference_Listing','#10.2_Invoking_the_Cross-Reference_Lister','#10.3_Cross-Reference_Listing_Example','#Example_10-1_Cross-Reference_Listing']},'/Content/SPNU118U_HTML/glossary.html':{i:[474,475],t:['D Glossary','D.1 Terminology'],b:['#D_Glossary','#D.1_Terminology']},'/Content/SPNU118U_HTML/hex-conversion-utility-description.html':{i:[363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408],t:['12 Hex Conversion Utility Description','12.1 The Hex Conversion Utility\u0027s Role in the Software Development Flow','12.2 Invoking the Hex Conversion Utility','12.2.1 Invoking the Hex Conversion Utility From the Command Line','12.2.2 Invoking the Hex Conversion Utility With a Command File','12.3 Understanding Memory Widths','12.3.1 Target Width','12.3.2 Specifying the Memory Width','12.3.3 Partitioning Data Into Output Files','12.4 The ROMS Directive','12.4.1 When to Use the ROMS Directive','12.4.2 An Example of the ROMS Directive','Example 12-1 A ROMS Directive Example','Example 12-2 Map File Output From Example 12-1 Showing Memory Ranges','12.5 The SECTIONS Directive','12.6 The Load Image Format (--load_image Option)','12.6.1 Load Image Section Formation','12.6.2 Load Image Characteristics','12.7 Excluding a Specified Section','12.8 Assigning Output Filenames','12.9 Image Mode and the --fill Option','12.9.1 Generating a Memory Image','12.9.2 Specifying a Fill Value','12.9.3 Steps to Follow in Using Image Mode','12.10 Array Output Format','12.11 Building a Table for an On-Chip Boot Loader','12.11.1 Description of the Boot Table','12.11.2 The Boot Table Format','12.11.3 How to Build the Boot Table','12.11.3.1 Building the Boot Table','12.11.3.2 Leaving Room for the Boot Table','12.11.4 Booting From a Device Peripheral','12.11.5 Setting the Entry Point for the Boot Table','12.11.6 Using the ARM Boot Loader','Example 12-3 Sample Command File for Booting From 8-Bit SPI Boot','Example 12-4 Sample Command File for ARM 16-Bit Parallel Boot GP I/O','12.12 Controlling the ROM Device Address','12.13 Control Hex Conversion Utility Diagnostics','12.14 Description of the Object Formats','12.14.1 ASCII-Hex Object Format (--ascii Option)','12.14.2 Intel MCS-86 Object Format (--intel Option)','12.14.3 Motorola Exorciser Object Format (--motorola Option)','12.14.4 Extended Tektronix Object Format (--tektronix Option)','12.14.5 Texas Instruments SDSMAC (TI-Tagged) Object Format (--ti_tagged Option)','12.14.6 TI-TXT Hex Format (--ti_txt Option)','Example 12-5 TI-TXT Object Format'],b:['#12_Hex_Conversion_Utility_Description','#12.1_The_Hex_Conversion_Utility\u0027s_Role_in_the_Software_Development_Flow','#12.2_Invoking_the_Hex_Conversion_Utility','#12.2.1_Invoking_the_Hex_Conversion_Utility_From_the_Command_Line','#12.2.2_Invoking_the_Hex_Conversion_Utility_With_a_Command_File','#12.3_Understanding_Memory_Widths','#12.3.1_Target_Width','#12.3.2_Specifying_the_Memory_Width','#12.3.3_Partitioning_Data_Into_Output_Files','#12.4_The_ROMS_Directive','#12.4.1_When_to_Use_the_ROMS_Directive','#12.4.2_An_Example_of_the_ROMS_Directive','#Example_12-1_A_ROMS_Directive_Example','#Example_12-2_Map_File_Output_From_Example_12-1_Showing_Memory_Ranges','#12.5_The_SECTIONS_Directive','#12.6_The_Load_Image_Format_(--load_image_Option)','#12.6.1_Load_Image_Section_Formation','#12.6.2_Load_Image_Characteristics','#12.7_Excluding_a_Specified_Section','#12.8_Assigning_Output_Filenames','#12.9_Image_Mode_and_the_--fill_Option','#12.9.1_Generating_a_Memory_Image','#12.9.2_Specifying_a_Fill_Value','#12.9.3_Steps_to_Follow_in_Using_Image_Mode','#12.10_Array_Output_Format','#12.11_Building_a_Table_for_an_On-Chip_Boot_Loader','#12.11.1_Description_of_the_Boot_Table','#12.11.2_The_Boot_Table_Format','#12.11.3_How_to_Build_the_Boot_Table','#12.11.3.1_Building_the_Boot_Table','#12.11.3.2_Leaving_Room_for_the_Boot_Table','#12.11.4_Booting_From_a_Device_Peripheral','#12.11.5_Setting_the_Entry_Point_for_the_Boot_Table','#12.11.6_Using_the_ARM_Boot_Loader','#Example_12-3_Sample_Command_File_for_Booting_From_8-Bit_SPI_Boot','#Example_12-4_Sample_Command_File_for_ARM_16-Bit_Parallel_Boot_GP_I_O','#12.12_Controlling_the_ROM_Device_Address','#12.13_Control_Hex_Conversion_Utility_Diagnostics','#12.14_Description_of_the_Object_Formats','#12.14.1_ASCII-Hex_Object_Format_(--ascii_Option)','#12.14.2_Intel_MCS-86_Object_Format_(--intel_Option)','#12.14.3_Motorola_Exorciser_Object_Format_(--motorola_Option)','#12.14.4_Extended_Tektronix_Object_Format_(--tektronix_Option)','#12.14.5_Texas_Instruments_SDSMAC_(TI-Tagged)_Object_Format_(--ti_tagged_Option)','#12.14.6_TI-TXT_Hex_Format_(--ti_txt_Option)','#Example_12-5_TI-TXT_Object_Format']},'/Content/SPNU118U_HTML/hex-conversion-utility-examples.html':{i:[461,462,463,464,465,466,467,468,469,470,471,472,473],t:['C Hex Conversion Utility Examples','C.1 Scenario 1 -- Building a Hex Conversion Command File for a Single 8-Bit EPROM','Example C-1 Linker Command File and Link Map for Scenario 1','Example C-2 Hex Conversion Command File for Scenario 1','Example C-3 Contents of Hex Map File example1.mxp','C.2 Scenario 2 -- Building a Hex Conversion Command File for 16-BIS Code','Example C-4 Linker Command File for Scenario 2','Example C-5 Hex Conversion Command File for Scenario 2','Example C-6 Contents of Hex Map File example2.mxp','C.3 Scenario 3 -- Building a Hex Conversion Command File for Two 8-Bit EPROMs','Example C-7 Linker Command File for Scenario 3','Example C-8 Hex Conversion Command File for Scenario 3','Example C-9 Contents of Hex Map File example3.mxp'],b:['#C_Hex_Conversion_Utility_Examples','#C.1_Scenario_1_--_Building_a_Hex_Conversion_Command_File_for_a_Single_8-Bit_E...','#Example_C-1_Linker_Command_File_and_Link_Map_for_Scenario_1','#Example_C-2_Hex_Conversion_Command_File_for_Scenario_1','#Example_C-3_Contents_of_Hex_Map_File_example1.mxp','#C.2_Scenario_2_--_Building_a_Hex_Conversion_Command_File_for_16-BIS_Code','#Example_C-4_Linker_Command_File_for_Scenario_2','#Example_C-5_Hex_Conversion_Command_File_for_Scenario_2','#Example_C-6_Contents_of_Hex_Map_File_example2.mxp','#C.3_Scenario_3_--_Building_a_Hex_Conversion_Command_File_for_Two_8-Bit_EPROMs','#Example_C-7_Linker_Command_File_for_Scenario_3','#Example_C-8_Hex_Conversion_Command_File_for_Scenario_3','#Example_C-9_Contents_of_Hex_Map_File_example3.mxp']},'/Content/SPNU118U_HTML/introduction-to-object-modules.html':{i:[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],t:['2 Introduction to Object Modules','2.1 Object File Format Specifications','2.2 Executable Object Files','2.3 Introduction to Sections','2.3.1 Special Section Names','2.4 How the Assembler Handles Sections','2.4.1 Uninitialized Sections','2.4.2 Initialized Sections','2.4.3 User-Named Sections','2.4.4 Current Section','2.4.5 Section Program Counters','2.4.6 Subsections','2.4.7 Using Sections Directives','2.5 How the Linker Handles Sections','2.5.1 Combining Input Sections','2.5.2 Placing Sections','2.6 Symbols','2.6.1 External Symbols','2.6.2 Weak Symbols','2.6.3 The Symbol Table','2.7 Symbolic Relocations','Example 2-1 Code That Generates Relocation Entries','2.8 Loading a Program'],b:['#2_Introduction_to_Object_Modules','#2.1_Object_File_Format_Specifications','#2.2_Executable_Object_Files','#2.3_Introduction_to_Sections','#2.3.1_Special_Section_Names','#2.4_How_the_Assembler_Handles_Sections','#2.4.1_Uninitialized_Sections','#2.4.2_Initialized_Sections','#2.4.3_User-Named_Sections','#2.4.4_Current_Section','#2.4.5_Section_Program_Counters','#2.4.6_Subsections','#2.4.7_Using_Sections_Directives','#2.5_How_the_Linker_Handles_Sections','#2.5.1_Combining_Input_Sections','#2.5.2_Placing_Sections','#2.6_Symbols','#2.6.1_External_Symbols','#2.6.2_Weak_Symbols','#2.6.3_The_Symbol_Table','#2.7_Symbolic_Relocations','#Example_2-1_Code_That_Generates_Relocation_Entries','#2.8_Loading_a_Program']},'/Content/SPNU118U_HTML/introduction-to-the-software-development-tools.html':{i:[6,7,8],t:['1 Introduction to the Software Development Tools','1.1 Software Development Tools Overview','1.2 Tools Descriptions'],b:['#1_Introduction_to_the_Software_Development_Tools','#1.1_Software_Development_Tools_Overview','#1.2_Tools_Descriptions']}});