define({'/Content/SPNU151R_HTML/abstract.html':{i:[0,1,2,3,4,5],t:['Read This First','About This Manual','Notational Conventions','Related Documentation','Related Documentation From Texas Instruments','Trademarks'],b:['#Read_This_First','#About_This_Manual','#Notational_Conventions','#Related_Documentation','#Related_Documentation_From_Texas_Instruments','#Trademarks']},'/Content/SPNU151R_HTML/arm-c-c-language-implementation.html':{i:[142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215],t:['5 ARM C/C++ Language Implementation','5.1 Characteristics of ARM C','5.1.1 Implementation-Defined Behavior','5.2 Characteristics of ARM C++','5.3 Using MISRA C 2004','5.4 Using the ULP Advisor','5.5 Data Types','5.5.1 Size of Enum Types','5.6 Keywords','5.6.1 The const Keyword','5.6.2 The __interrupt Keyword','5.6.3 The volatile Keyword','Example 5-1 Volatile for Local Variables With setjmp','5.7 C++ Exception Handling','5.8 Register Variables and Parameters','5.8.1 Local Register Variables and Parameters','5.8.2 Global Register Variables','5.9 The __asm Statement','5.10 Pragma Directives','5.10.1 The CALLS Pragma','5.10.2 The CHECK_MISRA Pragma','5.10.3 The CHECK_ULP Pragma','5.10.4 The CLINK Pragma','5.10.5 The CODE_SECTION Pragma','Example 5-2 Using the CODE_SECTION Pragma C Source File','Example 5-3 Generated Assembly Code From Example 5-2','5.10.6 The CODE_STATE Pragma','5.10.7 The DATA_ALIGN Pragma','5.10.8 The DATA_SECTION Pragma','Example 5-4 Using the DATA_SECTION Pragma C Source File','Example 5-5 Using the DATA_SECTION Pragma C++ Source File','Example 5-6 Using the DATA_SECTION Pragma Assembly Source File','5.10.9 The Diagnostic Message Pragmas','5.10.10 The DUAL_STATE Pragma','5.10.11 The FUNC_ALWAYS_INLINE Pragma','5.10.12 The FUNC_CANNOT_INLINE Pragma','5.10.13 The FUNC_EXT_CALLED Pragma','5.10.14 The FUNCTION_OPTIONS Pragma','5.10.15 The INTERRUPT Pragma','5.10.16 The LOCATION Pragma','5.10.17 The MUST_ITERATE Pragma','5.10.17.1 The MUST_ITERATE Pragma Syntax','5.10.17.2 Using MUST_ITERATE to Expand Compiler Knowledge of Loops','5.10.18 The NOINIT and PERSISTENT Pragmas','5.10.19 The NO_HOOKS Pragma','5.10.20 The pack Pragma','5.10.21 The RESET_MISRA Pragma','5.10.22 The RESET_ULP Pragma','5.10.23 The RETAIN Pragma','5.10.24 The SET_CODE_SECTION and SET_DATA_SECTION Pragmas','Example 5-7 Setting Section With SET_DATA_SECTION Pragma','Example 5-8 Setting a Section With SET_CODE_SECTION Pragma','Example 5-9 Overriding SET_DATA_SECTION Setting','5.10.25 The SWI_ALIAS Pragma','Example 5-10 Using the SWI_ALIAS Pragma C Source File','Example 5-11 Generated Assembly File','5.10.26 The TASK Pragma','5.10.27 The UNROLL Pragma','5.10.28 The WEAK Pragma','5.11 The _Pragma Operator','5.12 Application Binary Interface','5.13 ARM Instruction Intrinsics','5.14 Object File Symbol Naming Conventions (Linknames)','5.15 Changing the ANSI/ISO C/C++ Language Mode','5.15.1 C99 Support (--c99)','5.15.2 Strict ANSI Mode and Relaxed ANSI Mode (--strict_ansi and --relaxed_ansi)','5.16 GNU, Clang, and ACLE Language Extensions','5.16.1 Extensions','5.16.2 Function Attributes','5.16.3 Variable Attributes','5.16.4 Type Attributes','5.16.5 Built-In Functions','5.17 AUTOSAR','5.18 Compiler Limits'],b:['#5_ARM_C_C++_Language_Implementation','#5.1_Characteristics_of_ARM_C','#5.1.1_Implementation-Defined_Behavior','#5.2_Characteristics_of_ARM_C++','#5.3_Using_MISRA_C_2004','#5.4_Using_the_ULP_Advisor','#5.5_Data_Types','#5.5.1_Size_of_Enum_Types','#5.6_Keywords','#5.6.1_The_const_Keyword','#5.6.2_The___interrupt_Keyword','#5.6.3_The_volatile_Keyword','#Example_5-1_Volatile_for_Local_Variables_With_setjmp','#5.7_C++_Exception_Handling','#5.8_Register_Variables_and_Parameters','#5.8.1_Local_Register_Variables_and_Parameters','#5.8.2_Global_Register_Variables','#5.9_The___asm_Statement','#5.10_Pragma_Directives','#5.10.1_The_CALLS_Pragma','#5.10.2_The_CHECK_MISRA_Pragma','#5.10.3_The_CHECK_ULP_Pragma','#5.10.4_The_CLINK_Pragma','#5.10.5_The_CODE_SECTION_Pragma','#Example_5-2_Using_the_CODE_SECTION_Pragma_C_Source_File','#Example_5-3_Generated_Assembly_Code_From_Example_5-2','#5.10.6_The_CODE_STATE_Pragma','#5.10.7_The_DATA_ALIGN_Pragma','#5.10.8_The_DATA_SECTION_Pragma','#Example_5-4_Using_the_DATA_SECTION_Pragma_C_Source_File','#Example_5-5_Using_the_DATA_SECTION_Pragma_C++_Source_File','#Example_5-6_Using_the_DATA_SECTION_Pragma_Assembly_Source_File','#5.10.9_The_Diagnostic_Message_Pragmas','#5.10.10_The_DUAL_STATE_Pragma','#5.10.11_The_FUNC_ALWAYS_INLINE_Pragma','#5.10.12_The_FUNC_CANNOT_INLINE_Pragma','#5.10.13_The_FUNC_EXT_CALLED_Pragma','#5.10.14_The_FUNCTION_OPTIONS_Pragma','#5.10.15_The_INTERRUPT_Pragma','#5.10.16_The_LOCATION_Pragma','#5.10.17_The_MUST_ITERATE_Pragma','#5.10.17.1_The_MUST_ITERATE_Pragma_Syntax','#5.10.17.2_Using_MUST_ITERATE_to_Expand_Compiler_Knowledge_of_Loops','#5.10.18_The_NOINIT_and_PERSISTENT_Pragmas','#5.10.19_The_NO_HOOKS_Pragma','#5.10.20_The_pack_Pragma','#5.10.21_The_RESET_MISRA_Pragma','#5.10.22_The_RESET_ULP_Pragma','#5.10.23_The_RETAIN_Pragma','#5.10.24_The_SET_CODE_SECTION_and_SET_DATA_SECTION_Pragmas','#Example_5-7_Setting_Section_With_SET_DATA_SECTION_Pragma','#Example_5-8_Setting_a_Section_With_SET_CODE_SECTION_Pragma','#Example_5-9_Overriding_SET_DATA_SECTION_Setting','#5.10.25_The_SWI_ALIAS_Pragma','#Example_5-10_Using_the_SWI_ALIAS_Pragma_C_Source_File','#Example_5-11_Generated_Assembly_File','#5.10.26_The_TASK_Pragma','#5.10.27_The_UNROLL_Pragma','#5.10.28_The_WEAK_Pragma','#5.11_The__Pragma_Operator','#5.12_Application_Binary_Interface','#5.13_ARM_Instruction_Intrinsics','#5.14_Object_File_Symbol_Naming_Conventions_(Linknames)','#5.15_Changing_the_ANSI_ISO_C_C++_Language_Mode','#5.15.1_C99_Support_(--c99)','#5.15.2_Strict_ANSI_Mode_and_Relaxed_ANSI_Mode_(--strict_ansi_and_--relaxed_ansi)','#5.16_GNU,_Clang,_and_ACLE_Language_Extensions','#5.16.1_Extensions','#5.16.2_Function_Attributes','#5.16.3_Variable_Attributes','#5.16.4_Type_Attributes','#5.16.5_Built-In_Functions','#5.17_AUTOSAR','#5.18_Compiler_Limits']},'/Content/SPNU151R_HTML/c-name-demangler.html':{i:[323,324,325,326,327,328,329],t:['8 C++ Name Demangler','8.1 Invoking the C++ Name Demangler','8.2 C++ Name Demangler Options','8.3 Sample Usage of the C++ Name Demangler','Example 8-1 C++ Code for calories_in_a_banana','Example 8-2 Resulting Assembly for calories_in_a_banana','Example 8-3 Result After Running the C++ Name Demangler'],b:['#8_C++_Name_Demangler','#8.1_Invoking_the_C++_Name_Demangler','#8.2_C++_Name_Demangler_Options','#8.3_Sample_Usage_of_the_C++_Name_Demangler','#Example_8-1_C++_Code_for_calories_in_a_banana','#Example_8-2_Resulting_Assembly_for_calories_in_a_banana','#Example_8-3_Result_After_Running_the_C++_Name_Demangler']},'/Content/SPNU151R_HTML/glossary.html':{i:[330,331],t:['A Glossary','A.1 Terminology'],b:['#A_Glossary','#A.1_Terminology']},'/Content/SPNU151R_HTML/introduction-to-the-software-development-tools.html':{i:[6,7,8,9,10,11],t:['1 Introduction to the Software Development Tools','1.1 Software Development Tools Overview','1.2 Compiler Interface','1.3 ANSI/ISO Standard','1.4 Output Files','1.5 Utilities'],b:['#1_Introduction_to_the_Software_Development_Tools','#1.1_Software_Development_Tools_Overview','#1.2_Compiler_Interface','#1.3_ANSI_ISO_Standard','#1.4_Output_Files','#1.5_Utilities']},'/Content/SPNU151R_HTML/linking-c-c-code.html':{i:[121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141],t:['4 Linking C/C++ Code','4.1 Invoking the Linker Through the Compiler (-z Option)','4.1.1 Invoking the Linker Separately','4.1.2 Invoking the Linker as Part of the Compile Step','4.1.3 Disabling the Linker (--compile_only Compiler Option)','4.2 Linker Code Optimizations','4.2.1 Generate List of Dead Functions (--generate_dead_funcs_list Option)','4.2.2 Generating Aggregate Data Subsections (--gen_data_subsections Compiler Option)','4.3 Controlling the Linking Process','4.3.1 Including the Run-Time-Support Library','4.3.1.1 Automatic Run-Time-Support Library Selection','Example 4-1 Using the --issue_remarks Option','4.3.1.2 Manual Run-Time-Support Library Selection','4.3.1.3 Library Order for Searching for Symbols','4.3.2 Run-Time Initialization','4.3.3 Initialization of Cinit and Watchdog Timer Hold','4.3.4 Global Object Constructors','4.3.5 Specifying the Type of Global Variable Initialization','4.3.6 Specifying Where to Allocate Sections in Memory','4.3.7 A Sample Linker Command File','Example 4-2 Linker Command File'],b:['#4_Linking_C_C++_Code','#4.1_Invoking_the_Linker_Through_the_Compiler_(-z_Option)','#4.1.1_Invoking_the_Linker_Separately','#4.1.2_Invoking_the_Linker_as_Part_of_the_Compile_Step','#4.1.3_Disabling_the_Linker_(--compile_only_Compiler_Option)','#4.2_Linker_Code_Optimizations','#4.2.1_Generate_List_of_Dead_Functions_(--generate_dead_funcs_list_Option)','#4.2.2_Generating_Aggregate_Data_Subsections_(--gen_data_subsections_Compiler_...','#4.3_Controlling_the_Linking_Process','#4.3.1_Including_the_Run-Time-Support_Library','#4.3.1.1_Automatic_Run-Time-Support_Library_Selection','#Example_4-1_Using_the_--issue_remarks_Option','#4.3.1.2_Manual_Run-Time-Support_Library_Selection','#4.3.1.3_Library_Order_for_Searching_for_Symbols','#4.3.2_Run-Time_Initialization','#4.3.3_Initialization_of_Cinit_and_Watchdog_Timer_Hold','#4.3.4_Global_Object_Constructors','#4.3.5_Specifying_the_Type_of_Global_Variable_Initialization','#4.3.6_Specifying_Where_to_Allocate_Sections_in_Memory','#4.3.7_A_Sample_Linker_Command_File','#Example_4-2_Linker_Command_File']},'/Content/SPNU151R_HTML/optimizing-your-code.html':{i:[60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120],t:['3 Optimizing Your Code','3.1 Invoking Optimization','3.2 Performing File-Level Optimization (--opt_level=3 option)','3.2.1 Creating an Optimization Information File (--gen_opt_info Option)','3.3 Program-Level Optimization (--program_level_compile and --opt_level=3 options)','3.3.1 Controlling Program-Level Optimization (--call_assumptions Option)','3.3.2 Optimization Considerations When Mixing C/C++ and Assembly','3.4 Link-Time Optimization (--opt_level=4 Option)','3.4.1 Option Handling','3.4.2 Incompatible Types','3.5 Using Feedback Directed Optimization','3.5.1 Feedback Directed Optimization','3.5.1.1 Phase 1 -- Collect Program Profile Information','3.5.1.2 Phase 2 -- Use Application Profile Information for Optimization','3.5.1.3 Generating and Using Profile Information','3.5.1.4 Example Use of Feedback Directed Optimization','3.5.1.5 The .ppdata Section','3.5.1.6 Feedback Directed Optimization and Code Size Tune','3.5.1.7 Instrumented Program Execution Overhead','3.5.1.8 Invalid Profile Data','3.5.2 Profile Data Decoder','3.5.3 Feedback Directed Optimization API','3.5.4 Feedback Directed Optimization Summary','3.6 Using Profile Information to Analyze Code Coverage','3.6.1 Code Coverage','3.6.1.1 Phase1 -- Collect Program Profile Information','3.6.1.2 Phase 2 -- Generate Code Coverage Reports','3.6.2 Related Features and Capabilities','3.6.2.1 Path Profiler','3.6.2.2 Analysis Options','3.6.2.3 Environment Variables','3.7 Accessing Aliased Variables in Optimized Code','3.8 Use Caution With asm Statements in Optimized Code','3.9 Automatic Inline Expansion (--auto_inline Option)','3.10 Using the Interlist Feature With Optimization','Example 3-1 The Function From Example 2-1 Compiled With the -O2 and --optimizer_interlist Options','Example 3-2 The Function From Example 2-1 Compiled with the --opt_level=2, --optimizer_interlist, and --c_src_interlist Options','3.11 Debugging and Profiling Optimized Code','3.11.1 Profiling Optimized Code','3.12 Controlling Code Size Versus Speed ','3.13 What Kind of Optimization Is Being Performed?','3.13.1 Cost-Based Register Allocation','3.13.2 Alias Disambiguation','3.13.3 Branch Optimizations and Control-Flow Simplification','3.13.4 Data Flow Optimizations','3.13.5 Expression Simplification','3.13.6 Inline Expansion of Functions','3.13.7 Function Symbol Aliasing','3.13.8 Induction Variables and Strength Reduction','3.13.9 Loop-Invariant Code Motion','3.13.10 Loop Rotation','3.13.11 Instruction Scheduling','3.13.12 Tail Merging','3.13.13 Autoincrement Addressing','3.13.14 Block Conditionalizing','Example 3-3 Block Conditionalizing C Source','Example 3-4 C/C++ Compiler Output for Example 3-3','3.13.15 Epilog Inlining','3.13.16 Removing Comparisons to Zero','3.13.17 Integer Division With Constant Divisor','3.13.18 Branch Chaining'],b:['#3_Optimizing_Your_Code','#3.1_Invoking_Optimization','#3.2_Performing_File-Level_Optimization_(--opt_level=3_option)','#3.2.1_Creating_an_Optimization_Information_File_(--gen_opt_info_Option)','#3.3_Program-Level_Optimization_(--program_level_compile_and_--opt_level=3_opt...','#3.3.1_Controlling_Program-Level_Optimization_(--call_assumptions_Option)','#3.3.2_Optimization_Considerations_When_Mixing_C_C++_and_Assembly','#3.4_Link-Time_Optimization_(--opt_level=4_Option)','#3.4.1_Option_Handling','#3.4.2_Incompatible_Types','#3.5_Using_Feedback_Directed_Optimization','#3.5.1_Feedback_Directed_Optimization','#3.5.1.1_Phase_1_--_Collect_Program_Profile_Information','#3.5.1.2_Phase_2_--_Use_Application_Profile_Information_for_Optimization','#3.5.1.3_Generating_and_Using_Profile_Information','#3.5.1.4_Example_Use_of_Feedback_Directed_Optimization','#3.5.1.5_The_.ppdata_Section','#3.5.1.6_Feedback_Directed_Optimization_and_Code_Size_Tune','#3.5.1.7_Instrumented_Program_Execution_Overhead','#3.5.1.8_Invalid_Profile_Data','#3.5.2_Profile_Data_Decoder','#3.5.3_Feedback_Directed_Optimization_API','#3.5.4_Feedback_Directed_Optimization_Summary','#3.6_Using_Profile_Information_to_Analyze_Code_Coverage','#3.6.1_Code_Coverage','#3.6.1.1_Phase1_--_Collect_Program_Profile_Information','#3.6.1.2_Phase_2_--_Generate_Code_Coverage_Reports','#3.6.2_Related_Features_and_Capabilities','#3.6.2.1_Path_Profiler','#3.6.2.2_Analysis_Options','#3.6.2.3_Environment_Variables','#3.7_Accessing_Aliased_Variables_in_Optimized_Code','#3.8_Use_Caution_With_asm_Statements_in_Optimized_Code','#3.9_Automatic_Inline_Expansion_(--auto_inline_Option)','#3.10_Using_the_Interlist_Feature_With_Optimization','#Example_3-1_The_Function_From_Example_2-1_Compiled_With_the_-O2_and_--optimiz...','#Example_3-2_The_Function_From_Example_2-1_Compiled_with_the_--opt_level=2,_--...','#3.11_Debugging_and_Profiling_Optimized_Code','#3.11.1_Profiling_Optimized_Code','#3.12_Controlling_Code_Size_Versus_Speed','#3.13_What_Kind_of_Optimization_Is_Being_Performed_','#3.13.1_Cost-Based_Register_Allocation','#3.13.2_Alias_Disambiguation','#3.13.3_Branch_Optimizations_and_Control-Flow_Simplification','#3.13.4_Data_Flow_Optimizations','#3.13.5_Expression_Simplification','#3.13.6_Inline_Expansion_of_Functions','#3.13.7_Function_Symbol_Aliasing','#3.13.8_Induction_Variables_and_Strength_Reduction','#3.13.9_Loop-Invariant_Code_Motion','#3.13.10_Loop_Rotation','#3.13.11_Instruction_Scheduling','#3.13.12_Tail_Merging','#3.13.13_Autoincrement_Addressing','#3.13.14_Block_Conditionalizing','#Example_3-3_Block_Conditionalizing_C_Source','#Example_3-4_C_C++_Compiler_Output_for_Example_3-3','#3.13.15_Epilog_Inlining','#3.13.16_Removing_Comparisons_to_Zero','#3.13.17_Integer_Division_With_Constant_Divisor','#3.13.18_Branch_Chaining']},'/Content/SPNU151R_HTML/revision-history.html':{i:[332,333],t:['B Revision History','B.1 Recent Revisions'],b:['#B_Revision_History','#B.1_Recent_Revisions']},'/Content/SPNU151R_HTML/run-time-environment.html':{i:[216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291],t:['6 Run-Time Environment','6.1 Memory Model','6.1.1 Sections','6.1.2 C/C++ System Stack','6.1.3 Dynamic Memory Allocation','6.2 Object Representation','6.2.1 Data Type Storage','6.2.1.1 char and short Data Types (signed and unsigned)','6.2.1.2 float, int, and long Data Types (signed and unsigned)','6.2.1.3  double, long double, and long long Data Types (signed and unsigned)','6.2.1.4 Pointer to Data Member Types','6.2.1.5 Pointer to Member Function Types','6.2.1.6 Structure and Array Alignment','6.2.2 Bit Fields','6.2.3 Character String Constants','6.3 Register Conventions','6.4 Function Structure and Calling Conventions','6.4.1 How a Function Makes a Call','6.4.2 How a Called Function Responds','6.4.3 C Exception Handler Calling Convention','6.4.4 Accessing Arguments and Local Variables','6.5 Accessing Linker Symbols in C and C++','6.6 Interfacing C and C++ With Assembly Language','6.6.1 Using Assembly Language Modules With C/C++ Code','6.6.2 Accessing Assembly Language Functions From C/C++','Example 6-1 Calling an Assembly Language Function From a C/C++ Program','Example 6-2 Assembly Language Program Called by Example 6-1','6.6.3 Accessing Assembly Language Variables From C/C++','6.6.3.1 Accessing Assembly Language Global Variables','Example 6-3 Assembly Language Variable Program','Example 6-4 C Program to Access Assembly Language From Example 6-3','6.6.3.2 Accessing Assembly Language Constants','Example 6-5 Accessing an Assembly Language Constant From C','Example 6-6 Assembly Language Program for Example 6-5','6.6.4 Sharing C/C++ Header Files With Assembly Source','6.6.5 Using Inline Assembly Language','6.6.6 Modifying Compiler Output','6.7 Interrupt Handling','6.7.1 Saving Registers During Interrupts','6.7.2 Using C/C++ Interrupt Routines','6.7.3 Using Assembly Language Interrupt Routines','6.7.4 How to Map Interrupt Routines to Interrupt Vectors','Example 6-7 Sample intvecs.asm File','6.7.5 Using Software Interrupts','6.7.6 Other Interrupt Information','6.8 Intrinsic Run-Time-Support Arithmetic and Conversion Routines','6.8.1 CPSR Register and Interrupt Intrinsics','6.9 Built-In Functions','6.10 System Initialization','6.10.1 Boot Hook Functions for System Pre-Initialization','6.10.2 Run-Time Stack','6.10.3 Automatic Initialization of Variables','6.10.3.1 Zero Initializing Variables ','6.10.3.2 Direct Initialization','6.10.3.3 Autoinitialization of Variables at Run Time','6.10.3.4 Autoinitialization Tables','6.10.3.4.1 Length Followed by Data Format','6.10.3.4.2 Zero Initialization Format','6.10.3.4.3 Run Length Encoded (RLE) Format','6.10.3.4.4 Lempel-Ziv-Storer-Szymanski Compression (LZSS) Format','6.10.3.4.5 Sample C Code to Process the C Autoinitialization Table','Example 6-8 Processing the C Autoinitialization Table','6.10.3.5 Initialization of Variables at Load Time','6.10.3.6 Global Constructors','6.10.4 Initialization Tables','Example 6-9 Initialized Variables Defined in C','Example 6-10 Initialized Information for Variables Defined in Example 6-9','6.11 Dual-State Interworking Under TIABI (Deprecated)','6.11.1 Level of Dual-State Support','6.11.2 Implementation','6.11.2.1 Naming Conventions for Entry Points','6.11.2.2 Indirect Calls','Example 6-11 C Code Compiled for 16-BIS State: sum( )','Example 6-12 16-Bit Assembly Program for Example 6-11','Example 6-13 C Code Compiled for 32-BIS State: sum( )','Example 6-14 32-Bit Assembly Program for Example 6-13'],b:['#6_Run-Time_Environment','#6.1_Memory_Model','#6.1.1_Sections','#6.1.2_C_C++_System_Stack','#6.1.3_Dynamic_Memory_Allocation','#6.2_Object_Representation','#6.2.1_Data_Type_Storage','#6.2.1.1_char_and_short_Data_Types_(signed_and_unsigned)','#6.2.1.2_float,_int,_and_long_Data_Types_(signed_and_unsigned)','#6.2.1.3__double,_long_double,_and_long_long_Data_Types_(signed_and_unsigned)','#6.2.1.4_Pointer_to_Data_Member_Types','#6.2.1.5_Pointer_to_Member_Function_Types','#6.2.1.6_Structure_and_Array_Alignment','#6.2.2_Bit_Fields','#6.2.3_Character_String_Constants','#6.3_Register_Conventions','#6.4_Function_Structure_and_Calling_Conventions','#6.4.1_How_a_Function_Makes_a_Call','#6.4.2_How_a_Called_Function_Responds','#6.4.3_C_Exception_Handler_Calling_Convention','#6.4.4_Accessing_Arguments_and_Local_Variables','#6.5_Accessing_Linker_Symbols_in_C_and_C++','#6.6_Interfacing_C_and_C++_With_Assembly_Language','#6.6.1_Using_Assembly_Language_Modules_With_C_C++_Code','#6.6.2_Accessing_Assembly_Language_Functions_From_C_C++','#Example_6-1_Calling_an_Assembly_Language_Function_From_a_C_C++_Program','#Example_6-2_Assembly_Language_Program_Called_by_Example_6-1','#6.6.3_Accessing_Assembly_Language_Variables_From_C_C++','#6.6.3.1_Accessing_Assembly_Language_Global_Variables','#Example_6-3_Assembly_Language_Variable_Program','#Example_6-4_C_Program_to_Access_Assembly_Language_From_Example_6-3','#6.6.3.2_Accessing_Assembly_Language_Constants','#Example_6-5_Accessing_an_Assembly_Language_Constant_From_C','#Example_6-6_Assembly_Language_Program_for_Example_6-5','#6.6.4_Sharing_C_C++_Header_Files_With_Assembly_Source','#6.6.5_Using_Inline_Assembly_Language','#6.6.6_Modifying_Compiler_Output','#6.7_Interrupt_Handling','#6.7.1_Saving_Registers_During_Interrupts','#6.7.2_Using_C_C++_Interrupt_Routines','#6.7.3_Using_Assembly_Language_Interrupt_Routines','#6.7.4_How_to_Map_Interrupt_Routines_to_Interrupt_Vectors','#Example_6-7_Sample_intvecs.asm_File','#6.7.5_Using_Software_Interrupts','#6.7.6_Other_Interrupt_Information','#6.8_Intrinsic_Run-Time-Support_Arithmetic_and_Conversion_Routines','#6.8.1_CPSR_Register_and_Interrupt_Intrinsics','#6.9_Built-In_Functions','#6.10_System_Initialization','#6.10.1_Boot_Hook_Functions_for_System_Pre-Initialization','#6.10.2_Run-Time_Stack','#6.10.3_Automatic_Initialization_of_Variables','#6.10.3.1_Zero_Initializing_Variables','#6.10.3.2_Direct_Initialization','#6.10.3.3_Autoinitialization_of_Variables_at_Run_Time','#6.10.3.4_Autoinitialization_Tables','#6.10.3.4.1_Length_Followed_by_Data_Format','#6.10.3.4.2_Zero_Initialization_Format','#6.10.3.4.3_Run_Length_Encoded_(RLE)_Format','#6.10.3.4.4_Lempel-Ziv-Storer-Szymanski_Compression_(LZSS)_Format','#6.10.3.4.5_Sample_C_Code_to_Process_the_C_Autoinitialization_Table','#Example_6-8_Processing_the_C_Autoinitialization_Table','#6.10.3.5_Initialization_of_Variables_at_Load_Time','#6.10.3.6_Global_Constructors','#6.10.4_Initialization_Tables','#Example_6-9_Initialized_Variables_Defined_in_C','#Example_6-10_Initialized_Information_for_Variables_Defined_in_Example_6-9','#6.11_Dual-State_Interworking_Under_TIABI_(Deprecated)','#6.11.1_Level_of_Dual-State_Support','#6.11.2_Implementation','#6.11.2.1_Naming_Conventions_for_Entry_Points','#6.11.2.2_Indirect_Calls','#Example_6-11_C_Code_Compiled_for_16-BIS_State:_sum(_)','#Example_6-12_16-Bit_Assembly_Program_for_Example_6-11','#Example_6-13_C_Code_Compiled_for_32-BIS_State:_sum(_)','#Example_6-14_32-Bit_Assembly_Program_for_Example_6-13']},'/Content/SPNU151R_HTML/using-run-time-support-functions-and-building-libraries.html':{i:[292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322],t:['7 Using Run-Time-Support Functions and Building Libraries','7.1 C and C++ Run-Time Support Libraries','7.1.1 Linking Code With the Object Library','7.1.2 Header Files','7.1.3 Modifying a Library Function','7.1.4 Support for String Handling','7.1.5 Minimal Support for Internationalization','7.1.6 Allowable Number of Open Files','7.1.7 Nonstandard Header Files in the Source Tree','7.1.8 Library Naming Conventions','7.2 The C I/O Functions','7.2.1 High-Level I/O Functions','7.2.2 Overview of Low-Level I/O Implementation','7.2.3 Device-Driver Level I/O Functions','7.2.4 Adding a User-Defined Device Driver for C I/O','Example 7-1 Mapping Default Streams to Device','7.2.5 The device Prefix','Example 7-2 Program for C I/O Device','7.3 Handling Reentrancy (_register_lock() and _register_unlock() Functions)','7.4 Library-Build Process','7.4.1 Required Non-Texas Instruments Software','7.4.2 Using the Library-Build Process','7.4.2.1 Automatic Standard Library Rebuilding by the Linker','7.4.2.2 Invoking mklib Manually','7.4.2.2.1 Building Standard Libraries ','7.4.2.2.2 Shared or Read-Only Library Directory','7.4.2.2.3 Building Libraries With Custom Options ','7.4.2.2.4 The mklib Program Option Summary ','7.4.3 Extending mklib','7.4.3.1 Underlying Mechanism','7.4.3.2 Libraries From Other Vendors'],b:['#7_Using_Run-Time-Support_Functions_and_Building_Libraries','#7.1_C_and_C++_Run-Time_Support_Libraries','#7.1.1_Linking_Code_With_the_Object_Library','#7.1.2_Header_Files','#7.1.3_Modifying_a_Library_Function','#7.1.4_Support_for_String_Handling','#7.1.5_Minimal_Support_for_Internationalization','#7.1.6_Allowable_Number_of_Open_Files','#7.1.7_Nonstandard_Header_Files_in_the_Source_Tree','#7.1.8_Library_Naming_Conventions','#7.2_The_C_I_O_Functions','#7.2.1_High-Level_I_O_Functions','#7.2.2_Overview_of_Low-Level_I_O_Implementation','#7.2.3_Device-Driver_Level_I_O_Functions','#7.2.4_Adding_a_User-Defined_Device_Driver_for_C_I_O','#Example_7-1_Mapping_Default_Streams_to_Device','#7.2.5_The_device_Prefix','#Example_7-2_Program_for_C_I_O_Device','#7.3_Handling_Reentrancy_(_register_lock()_and__register_unlock()_Functions)','#7.4_Library-Build_Process','#7.4.1_Required_Non-Texas_Instruments_Software','#7.4.2_Using_the_Library-Build_Process','#7.4.2.1_Automatic_Standard_Library_Rebuilding_by_the_Linker','#7.4.2.2_Invoking_mklib_Manually','#7.4.2.2.1_Building_Standard_Libraries','#7.4.2.2.2_Shared_or_Read-Only_Library_Directory','#7.4.2.2.3_Building_Libraries_With_Custom_Options','#7.4.2.2.4_The_mklib_Program_Option_Summary','#7.4.3_Extending_mklib','#7.4.3.1_Underlying_Mechanism','#7.4.3.2_Libraries_From_Other_Vendors']}});