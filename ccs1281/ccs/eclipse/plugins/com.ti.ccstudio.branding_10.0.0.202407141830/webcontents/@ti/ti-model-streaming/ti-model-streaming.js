import { StreamingDataModel } from '../ti-model-streaming/lib/StreamingDataModel'; //^ti-model-streaming\ti-model-streaming.tsx,31^
/**
 * `ti-model-streaming` is a non visual component for a generic data binding model where
 * data is streammed up from the target.  The all data recieved is in the form of an
 * object structure.  The total bindable data is the accumulated across all object
 * received, meaning not all data has to be streammed at the same rate.  Any data in
 * an object received replaces the corresponding data in the accumulated data, or if
 * new, adds to the accumulated object.  You can think of the accumulated data as a
 * database with nested structures (or namespaces).
 *
 *  Example:
 *
 *     <ti-model-streaming id="streaming"></ti-model-streaming>
 *
 * @customElement ti-model-streaming
 * @polymer
 * @label Streaming Model
 * @group Transports, Models, and Codecs
 * @archetype <ti-model-streaming></ti-model-streaming>
 */
export class TiModelStreaming {
    constructor() {
        this.impl = undefined; //^ti-model-streaming\ti-model-streaming.tsx,59^
        /**
         * The name of a specific channel for streaming data to and from.  This is optional and the
         * default is to stream all data.  When specified, the data must contain a member with the
         * same name as the channelName to hold channel specific data.
         *
         * @type {string}
         * @order 70
         */
        this.channelName = undefined; //^ti-model-streaming\ti-model-streaming.tsx,69^
        // #region ti-target-configuration/ti-codec-base-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * A flag indicating that this model, transport, or codec is not necessary for connecting
         * to the target, and any failure should not prevent connection.
         *
         * @type {boolean}
         * @order 77
         */
        this.optional = false; //^ti-model-streaming\ti-model-streaming.tsx,80^
        /**
         * The optional identifier of a target device that is associated with this model, transport or codec.
         * Specifying a target device idicates that this is necessary and/or optional for this connecting
         * to the specified device.  The absence of a target device indicates this is necessary and/or optional
         * for any device.
         *
         * @type {string}
         * @order 80
         */
        this.deviceId = undefined; //^ti-model-streaming\ti-model-streaming.tsx,91^
    }
    // #endregion
    connectedCallback() {
        this.impl = new StreamingDataModel(this.el); //^ti-model-streaming\ti-model-streaming.tsx,97^
    }
    ; //^ti-model-streaming\ti-model-streaming.tsx,98^
    static get is() { return "ti-model-streaming"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "channelName": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{string}",
                        "name": "type"
                    }, {
                        "text": "70",
                        "name": "order"
                    }],
                "text": "The name of a specific channel for streaming data to and from.  This is optional and the\ndefault is to stream all data.  When specified, the data must contain a member with the\nsame name as the channelName to hold channel specific data."
            },
            "attribute": "channel-name",
            "reflect": false,
            "defaultValue": "undefined"
        },
        "optional": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{boolean}",
                        "name": "type"
                    }, {
                        "text": "77",
                        "name": "order"
                    }],
                "text": "A flag indicating that this model, transport, or codec is not necessary for connecting\nto the target, and any failure should not prevent connection."
            },
            "attribute": "optional",
            "reflect": false,
            "defaultValue": "false"
        },
        "deviceId": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [{
                        "text": "{string}",
                        "name": "type"
                    }, {
                        "text": "80",
                        "name": "order"
                    }],
                "text": "The optional identifier of a target device that is associated with this model, transport or codec.\nSpecifying a target device idicates that this is necessary and/or optional for this connecting\nto the specified device.  The absence of a target device indicates this is necessary and/or optional\nfor any device."
            },
            "attribute": "device-id",
            "reflect": false,
            "defaultValue": "undefined"
        }
    }; }
    static get elementRef() { return "el"; }
}
; //^ti-model-streaming\ti-model-streaming.tsx,99^
