/**
 *  Copyright (c) 2019-2020, Texas Instruments Incorporated
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  *   Redistributions of source code must retain the above copyright
 *  notice, this list of conditions and the following disclaimer.
 *  notice, this list of conditions and the following disclaimer in the
 *  documentation and/or other materials provided with the distribution.
 *  *   Neither the name of Texas Instruments Incorporated nor the names of
 *  its contributors may be used to endorse or promote products derived
 *  from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 *  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 *  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 *  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
import { h } from "@stencil/core"; //^ti-widget-button\ti-widget-button.tsx,29^
import { TiWidgetBase } from '../ti-widget-base/ti-widget-base'; //^ti-widget-button\ti-widget-button.tsx,30^
import { TiUtils } from '../ti-core-assets/lib/TiUtils'; //^ti-widget-button\ti-widget-button.tsx,32^
/**
 * `ti-widget-button` is a button with bindable properties.
 *
 * @demo ./demo/index.html
 * @label Button
 * @group Common
 * @archetype <ti-widget-button label="Button"></ti-widget-button>
 */
export class TiWidgetButton {
    constructor() {
        this.base = new ( // keep on separate line to enable sourcemapping   //^ti-widget-button\ti-widget-button.tsx,50^
        class extends TiWidgetBase {
            get element() {
                return this.parent.el; //^ti-widget-button\ti-widget-button.tsx,53^
            } //^ti-widget-button\ti-widget-button.tsx,54^
        } //^ti-widget-button\ti-widget-button.tsx,55^
        )(this); //^ti-widget-button\ti-widget-button.tsx,56^
        /**
         * Button type, can be `primary`, `secondary`, or `text`. Type is `primary` by default.
         * @order 2
         */
        this.buttonType = 'primary'; //^ti-widget-button\ti-widget-button.tsx,62^
        /**
         * The text displayed as the button caption.
         * @order 3
         */
        this.label = 'Button'; //^ti-widget-button\ti-widget-button.tsx,68^
        /**
         * incremented each time the button is clicked.  This can be used to
         * e.g. bind to a target variable that causes an action to be performed when it changes.
         * The target should change the value of the bound variable back to 0 when the action is complete,
         * and trigger the action when bindableTrigger changes it to > 0.
         * @isHidden
         */
        this.bindableTrigger = 0; //^ti-widget-button\ti-widget-button.tsx,83^
        /**
         * Controls the tooltip that is displayed for this widget.
         * @order 210
         */
        this.tooltip = ''; //^ti-widget-button\ti-widget-button.tsx,137^
        // #endregion
        // #region ti-element-base/ti-element-base-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * Sets to `true` to hide the element, otherwise `false`.
         *
         * @order 200
         */
        this.hidden = false; //^ti-widget-button\ti-widget-button.tsx,187^
        // #endregion
        // #region ti-widget-base/ti-widget-base-title-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * The widget caption text.
         * @order 207
         */
        this.caption = ''; //^ti-widget-button\ti-widget-button.tsx,195^
        /**
         * The widget info icon help text.
         * @order 208
         */
        this.infoText = ''; //^ti-widget-button\ti-widget-button.tsx,201^
        // #endregion
        // #region ti-widget-base/ti-widget-base-disabled-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * Controls the widget disabled state.
         * @order 202
         */
        this.disabled = false; //^ti-widget-button\ti-widget-button.tsx,209^
    }
    render() {
        // JSXON
        return this.base.render(h("ti-button", { appearance: this.appearance, disabled: this.disabled, onClick: () => !TiUtils.isInDesigner ? this.bindableTrigger++ : null },
            h("div", { class: "content" },
                this.icon ? h("ti-widget-icon", { appearance: "custom", size: "m", icon: this.icon }) : null,
                h("span", null, this.label))), { caption: this.caption, infoText: this.infoText });
        // JSXOFF
    } //^ti-widget-button\ti-widget-button.tsx,98^
    componentDidRender() {
        // workaround ti-button not flexing to parent size
        const tiButton = this.el.shadowRoot.querySelector('ti-button'); //^ti-widget-button\ti-widget-button.tsx,102^
        if (tiButton && tiButton.shadowRoot) { //^ti-widget-button\ti-widget-button.tsx,103^
            const button = tiButton.shadowRoot.querySelector('button'); //^ti-widget-button\ti-widget-button.tsx,104^
            if (button) { //^ti-widget-button\ti-widget-button.tsx,105^
                button.style.height = 'inherit'; //^ti-widget-button\ti-widget-button.tsx,106^
                button.style.width = 'inherit'; //^ti-widget-button\ti-widget-button.tsx,107^
            } //^ti-widget-button\ti-widget-button.tsx,108^
        } //^ti-widget-button\ti-widget-button.tsx,109^
    } //^ti-widget-button\ti-widget-button.tsx,110^
    /**
     * @private
     */
    get appearance() {
        let result = ''; //^ti-widget-button\ti-widget-button.tsx,116^
        if (this.buttonType)
            result += this.buttonType; //^ti-widget-button\ti-widget-button.tsx,117^
        return result; //^ti-widget-button\ti-widget-button.tsx,118^
    } //^ti-widget-button\ti-widget-button.tsx,119^
    /**
     * Sets the CSS property.
     *
     * @param {string} name the element style name
     * @param {string} value the new CSS property to be set
     */
    async setCSSProperty(name, value) {
        return this['base'][`${this.setCSSProperty.name}`](name, value); //^ti-widget-button\ti-widget-button.tsx,147^
    } //^ti-widget-button\ti-widget-button.tsx,148^
    /**
     * Returns the value of a CSS property.
     *
     * @param {string} name the element style property
     * @returns {string} the value of the property
     */
    async getCSSProperty(name) {
        return this['base'][`${this.getCSSProperty.name}`](name); //^ti-widget-button\ti-widget-button.tsx,158^
    } //^ti-widget-button\ti-widget-button.tsx,159^
    /**
     * Refresh the element.
     */
    async refresh() {
        return this['base'][`${this.refresh.name}`](); //^ti-widget-button\ti-widget-button.tsx,166^
    } //^ti-widget-button\ti-widget-button.tsx,167^
    /**
     * Fire an widget event.
     *
     * @param {string} eventName the event name, in dash notation
     * @param detail the event detail
     */
    async fire(eventName, detail) {
        return this['base'][`${this.fire.name}`](eventName, detail); //^ti-widget-button\ti-widget-button.tsx,177^
    } //^ti-widget-button\ti-widget-button.tsx,178^
    static get is() { return "ti-widget-button"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["ti-widget-button.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["ti-widget-button.css"]
    }; }
    static get properties() { return {
        "buttonType": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'primary' | 'secondary' | 'text'",
                "resolved": "\"primary\" | \"secondary\" | \"text\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "2",
                        "name": "order"
                    }],
                "text": "Button type, can be `primary`, `secondary`, or `text`. Type is `primary` by default."
            },
            "attribute": "button-type",
            "reflect": true,
            "defaultValue": "'primary'"
        },
        "label": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "3",
                        "name": "order"
                    }],
                "text": "The text displayed as the button caption."
            },
            "attribute": "label",
            "reflect": false,
            "defaultValue": "'Button'"
        },
        "icon": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "4",
                        "name": "order"
                    }],
                "text": "The icon to be displayed before the label."
            },
            "attribute": "icon",
            "reflect": false
        },
        "bindableTrigger": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": undefined,
                        "name": "isHidden"
                    }],
                "text": "incremented each time the button is clicked.  This can be used to\ne.g. bind to a target variable that causes an action to be performed when it changes.\nThe target should change the value of the bound variable back to 0 when the action is complete,\nand trigger the action when bindableTrigger changes it to > 0."
            },
            "attribute": "bindable-trigger",
            "reflect": false,
            "defaultValue": "0"
        },
        "tooltip": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "210",
                        "name": "order"
                    }],
                "text": "Controls the tooltip that is displayed for this widget."
            },
            "attribute": "tooltip",
            "reflect": false,
            "defaultValue": "''"
        },
        "hidden": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "200",
                        "name": "order"
                    }],
                "text": "Sets to `true` to hide the element, otherwise `false`."
            },
            "attribute": "hidden",
            "reflect": true,
            "defaultValue": "false"
        },
        "caption": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "207",
                        "name": "order"
                    }],
                "text": "The widget caption text."
            },
            "attribute": "caption",
            "reflect": true,
            "defaultValue": "''"
        },
        "infoText": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "208",
                        "name": "order"
                    }],
                "text": "The widget info icon help text."
            },
            "attribute": "info-text",
            "reflect": true,
            "defaultValue": "''"
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "202",
                        "name": "order"
                    }],
                "text": "Controls the widget disabled state."
            },
            "attribute": "disabled",
            "reflect": true,
            "defaultValue": "false"
        }
    }; }
    static get events() { return [{
            "method": "cssPropertyChanged",
            "name": "css-property-changed",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Event `css-property-changed`, with `detail: { name: string, value: string }`."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "setCSSProperty": {
            "complexType": {
                "signature": "(name: string, value: string) => Promise<void>",
                "parameters": [{
                        "tags": [{
                                "text": "name the element style name",
                                "name": "param"
                            }],
                        "text": "the element style name"
                    }, {
                        "tags": [{
                                "text": "value the new CSS property to be set",
                                "name": "param"
                            }],
                        "text": "the new CSS property to be set"
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Sets the CSS property.",
                "tags": [{
                        "name": "param",
                        "text": "name the element style name"
                    }, {
                        "name": "param",
                        "text": "value the new CSS property to be set"
                    }]
            }
        },
        "getCSSProperty": {
            "complexType": {
                "signature": "(name: string) => Promise<string>",
                "parameters": [{
                        "tags": [{
                                "text": "name the element style property",
                                "name": "param"
                            }],
                        "text": "the element style property"
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<string>"
            },
            "docs": {
                "text": "Returns the value of a CSS property.",
                "tags": [{
                        "name": "param",
                        "text": "name the element style property"
                    }, {
                        "name": "returns",
                        "text": "the value of the property"
                    }]
            }
        },
        "refresh": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Refresh the element.",
                "tags": []
            }
        },
        "fire": {
            "complexType": {
                "signature": "(eventName: string, detail: object) => Promise<void>",
                "parameters": [{
                        "tags": [{
                                "text": "eventName the event name, in dash notation",
                                "name": "param"
                            }],
                        "text": "the event name, in dash notation"
                    }, {
                        "tags": [{
                                "text": "detail the event detail",
                                "name": "param"
                            }],
                        "text": "the event detail"
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Fire an widget event.",
                "tags": [{
                        "name": "param",
                        "text": "eventName the event name, in dash notation"
                    }, {
                        "name": "param",
                        "text": "detail the event detail"
                    }]
            }
        }
    }; }
    static get elementRef() { return "el"; }
} //^ti-widget-button\ti-widget-button.tsx,212^
