/**
 *  Copyright (c) 2020, Texas Instruments Incorporated
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  *   Redistributions of source code must retain the above copyright
 *  notice, this list of conditions and the following disclaimer.
 *  notice, this list of conditions and the following disclaimer in the
 *  documentation and/or other materials provided with the distribution.
 *  *   Neither the name of Texas Instruments Incorporated nor the names of
 *  its contributors may be used to endorse or promote products derived
 *  from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 *  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 *  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 *  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
import { RegisterModel } from './lib/RegisterModel'; //^ti-model-register\ti-model-register.tsx,32^
/**
 * `ti-model-register` is a non visual component for a data binding model where
 * data is read and written from the target through registers.
 *
 *  Example:
 *
 *     <ti-model-register id="reg" device-id="TMP114"></ti-model-register>
 *
 * @customElement ti-model-register
 * @polymer
 * @label Register Model
 * @group Transports, Models, and Codecs
 * @archetype <ti-model-register></ti-model-register>
 */
export class TiModelRegister {
    constructor() {
        this.impl = undefined; //^ti-model-register\ti-model-register.tsx,55^
        // #region ti-target-configuration/ti-codec-base-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * A flag indicating that this model, transport, or codec is not necessary for connecting
         * to the target, and any failure should not prevent connection.
         *
         * @type {boolean}
         * @order 77
         */
        this.optional = false; //^ti-model-register\ti-model-register.tsx,66^
        /**
         * The optional identifier of a target device that is associated with this model, transport or codec.
         * Specifying a target device idicates that this is necessary and/or optional for this connecting
         * to the specified device.  The absence of a target device indicates this is necessary and/or optional
         * for any device.
         *
         * @type {string}
         * @order 80
         */
        this.deviceId = undefined; //^ti-model-register\ti-model-register.tsx,77^
        // #endregion
        /**
         * The optional flag that if ture indicates that multi-device support is required.  All devices must be
         * of the same class, and therefore same register set.  Also, they all must be available on the same
         * interface through a single codec which also has multi-device support.
         *
         * @type {boolean}
         * @order 94
         */
        this.isDeviceArray = false; //^ti-model-register\ti-model-register.tsx,90^
        /**
         * Under normal operation, this register model will queue up register writes when the target is not connected,
         * to be performed when the device first becomes connected.  If this flag is set, then write operations are instead
         * discard when the target is disconnected, and will not write the values to the target upon connection.
         *
         * @type {boolean}
         * @order 98
         */
        this.ignoreWriteOperationsWhenDisconnected = false; //^ti-model-register\ti-model-register.tsx,100^
    }
    connectedCallback() {
        this.impl = new RegisterModel(this.el); //^ti-model-register\ti-model-register.tsx,103^
    }
    ; //^ti-model-register\ti-model-register.tsx,104^
    static get is() { return "ti-model-register"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "optional": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{boolean}",
                        "name": "type"
                    }, {
                        "text": "77",
                        "name": "order"
                    }],
                "text": "A flag indicating that this model, transport, or codec is not necessary for connecting\nto the target, and any failure should not prevent connection."
            },
            "attribute": "optional",
            "reflect": false,
            "defaultValue": "false"
        },
        "deviceId": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [{
                        "text": "{string}",
                        "name": "type"
                    }, {
                        "text": "80",
                        "name": "order"
                    }],
                "text": "The optional identifier of a target device that is associated with this model, transport or codec.\nSpecifying a target device idicates that this is necessary and/or optional for this connecting\nto the specified device.  The absence of a target device indicates this is necessary and/or optional\nfor any device."
            },
            "attribute": "device-id",
            "reflect": false,
            "defaultValue": "undefined"
        },
        "isDeviceArray": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [{
                        "text": "{boolean}",
                        "name": "type"
                    }, {
                        "text": "94",
                        "name": "order"
                    }],
                "text": "The optional flag that if ture indicates that multi-device support is required.  All devices must be\nof the same class, and therefore same register set.  Also, they all must be available on the same\ninterface through a single codec which also has multi-device support."
            },
            "attribute": "is-device-array",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get elementRef() { return "el"; }
}
; //^ti-model-register\ti-model-register.tsx,105^
