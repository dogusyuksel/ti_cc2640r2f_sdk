import { Base64PacketCodec } from '../ti-codec-base64/lib/Base64PacketCodec'; //^ti-codec-base64\ti-codec-base64.tsx,31^
/**
 * `ti-codec-base64` is a non visual component for encoding and decoding base64 strings into binary data.
 *
 *  Example:
 *
 *     <ti-codec-base64 id="base64"></ti-codec-base64>
 *
 * @customElement ti-codec-base64
 * @polymer
 * @label Base64 Codec
 * @group Transports, Models, and Codecs
 * @archetype <ti-codec-base64></ti-codec-base64>
 */
export class TiCodecBase64 {
    constructor() {
        this.impl = undefined; //^ti-codec-base64\ti-codec-base64.tsx,52^
        // #region ti-target-configuration/ti-codec-base-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * A flag indicating that this model, transport, or codec is not necessary for connecting
         * to the target, and any failure should not prevent connection.
         *
         * @type {boolean}
         * @order 77
         */
        this.optional = false; //^ti-codec-base64\ti-codec-base64.tsx,63^
        /**
         * The optional identifier of a target device that is associated with this model, transport or codec.
         * Specifying a target device idicates that this is necessary and/or optional for this connecting
         * to the specified device.  The absence of a target device indicates this is necessary and/or optional
         * for any device.
         *
         * @type {string}
         * @order 80
         */
        this.deviceId = undefined; //^ti-codec-base64\ti-codec-base64.tsx,74^
    }
    // #endregion
    connectedCallback() {
        this.impl = new Base64PacketCodec(this.el); //^ti-codec-base64\ti-codec-base64.tsx,80^
    }
    ; //^ti-codec-base64\ti-codec-base64.tsx,81^
    static get is() { return "ti-codec-base64"; }
    static get properties() { return {
        "optional": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{boolean}",
                        "name": "type"
                    }, {
                        "text": "77",
                        "name": "order"
                    }],
                "text": "A flag indicating that this model, transport, or codec is not necessary for connecting\nto the target, and any failure should not prevent connection."
            },
            "attribute": "optional",
            "reflect": false,
            "defaultValue": "false"
        },
        "deviceId": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [{
                        "text": "{string}",
                        "name": "type"
                    }, {
                        "text": "80",
                        "name": "order"
                    }],
                "text": "The optional identifier of a target device that is associated with this model, transport or codec.\nSpecifying a target device idicates that this is necessary and/or optional for this connecting\nto the specified device.  The absence of a target device indicates this is necessary and/or optional\nfor any device."
            },
            "attribute": "device-id",
            "reflect": false,
            "defaultValue": "undefined"
        }
    }; }
    static get elementRef() { return "el"; }
}
; //^ti-codec-base64\ti-codec-base64.tsx,82^
