/**
 *  Copyright (c) 2019-2020, Texas Instruments Incorporated
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  *   Redistributions of source code must retain the above copyright
 *  notice, this list of conditions and the following disclaimer.
 *  notice, this list of conditions and the following disclaimer in the
 *  documentation and/or other materials provided with the distribution.
 *  *   Neither the name of Texas Instruments Incorporated nor the names of
 *  its contributors may be used to endorse or promote products derived
 *  from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 *  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 *  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 *  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
import { h } from "@stencil/core"; //^ti-widget-led\ti-widget-led.tsx,29^
import { TiWidgetBase } from '../ti-widget-base/ti-widget-base'; //^ti-widget-led\ti-widget-led.tsx,32^
/**
 * `ti-widget-led` is a bindable version of the <led> html element.
 * The LED widget displays a boolean value by 'lighting up' when the value is true and 'turning off' when it is false. The on value is a boolean value (true/false).
 *
 * Custom property | Description | Default
 * ----------------|-------------|----------
 * `--ti-widget-led-on-color` | Led on color | #ff0000
 * `--ti-widget-led-off-color` | Led off color | #696969
 *
 * @css `--ti-widget-led-on-color` | Led on color | #ff0000
 * @css `--ti-widget-led-off-color` | Led off color | #696969
 * @demo ./ti-widget-led/demo/index.html
 * @label LED
 * @group Status Indicators
 * @archetype <ti-widget-led on glow style="width: 34px; height: 34px;"></ti-widget-led>
 */
export class TiWidgetLed {
    constructor() {
        this.base = new ( // keep on separate line to enable sourcemapping   //^ti-widget-led\ti-widget-led.tsx,56^
        class extends TiWidgetBase {
            get element() {
                return this.led.el; //^ti-widget-led\ti-widget-led.tsx,59^
            } //^ti-widget-led\ti-widget-led.tsx,60^
            get led() {
                return this.parent; //^ti-widget-led\ti-widget-led.tsx,63^
            } //^ti-widget-led\ti-widget-led.tsx,64^
            // @overriden
            onCSSPropertyChanged(name, value) {
                this.led.onCSSChangedHandler(name, value); //^ti-widget-led\ti-widget-led.tsx,68^
            } //^ti-widget-led\ti-widget-led.tsx,69^
        })(this); //^ti-widget-led\ti-widget-led.tsx,70^
        /**
         * The LED active state. When true, turns the LED 'on'.
         * @order 2
         */
        this.on = false; //^ti-widget-led\ti-widget-led.tsx,76^
        /**
         * When true, turns the LED glow gradient 'on'.
         * @order 3
         */
        this.glow = true; //^ti-widget-led\ti-widget-led.tsx,87^
        this.oldOn = false; //^ti-widget-led\ti-widget-led.tsx,94^
        this.ledOnColor = '#ff0000'; //^ti-widget-led\ti-widget-led.tsx,95^
        this.ledOffColor = '#696969'; //^ti-widget-led\ti-widget-led.tsx,96^
        /**
         * Controls the tooltip that is displayed for this widget.
         * @order 210
         */
        this.tooltip = ''; //^ti-widget-led\ti-widget-led.tsx,225^
        // #endregion
        // #region ti-element-base/ti-element-base-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * Sets to `true` to hide the element, otherwise `false`.
         *
         * @order 200
         */
        this.hidden = false; //^ti-widget-led\ti-widget-led.tsx,275^
        // #endregion
        // #region ti-widget-base/ti-widget-base-title-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * The widget caption text.
         * @order 207
         */
        this.caption = ''; //^ti-widget-led\ti-widget-led.tsx,283^
        /**
         * The widget info icon help text.
         * @order 208
         */
        this.infoText = ''; //^ti-widget-led\ti-widget-led.tsx,289^
    }
    render() {
        // JSXON
        return this.base.render(h("div", { id: "top" },
            h("div", null,
                h("svg", { width: "100%", height: "100%", viewBox: "0 0 80 80", preserveAspectRatio: "xMidYMid meet", id: "led-wrapper" },
                    h("g", { transform: "translate(4.3915046,4.8449881)", id: "led-shadow-grey" },
                        h("path", { id: "led_shadow_path", d: "m 57.281661,35.520848 c 0,11.693806 -9.436019,21.19661 -21.129748,21.279304 -11.69373,0.08269 -21.263201,-9.285718 -21.428582,-20.978355 -0.165383,-11.692636 9.18499,-21.576404 20.826686,-21.575994 11.694023,4.1e-4 21.939035,9.13316 21.772824,21.219838" })),
                    h("g", { id: "led-residual-shine", class: "css-bind" },
                        h("path", { id: "led_res_path", fill: this.getColor(this.ledOnColor, this.ledOffColor, this.on), stroke: this.getColor(this.ledOnColor, this.ledOffColor, this.on), d: "m 61.673165,40.365836 c 0,11.693806 -9.436019,21.19661 -21.129748,21.279304 -11.69373,0.08269 -21.263201,-9.285718 -21.428582,-20.978355 -0.165383,-11.692636 9.18499,-21.576404 20.826686,-21.575994 11.694023,4.1e-4 21.939035,9.13316 21.772824,21.219838" })),
                    h("g", { transform: "translate(25.3915046,25.8449881)", id: "led-lit-color", class: "css-bind" },
                        h("path", { id: "led_path", transform: "scale(0.4,0.4)", fill: this.getColor(this.ledOnColor, this.ledOffColor, this.on), d: "m 76.355601,35.518697 c 0,22.185856 -17.902315,40.21487 -40.088026,40.371759 C 14.081864,76.047345 -4.0736375,58.273303 -4.3874056,36.089666 -4.7011736,13.906029 13.038647,-4.8457656 35.12564,-4.8449881 57.311908,-4.8442107 76.749061,12.482731 76.433728,35.413956" })),
                    h("g", { transform: "translate(-28,-28)", display: this.getGlow(), id: "glow-circle", class: "css-bind" },
                        h("path", { id: "glow_path", transform: "scale(1.7,1.7)", fill: this.getColor(this.ledOnColor, this.ledOffColor, this.on), d: "m 60.588751,40.365959 c 0,11.097298 -8.954684,20.115356 -20.051908,20.193831 C 29.439617,60.63826 20.358289,51.747744 20.201344,40.651556 20.044398,29.555368 28.917803,20.175778 39.965649,20.176167 c 11.097504,3.88e-4 20.81991,8.667271 20.662181,20.1374" }))))));
        // JSXOFF
    } //^ti-widget-led\ti-widget-led.tsx,150^
    componentWillLoad() {
        this.oldOn = this.on; //^ti-widget-led\ti-widget-led.tsx,153^
    } //^ti-widget-led\ti-widget-led.tsx,154^
    componentDidLoad() {
        setTimeout(async () => {
            const c1 = await this.getCSSProperty('--ti-widget-led-on-color'); //^ti-widget-led\ti-widget-led.tsx,158^
            const c2 = await this.getCSSProperty('--ti-widget-led-off-color'); //^ti-widget-led\ti-widget-led.tsx,159^
            /* apply custom css */
            if (c1)
                this.ledOnColor = c1; //^ti-widget-led\ti-widget-led.tsx,161^
            if (c2)
                this.ledOffColor = c2; //^ti-widget-led\ti-widget-led.tsx,162^
            this.refresh(); //^ti-widget-led\ti-widget-led.tsx,163^
        }); //^ti-widget-led\ti-widget-led.tsx,164^
    } //^ti-widget-led\ti-widget-led.tsx,165^
    onGlowChanged(newValue) {
        this.refresh(); //^ti-widget-led\ti-widget-led.tsx,169^
        this.onGlow.emit({ value: newValue }); //^ti-widget-led\ti-widget-led.tsx,170^
    } //^ti-widget-led\ti-widget-led.tsx,171^
    onOnChanged(newValue, oldValue) {
        if (newValue !== this.oldOn) { //^ti-widget-led\ti-widget-led.tsx,175^
            this.oldOn = newValue; //^ti-widget-led\ti-widget-led.tsx,176^
            this.refresh(); //^ti-widget-led\ti-widget-led.tsx,177^
            this.onChanged.emit({ value: newValue }); //^ti-widget-led\ti-widget-led.tsx,178^
        }
        else { //^ti-widget-led\ti-widget-led.tsx,179^
            this.on = this.oldOn; //^ti-widget-led\ti-widget-led.tsx,180^
        } //^ti-widget-led\ti-widget-led.tsx,181^
    } //^ti-widget-led\ti-widget-led.tsx,182^
    /**
     * @private
     */
    getColor(ledOnColor, offColor, isOn) {
        return isOn ? ledOnColor : offColor; //^ti-widget-led\ti-widget-led.tsx,188^
    } //^ti-widget-led\ti-widget-led.tsx,189^
    /**
     * @private
     */
    getGlow() {
        return (this.glow && this.on) ? 'inline' : 'none'; //^ti-widget-led\ti-widget-led.tsx,195^
    } //^ti-widget-led\ti-widget-led.tsx,196^
    onCSSChangedHandler(name, value) {
        if (name === '--ti-widget-led-on-color') { //^ti-widget-led\ti-widget-led.tsx,199^
            this.ledOnColor = value; //^ti-widget-led\ti-widget-led.tsx,200^
            this.refresh(); //^ti-widget-led\ti-widget-led.tsx,201^
        } //^ti-widget-led\ti-widget-led.tsx,202^
        if (name === '--ti-widget-led-off-color') { //^ti-widget-led\ti-widget-led.tsx,203^
            this.ledOffColor = value; //^ti-widget-led\ti-widget-led.tsx,204^
            this.refresh(); //^ti-widget-led\ti-widget-led.tsx,205^
        } //^ti-widget-led\ti-widget-led.tsx,206^
    } //^ti-widget-led\ti-widget-led.tsx,207^
    /**
     * Sets the CSS property.
     *
     * @param {string} name the element style name
     * @param {string} value the new CSS property to be set
     */
    async setCSSProperty(name, value) {
        return this['base'][`${this.setCSSProperty.name}`](name, value); //^ti-widget-led\ti-widget-led.tsx,235^
    } //^ti-widget-led\ti-widget-led.tsx,236^
    /**
     * Returns the value of a CSS property.
     *
     * @param {string} name the element style property
     * @returns {string} the value of the property
     */
    async getCSSProperty(name) {
        return this['base'][`${this.getCSSProperty.name}`](name); //^ti-widget-led\ti-widget-led.tsx,246^
    } //^ti-widget-led\ti-widget-led.tsx,247^
    /**
     * Refresh the element.
     */
    async refresh() {
        return this['base'][`${this.refresh.name}`](); //^ti-widget-led\ti-widget-led.tsx,254^
    } //^ti-widget-led\ti-widget-led.tsx,255^
    /**
     * Fire an widget event.
     *
     * @param {string} eventName the event name, in dash notation
     * @param detail the event detail
     */
    async fire(eventName, detail) {
        return this['base'][`${this.fire.name}`](eventName, detail); //^ti-widget-led\ti-widget-led.tsx,265^
    } //^ti-widget-led\ti-widget-led.tsx,266^
    static get is() { return "ti-widget-led"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["ti-widget-led.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["ti-widget-led.css"]
    }; }
    static get properties() { return {
        "on": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "2",
                        "name": "order"
                    }],
                "text": "The LED active state. When true, turns the LED 'on'."
            },
            "attribute": "on",
            "reflect": false,
            "defaultValue": "false"
        },
        "glow": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "3",
                        "name": "order"
                    }],
                "text": "When true, turns the LED glow gradient 'on'."
            },
            "attribute": "glow",
            "reflect": false,
            "defaultValue": "true"
        },
        "tooltip": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "210",
                        "name": "order"
                    }],
                "text": "Controls the tooltip that is displayed for this widget."
            },
            "attribute": "tooltip",
            "reflect": false,
            "defaultValue": "''"
        },
        "hidden": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "200",
                        "name": "order"
                    }],
                "text": "Sets to `true` to hide the element, otherwise `false`."
            },
            "attribute": "hidden",
            "reflect": true,
            "defaultValue": "false"
        },
        "caption": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "207",
                        "name": "order"
                    }],
                "text": "The widget caption text."
            },
            "attribute": "caption",
            "reflect": true,
            "defaultValue": "''"
        },
        "infoText": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "208",
                        "name": "order"
                    }],
                "text": "The widget info icon help text."
            },
            "attribute": "info-text",
            "reflect": true,
            "defaultValue": "''"
        }
    }; }
    static get events() { return [{
            "method": "onChanged",
            "name": "on-changed",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Fired when the `on` property changed."
            },
            "complexType": {
                "original": "{ value: boolean }",
                "resolved": "{ value: boolean; }",
                "references": {}
            }
        }, {
            "method": "onGlow",
            "name": "glow-changed",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Fired when the `glow` property changed."
            },
            "complexType": {
                "original": "{ value: boolean }",
                "resolved": "{ value: boolean; }",
                "references": {}
            }
        }, {
            "method": "cssPropertyChanged",
            "name": "css-property-changed",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Event `css-property-changed`, with `detail: { name: string, value: string }`."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "setCSSProperty": {
            "complexType": {
                "signature": "(name: string, value: string) => Promise<void>",
                "parameters": [{
                        "tags": [{
                                "text": "name the element style name",
                                "name": "param"
                            }],
                        "text": "the element style name"
                    }, {
                        "tags": [{
                                "text": "value the new CSS property to be set",
                                "name": "param"
                            }],
                        "text": "the new CSS property to be set"
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Sets the CSS property.",
                "tags": [{
                        "name": "param",
                        "text": "name the element style name"
                    }, {
                        "name": "param",
                        "text": "value the new CSS property to be set"
                    }]
            }
        },
        "getCSSProperty": {
            "complexType": {
                "signature": "(name: string) => Promise<string>",
                "parameters": [{
                        "tags": [{
                                "text": "name the element style property",
                                "name": "param"
                            }],
                        "text": "the element style property"
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<string>"
            },
            "docs": {
                "text": "Returns the value of a CSS property.",
                "tags": [{
                        "name": "param",
                        "text": "name the element style property"
                    }, {
                        "name": "returns",
                        "text": "the value of the property"
                    }]
            }
        },
        "refresh": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Refresh the element.",
                "tags": []
            }
        },
        "fire": {
            "complexType": {
                "signature": "(eventName: string, detail: object) => Promise<void>",
                "parameters": [{
                        "tags": [{
                                "text": "eventName the event name, in dash notation",
                                "name": "param"
                            }],
                        "text": "the event name, in dash notation"
                    }, {
                        "tags": [{
                                "text": "detail the event detail",
                                "name": "param"
                            }],
                        "text": "the event detail"
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Fire an widget event.",
                "tags": [{
                        "name": "param",
                        "text": "eventName the event name, in dash notation"
                    }, {
                        "name": "param",
                        "text": "detail the event detail"
                    }]
            }
        }
    }; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "glow",
            "methodName": "onGlowChanged"
        }, {
            "propName": "on",
            "methodName": "onOnChanged"
        }]; }
} //^ti-widget-led\ti-widget-led.tsx,292^
