/**
 *  Copyright (c) 2020, Texas Instruments Incorporated
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  *   Redistributions of source code must retain the above copyright
 *  notice, this list of conditions and the following disclaimer.
 *  notice, this list of conditions and the following disclaimer in the
 *  documentation and/or other materials provided with the distribution.
 *  *   Neither the name of Texas Instruments Incorporated nor the names of
 *  its contributors may be used to endorse or promote products derived
 *  from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 *  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 *  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 *  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
import { h } from "@stencil/core"; //^ti-widget-tooltip\ti-widget-tooltip.tsx,30^
import { TiWidgetBase } from '../ti-widget-base/ti-widget-base'; //^ti-widget-tooltip\ti-widget-tooltip.tsx,31^
/**
 * `ti-widget-tooltip` is a tooltip with bindable properties
 *
 * @demo ./ti-widget-tooltip/demo/index.html
 * @label Tooltip
 * @group Common
 * @archetype <ti-widget-tooltip text="Text inside tooltip"></ti-widget-tooltip>
 */
export class TiWidgetTooltip {
    constructor() {
        this.base = new ( // keep on separate line to enable sourcemapping   //^ti-widget-tooltip\ti-widget-tooltip.tsx,48^
        class extends TiWidgetBase {
            get element() {
                return this.parent.el; //^ti-widget-tooltip\ti-widget-tooltip.tsx,51^
            } //^ti-widget-tooltip\ti-widget-tooltip.tsx,52^
        })(this); //^ti-widget-tooltip\ti-widget-tooltip.tsx,53^
        this.positionSelected = 'bottom'; //^ti-widget-tooltip\ti-widget-tooltip.tsx,66^
        /**
         * The text to display inside the tooltip.
         * @order 2
         */
        this.text = ''; //^ti-widget-tooltip\ti-widget-tooltip.tsx,72^
        /**
         * The ID of the element that the tooltip is anchored to.
         * @order 3
         */
        this.anchorId = ''; //^ti-widget-tooltip\ti-widget-tooltip.tsx,78^
        /**
         * Positions the tooltip relative to its anchor.
         * @order 4
         */
        this.position = 'bottom'; //^ti-widget-tooltip\ti-widget-tooltip.tsx,84^
        /**
         * Controls the tooltip that is displayed for this widget.
         * @order 210
         */
        this.tooltip = ''; //^ti-widget-tooltip\ti-widget-tooltip.tsx,143^
        // #endregion
        // #region ti-element-base/ti-element-base-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * Sets to `true` to hide the element, otherwise `false`.
         *
         * @order 200
         */
        this.hidden = false; //^ti-widget-tooltip\ti-widget-tooltip.tsx,193^
    }
    render() {
        // JSXON
        return (h("ti-tooltip-trigger", { class: "ti-tooltip-trigger" },
            h("slot", null),
            h("ti-tooltip", { class: "ti-tooltip", position: this.positionSelected }, this.text)));
        // JSXOFF
    } //^ti-widget-tooltip\ti-widget-tooltip.tsx,64^
    positionChanged() {
        //workaround for tooltip positioning
        if (this.position === 'top' || this.position === 'left') { //^ti-widget-tooltip\ti-widget-tooltip.tsx,89^
            this.positionSelected = 'bottom'; //^ti-widget-tooltip\ti-widget-tooltip.tsx,90^
        } //^ti-widget-tooltip\ti-widget-tooltip.tsx,91^
        this.positionSelected = this.position; //^ti-widget-tooltip\ti-widget-tooltip.tsx,92^
    } //^ti-widget-tooltip\ti-widget-tooltip.tsx,93^
    anchorIdChanged() {
        window.setTimeout(() => {
            this.findAnchor(); //^ti-widget-tooltip\ti-widget-tooltip.tsx,98^
        }, 1); //^ti-widget-tooltip\ti-widget-tooltip.tsx,99^
    } //^ti-widget-tooltip\ti-widget-tooltip.tsx,100^
    /**
     * Sets the anchor element by attempting to find the element
     * with the given ID in the parent's root or the document.
     */
    findAnchor() {
        const anchor = (this.anchorId && this.anchorId !== 'elementWrapper') //^ti-widget-tooltip\ti-widget-tooltip.tsx,107^
            ? this.el.parentElement.querySelector(`#${this.anchorId}`) || document.querySelector(`#${this.anchorId}`) //^ti-widget-tooltip\ti-widget-tooltip.tsx,108^
            : this.el.parentElement; //^ti-widget-tooltip\ti-widget-tooltip.tsx,109^
        const bound = anchor.getBoundingClientRect(); //^ti-widget-tooltip\ti-widget-tooltip.tsx,111^
        if (this.anchorId && this.anchorId !== 'help-icon' && this.anchorId !== 'elementWrapper') { //^ti-widget-tooltip\ti-widget-tooltip.tsx,113^
            // set position for top-level widget anchoring
            this.el.style.top = `${bound.top}px`; //^ti-widget-tooltip\ti-widget-tooltip.tsx,115^
            this.el.style.left = `${bound.left}px`; //^ti-widget-tooltip\ti-widget-tooltip.tsx,116^
        } //^ti-widget-tooltip\ti-widget-tooltip.tsx,117^
        // set size to match anchor div
        this.el.style.width = `${bound.width}px`; //^ti-widget-tooltip\ti-widget-tooltip.tsx,119^
        this.el.style.height = `${bound.height}px`; //^ti-widget-tooltip\ti-widget-tooltip.tsx,120^
    } //^ti-widget-tooltip\ti-widget-tooltip.tsx,121^
    componentDidLoad() {
        this.anchorIdChanged(); //^ti-widget-tooltip\ti-widget-tooltip.tsx,124^
    } //^ti-widget-tooltip\ti-widget-tooltip.tsx,125^
    /**
     * Sets the CSS property.
     *
     * @param {string} name the element style name
     * @param {string} value the new CSS property to be set
     */
    async setCSSProperty(name, value) {
        return this['base'][`${this.setCSSProperty.name}`](name, value); //^ti-widget-tooltip\ti-widget-tooltip.tsx,153^
    } //^ti-widget-tooltip\ti-widget-tooltip.tsx,154^
    /**
     * Returns the value of a CSS property.
     *
     * @param {string} name the element style property
     * @returns {string} the value of the property
     */
    async getCSSProperty(name) {
        return this['base'][`${this.getCSSProperty.name}`](name); //^ti-widget-tooltip\ti-widget-tooltip.tsx,164^
    } //^ti-widget-tooltip\ti-widget-tooltip.tsx,165^
    /**
     * Refresh the element.
     */
    async refresh() {
        return this['base'][`${this.refresh.name}`](); //^ti-widget-tooltip\ti-widget-tooltip.tsx,172^
    } //^ti-widget-tooltip\ti-widget-tooltip.tsx,173^
    /**
     * Fire an widget event.
     *
     * @param {string} eventName the event name, in dash notation
     * @param detail the event detail
     */
    async fire(eventName, detail) {
        return this['base'][`${this.fire.name}`](eventName, detail); //^ti-widget-tooltip\ti-widget-tooltip.tsx,183^
    } //^ti-widget-tooltip\ti-widget-tooltip.tsx,184^
    static get is() { return "ti-widget-tooltip"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["ti-widget-tooltip.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["ti-widget-tooltip.css"]
    }; }
    static get properties() { return {
        "text": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "2",
                        "name": "order"
                    }],
                "text": "The text to display inside the tooltip."
            },
            "attribute": "text",
            "reflect": false,
            "defaultValue": "''"
        },
        "anchorId": {
            "type": "string",
            "mutable": true,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "3",
                        "name": "order"
                    }],
                "text": "The ID of the element that the tooltip is anchored to."
            },
            "attribute": "anchor-id",
            "reflect": false,
            "defaultValue": "''"
        },
        "position": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'top' | 'right' | 'bottom' | 'left'",
                "resolved": "\"bottom\" | \"left\" | \"right\" | \"top\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "4",
                        "name": "order"
                    }],
                "text": "Positions the tooltip relative to its anchor."
            },
            "attribute": "position",
            "reflect": false,
            "defaultValue": "'bottom'"
        },
        "tooltip": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "210",
                        "name": "order"
                    }],
                "text": "Controls the tooltip that is displayed for this widget."
            },
            "attribute": "tooltip",
            "reflect": false,
            "defaultValue": "''"
        },
        "hidden": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "200",
                        "name": "order"
                    }],
                "text": "Sets to `true` to hide the element, otherwise `false`."
            },
            "attribute": "hidden",
            "reflect": true,
            "defaultValue": "false"
        }
    }; }
    static get events() { return [{
            "method": "cssPropertyChanged",
            "name": "css-property-changed",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Event `css-property-changed`, with `detail: { name: string, value: string }`."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "setCSSProperty": {
            "complexType": {
                "signature": "(name: string, value: string) => Promise<void>",
                "parameters": [{
                        "tags": [{
                                "text": "name the element style name",
                                "name": "param"
                            }],
                        "text": "the element style name"
                    }, {
                        "tags": [{
                                "text": "value the new CSS property to be set",
                                "name": "param"
                            }],
                        "text": "the new CSS property to be set"
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Sets the CSS property.",
                "tags": [{
                        "name": "param",
                        "text": "name the element style name"
                    }, {
                        "name": "param",
                        "text": "value the new CSS property to be set"
                    }]
            }
        },
        "getCSSProperty": {
            "complexType": {
                "signature": "(name: string) => Promise<string>",
                "parameters": [{
                        "tags": [{
                                "text": "name the element style property",
                                "name": "param"
                            }],
                        "text": "the element style property"
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<string>"
            },
            "docs": {
                "text": "Returns the value of a CSS property.",
                "tags": [{
                        "name": "param",
                        "text": "name the element style property"
                    }, {
                        "name": "returns",
                        "text": "the value of the property"
                    }]
            }
        },
        "refresh": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Refresh the element.",
                "tags": []
            }
        },
        "fire": {
            "complexType": {
                "signature": "(eventName: string, detail: object) => Promise<void>",
                "parameters": [{
                        "tags": [{
                                "text": "eventName the event name, in dash notation",
                                "name": "param"
                            }],
                        "text": "the event name, in dash notation"
                    }, {
                        "tags": [{
                                "text": "detail the event detail",
                                "name": "param"
                            }],
                        "text": "the event detail"
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Fire an widget event.",
                "tags": [{
                        "name": "param",
                        "text": "eventName the event name, in dash notation"
                    }, {
                        "name": "param",
                        "text": "detail the event detail"
                    }]
            }
        }
    }; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "position",
            "methodName": "positionChanged"
        }, {
            "propName": "anchorId",
            "methodName": "anchorIdChanged"
        }]; }
} //^ti-widget-tooltip\ti-widget-tooltip.tsx,196^
