/**
 *  Copyright (c) 2020, Texas Instruments Incorporated
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  *   Redistributions of source code must retain the above copyright
 *  notice, this list of conditions and the following disclaimer.
 *  notice, this list of conditions and the following disclaimer in the
 *  documentation and/or other materials provided with the distribution.
 *  *   Neither the name of Texas Instruments Incorporated nor the names of
 *  its contributors may be used to endorse or promote products derived
 *  from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 *  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 *  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 *  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
import { h } from "@stencil/core"; //^ti-widget-radio\ti-widget-radio.tsx,30^
import { TiWidgetBaseCheck } from '../ti-widget-base/ti-widget-base-check'; //^ti-widget-radio\ti-widget-radio.tsx,31^
/**
 * `ti-widget-radio` is a toggle button in the radio style.  It can be used on it's own, or added to a
 * ti-widget-radio-group for mutually exclusive options.
 *
 * @demo ./ti-widget-radio/demo/index.html
 * @label Radio Button
 * @group Inputs
 * @archetype <ti-widget-radio></ti-widget-radio>
 */
export class TiWidgetRadio {
    constructor() {
        this.base = new ( //^ti-widget-radio\ti-widget-radio.tsx,51^
        class extends TiWidgetBaseCheck {
            get radio() {
                return this.parent; //^ti-widget-radio\ti-widget-radio.tsx,54^
            } //^ti-widget-radio\ti-widget-radio.tsx,55^
            get element() {
                return this.radio.el; //^ti-widget-radio\ti-widget-radio.tsx,58^
            } //^ti-widget-radio\ti-widget-radio.tsx,59^
        } //^ti-widget-radio\ti-widget-radio.tsx,60^
        )(this); //^ti-widget-radio\ti-widget-radio.tsx,61^
        // #region ti-widget-base/ti-widget-base-check-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * If true, the widget is checked.
         * @order 2
         */
        this.checked = false; //^ti-widget-radio\ti-widget-radio.tsx,109^
        /**
         * Provides label text to display
         * @order 3
         */
        this.label = 'Check'; //^ti-widget-radio\ti-widget-radio.tsx,120^
        /**
         * Controls the tooltip that is displayed for this widget.
         * @order 210
         */
        this.tooltip = ''; //^ti-widget-radio\ti-widget-radio.tsx,144^
        // #endregion
        // #region ti-element-base/ti-element-base-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * Sets to `true` to hide the element, otherwise `false`.
         *
         * @order 200
         */
        this.hidden = false; //^ti-widget-radio\ti-widget-radio.tsx,194^
        // #endregion
        // #region ti-widget-base/ti-widget-base-disabled-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * Controls the widget disabled state.
         * @order 202
         */
        this.disabled = false; //^ti-widget-radio\ti-widget-radio.tsx,202^
    }
    componentWillLoad() {
        this.el.className = 'ti-radio'; //^ti-widget-radio\ti-widget-radio.tsx,70^
        this.value = this.value || `${this.el.getAttribute('id')}`; //^ti-widget-radio\ti-widget-radio.tsx,71^
        if (this.el.parentElement.attributes.getNamedItem('horizontal')) { //^ti-widget-radio\ti-widget-radio.tsx,72^
            this.el.classList.add('horizontal'); //^ti-widget-radio\ti-widget-radio.tsx,73^
        } //^ti-widget-radio\ti-widget-radio.tsx,74^
    } //^ti-widget-radio\ti-widget-radio.tsx,75^
    render() {
        // JSXON
        return this.base.render(h("ti-radio", { value: this.value, disabled: this.disabled, selected: this.checked }, this.base.renderCheck()));
        // JSXOFF
    } //^ti-widget-radio\ti-widget-radio.tsx,89^
    onTiChanged(event) {
        this.checked = event.detail.selected; //^ti-widget-radio\ti-widget-radio.tsx,93^
        this.value = event.detail.value; //^ti-widget-radio\ti-widget-radio.tsx,94^
        this.checkedChanged.emit({ value: this.checked }); //^ti-widget-radio\ti-widget-radio.tsx,95^
    } //^ti-widget-radio\ti-widget-radio.tsx,96^
    onCheckedChanged(newValue) {
        this.checkedChanged.emit({ value: newValue }); //^ti-widget-radio\ti-widget-radio.tsx,100^
    } //^ti-widget-radio\ti-widget-radio.tsx,101^
    /**
     * Sets the CSS property.
     *
     * @param {string} name the element style name
     * @param {string} value the new CSS property to be set
     */
    async setCSSProperty(name, value) {
        return this['base'][`${this.setCSSProperty.name}`](name, value); //^ti-widget-radio\ti-widget-radio.tsx,154^
    } //^ti-widget-radio\ti-widget-radio.tsx,155^
    /**
     * Returns the value of a CSS property.
     *
     * @param {string} name the element style property
     * @returns {string} the value of the property
     */
    async getCSSProperty(name) {
        return this['base'][`${this.getCSSProperty.name}`](name); //^ti-widget-radio\ti-widget-radio.tsx,165^
    } //^ti-widget-radio\ti-widget-radio.tsx,166^
    /**
     * Refresh the element.
     */
    async refresh() {
        return this['base'][`${this.refresh.name}`](); //^ti-widget-radio\ti-widget-radio.tsx,173^
    } //^ti-widget-radio\ti-widget-radio.tsx,174^
    /**
     * Fire an widget event.
     *
     * @param {string} eventName the event name, in dash notation
     * @param detail the event detail
     */
    async fire(eventName, detail) {
        return this['base'][`${this.fire.name}`](eventName, detail); //^ti-widget-radio\ti-widget-radio.tsx,184^
    } //^ti-widget-radio\ti-widget-radio.tsx,185^
    static get is() { return "ti-widget-radio"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["ti-widget-radio.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["ti-widget-radio.css"]
    }; }
    static get properties() { return {
        "value": {
            "type": "any",
            "mutable": false,
            "complexType": {
                "original": "ValueType",
                "resolved": "number | string",
                "references": {
                    "ValueType": {
                        "location": "import",
                        "path": "../ti-widget-base/ti-widget-base-selector"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "2",
                        "name": "order"
                    }],
                "text": "The radio button value."
            },
            "attribute": "value",
            "reflect": false
        },
        "checked": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "2",
                        "name": "order"
                    }],
                "text": "If true, the widget is checked."
            },
            "attribute": "checked",
            "reflect": true,
            "defaultValue": "false"
        },
        "label": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [{
                        "text": "3",
                        "name": "order"
                    }],
                "text": "Provides label text to display"
            },
            "attribute": "label",
            "reflect": true,
            "defaultValue": "'Check'"
        },
        "labelWhenChecked": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [{
                        "text": "4",
                        "name": "order"
                    }],
                "text": "If defined, provides label text to display when check state is checked"
            },
            "attribute": "label-when-checked",
            "reflect": true
        },
        "tooltip": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "210",
                        "name": "order"
                    }],
                "text": "Controls the tooltip that is displayed for this widget."
            },
            "attribute": "tooltip",
            "reflect": false,
            "defaultValue": "''"
        },
        "hidden": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "200",
                        "name": "order"
                    }],
                "text": "Sets to `true` to hide the element, otherwise `false`."
            },
            "attribute": "hidden",
            "reflect": true,
            "defaultValue": "false"
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "202",
                        "name": "order"
                    }],
                "text": "Controls the widget disabled state."
            },
            "attribute": "disabled",
            "reflect": true,
            "defaultValue": "false"
        }
    }; }
    static get events() { return [{
            "method": "checkedChanged",
            "name": "checked-changed",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Fired when the `checked` property is changed."
            },
            "complexType": {
                "original": "{ value: boolean }",
                "resolved": "{ value: boolean; }",
                "references": {}
            }
        }, {
            "method": "cssPropertyChanged",
            "name": "css-property-changed",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Event `css-property-changed`, with `detail: { name: string, value: string }`."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "setCSSProperty": {
            "complexType": {
                "signature": "(name: string, value: string) => Promise<void>",
                "parameters": [{
                        "tags": [{
                                "text": "name the element style name",
                                "name": "param"
                            }],
                        "text": "the element style name"
                    }, {
                        "tags": [{
                                "text": "value the new CSS property to be set",
                                "name": "param"
                            }],
                        "text": "the new CSS property to be set"
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Sets the CSS property.",
                "tags": [{
                        "name": "param",
                        "text": "name the element style name"
                    }, {
                        "name": "param",
                        "text": "value the new CSS property to be set"
                    }]
            }
        },
        "getCSSProperty": {
            "complexType": {
                "signature": "(name: string) => Promise<string>",
                "parameters": [{
                        "tags": [{
                                "text": "name the element style property",
                                "name": "param"
                            }],
                        "text": "the element style property"
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<string>"
            },
            "docs": {
                "text": "Returns the value of a CSS property.",
                "tags": [{
                        "name": "param",
                        "text": "name the element style property"
                    }, {
                        "name": "returns",
                        "text": "the value of the property"
                    }]
            }
        },
        "refresh": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Refresh the element.",
                "tags": []
            }
        },
        "fire": {
            "complexType": {
                "signature": "(eventName: string, detail: object) => Promise<void>",
                "parameters": [{
                        "tags": [{
                                "text": "eventName the event name, in dash notation",
                                "name": "param"
                            }],
                        "text": "the event name, in dash notation"
                    }, {
                        "tags": [{
                                "text": "detail the event detail",
                                "name": "param"
                            }],
                        "text": "the event detail"
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Fire an widget event.",
                "tags": [{
                        "name": "param",
                        "text": "eventName the event name, in dash notation"
                    }, {
                        "name": "param",
                        "text": "detail the event detail"
                    }]
            }
        }
    }; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "checked",
            "methodName": "onCheckedChanged"
        }]; }
    static get listeners() { return [{
            "name": "tiChange",
            "method": "onTiChanged",
            "target": undefined,
            "capture": false,
            "passive": false
        }]; }
} //^ti-widget-radio\ti-widget-radio.tsx,205^
