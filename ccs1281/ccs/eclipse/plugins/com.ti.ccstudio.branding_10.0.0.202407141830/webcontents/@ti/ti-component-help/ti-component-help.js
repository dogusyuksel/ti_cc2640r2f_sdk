/**
 *  Copyright (c) 2020, Texas Instruments Incorporated
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  Redistributions of source code must retain the above copyright
 *  notice, this list of conditions and the following disclaimer.
 *  notice, this list of conditions and the following disclaimer in the
 *  documentation and/or other materials provided with the distribution.
 *  Neither the name of Texas Instruments Incorporated nor the names of
 *  its contributors may be used to endorse or promote products derived
 *  from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 *  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 *  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 *  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
import { h } from "@stencil/core"; //^ti-component-help\ti-component-help.tsx,30^
import { TiWidgetBase } from '../ti-widget-base/ti-widget-base'; //^ti-component-help\ti-component-help.tsx,32^
import { TiConsole as console } from '../ti-core-assets/lib/TiConsole.js'; //^ti-component-help\ti-component-help.tsx,34^
// components to hide from the help page
const hideComponents = ['ti-component-help', 'ti-widget-fragment-html']; //^ti-component-help\ti-component-help.tsx,37^
/**
 * `ti-component-help` is documentation site for all the component
 * information and properties within GUI Composer. Currently it shows
 * only Stencil components and uses ./components/stencil-docs.json
 * for this information, which is generated in the build step by Stencil.
 *
 * @demo ./index.html
 * @archetype <ti-component-help></ti-component-help>
 * @isHidden
*/
export class TiComponentHelp {
    constructor() {
        this.base = new ( // keep on separate line to enable sourcemapping   //^ti-component-help\ti-component-help.tsx,57^
        class extends TiWidgetBase {
            get element() {
                return this.parent.el; //^ti-component-help\ti-component-help.tsx,60^
            } //^ti-component-help\ti-component-help.tsx,61^
        })(this); //^ti-component-help\ti-component-help.tsx,62^
        this.manifestList = []; //^ti-component-help\ti-component-help.tsx,66^
        /**
         * The name of the widget selected. If empty, none is selected for display.
         */
        this.widgetName = ''; //^ti-component-help\ti-component-help.tsx,71^
        /**
         * The the HTML fragment code for the demo related to the widget selected.
         */
        this.demoHTML = ''; //^ti-component-help\ti-component-help.tsx,88^
        /**
         * Controls the tooltip that is displayed for this widget.
         * @order 210
         */
        this.tooltip = ''; //^ti-component-help\ti-component-help.tsx,251^
        // #endregion
        // #region ti-element-base/ti-element-base-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * Sets to `true` to hide the element, otherwise `false`.
         *
         * @order 200
         */
        this.hidden = false; //^ti-component-help\ti-component-help.tsx,301^
    }
    onWidgetNameChanged(newValue) {
        //trigger new component data replacement
        if (newValue) { //^ti-component-help\ti-component-help.tsx,75^
            const newComponent = this.componentList.find(x => {
                return x.tag === this.widgetName; //^ti-component-help\ti-component-help.tsx,77^
            }); //^ti-component-help\ti-component-help.tsx,78^
            // get demo info if it exists
            this.getDemoHTML(newComponent); //^ti-component-help\ti-component-help.tsx,80^
            this.targetComponent = newComponent; //^ti-component-help\ti-component-help.tsx,81^
        } //^ti-component-help\ti-component-help.tsx,82^
    } //^ti-component-help\ti-component-help.tsx,83^
    /*
    * Find the html code for the demo page for a selected widget if the `@demo` tag is
    * found in the docstring.
    */
    async getDemoHTML(newComponent) {
        if (newComponent.docsTags.findIndex((element) => element.name === 'demo') !== -1) { //^ti-component-help\ti-component-help.tsx,95^
            try { //^ti-component-help\ti-component-help.tsx,96^
                const response = await fetch('@ti/' + this.widgetName + '/demo/index.html'); //^ti-component-help\ti-component-help.tsx,97^
                if (!response.ok) { //^ti-component-help\ti-component-help.tsx,98^
                    // 404: page not found
                    throw new Error(`No demo for ${this.widgetName} at '@ti/${this.widgetName}'/demo/index.html' found`); //^ti-component-help\ti-component-help.tsx,100^
                }
                else { //^ti-component-help\ti-component-help.tsx,101^
                    this.demoHTML = await response.text(); //^ti-component-help\ti-component-help.tsx,102^
                } //^ti-component-help\ti-component-help.tsx,103^
            }
            catch (e) { //^ti-component-help\ti-component-help.tsx,104^
                // if failed to get response
                console.error('ti-component-help', e.message); //^ti-component-help\ti-component-help.tsx,106^
                this.demoHTML = ''; //^ti-component-help\ti-component-help.tsx,107^
            } //^ti-component-help\ti-component-help.tsx,108^
        }
        else { //^ti-component-help\ti-component-help.tsx,109^
            console.log('ti-component-help', 'no demo tag found'); //^ti-component-help\ti-component-help.tsx,110^
            this.demoHTML = ''; // no @demo tag found   //^ti-component-help\ti-component-help.tsx,111^
        } //^ti-component-help\ti-component-help.tsx,112^
    } //^ti-component-help\ti-component-help.tsx,113^
    async setManifest() {
        return await new Promise(resolve => {
            // get manifest sidebar information
            for (const component in this.componentList) { //^ti-component-help\ti-component-help.tsx,118^
                const tag = this.componentList[component].tag; //^ti-component-help\ti-component-help.tsx,119^
                // hide entries that need to be hidden
                if (!hideComponents.includes(tag)) { //^ti-component-help\ti-component-help.tsx,121^
                    this.manifestList.push(tag); //^ti-component-help\ti-component-help.tsx,122^
                } //^ti-component-help\ti-component-help.tsx,123^
            } //^ti-component-help\ti-component-help.tsx,124^
            resolve(this.manifestList.sort()); //^ti-component-help\ti-component-help.tsx,125^
        }); //^ti-component-help\ti-component-help.tsx,126^
    } //^ti-component-help\ti-component-help.tsx,127^
    async getComponentData() {
        try { //^ti-component-help\ti-component-help.tsx,130^
            // read in generated info in stencil-docs.json
            const response = await (await fetch('./stencil-docs.json')).json(); //^ti-component-help\ti-component-help.tsx,132^
            const stencilDocs = response; //^ti-component-help\ti-component-help.tsx,133^
            this.componentList = stencilDocs.components; //^ti-component-help\ti-component-help.tsx,134^
            await this.setManifest(); //^ti-component-help\ti-component-help.tsx,136^
            // set widget if name is put in the address ie: '/v3/components/#ti-widget-led'
            if (location.hash)
                this.widgetName = location.hash.slice(1); //^ti-component-help\ti-component-help.tsx,138^
        }
        catch (e) { //^ti-component-help\ti-component-help.tsx,140^
            console.error('ti-component-help', `Something went wrong: ${e.message}`); //^ti-component-help\ti-component-help.tsx,141^
        }
        ; //^ti-component-help\ti-component-help.tsx,142^
    } //^ti-component-help\ti-component-help.tsx,143^
    async componentWillLoad() {
        await this.getComponentData(); //^ti-component-help\ti-component-help.tsx,146^
    } //^ti-component-help\ti-component-help.tsx,147^
    render() {
        // JSXON
        if (this.widgetName) {
            return ([
                h("div", { class: "sidebar" },
                    h("h2", null, "GUI Composer"),
                    h("h3", null, "v3 Components"),
                    this.manifestList.map(components => h("li", { onClick: () => this.widgetName = components }, components))),
                h("div", { class: "documentation" },
                    h("h1", null, this.targetComponent.tag),
                    h("ti-widget-markdown", { class: "description", text: this.targetComponent.docs }),
                    h("ti-widget-fragment-html", { text: this.demoHTML }),
                    h("div", { hidden: this.targetComponent.props.length < 1 },
                        h("h2", null, "Properties"),
                        this.targetComponent.props.map(property => h("div", null,
                            h("h3", null, property.name),
                            h("ul", null,
                                h("b", null, "Type:"),
                                " ",
                                property.type),
                            h("ul", null,
                                h("b", null, "Default:"),
                                " ",
                                property.default),
                            h("ul", null, property.docs)))),
                    h("div", { hidden: this.targetComponent.events.length < 1 },
                        h("h2", null, "Events"),
                        this.targetComponent.events.map(event => h("div", null,
                            h("h3", null, event.event),
                            h("ul", null,
                                h("b", null, "Detail:"),
                                " ",
                                event.detail),
                            h("ul", null, event.docs)))),
                    h("div", { hidden: this.targetComponent.methods.length < 1 },
                        h("h2", null, "Methods"),
                        this.targetComponent.methods.map(method => h("div", null,
                            h("h3", null, method.name),
                            h("ul", null,
                                h("code", null, method.signature)),
                            h("ul", null, method.docs)))))
            ]);
        }
        else {
            return ([
                h("div", { class: "sidebar" },
                    h("h2", null, "GUI Composer"),
                    h("h3", null, "v3 Components"),
                    this.manifestList.map(components => h("li", { onClick: () => this.widgetName = components }, components))),
                h("div", { id: "titlePage", class: "documentation" },
                    h("h1", null, "GUI Composer v3 Component Documentation"))
            ]);
        }
        // JSXOFF
    } //^ti-component-help\ti-component-help.tsx,233^
    /**
     * Sets the CSS property.
     *
     * @param {string} name the element style name
     * @param {string} value the new CSS property to be set
     */
    async setCSSProperty(name, value) {
        return this['base'][`${this.setCSSProperty.name}`](name, value); //^ti-component-help\ti-component-help.tsx,261^
    } //^ti-component-help\ti-component-help.tsx,262^
    /**
     * Returns the value of a CSS property.
     *
     * @param {string} name the element style property
     * @returns {string} the value of the property
     */
    async getCSSProperty(name) {
        return this['base'][`${this.getCSSProperty.name}`](name); //^ti-component-help\ti-component-help.tsx,272^
    } //^ti-component-help\ti-component-help.tsx,273^
    /**
     * Refresh the element.
     */
    async refresh() {
        return this['base'][`${this.refresh.name}`](); //^ti-component-help\ti-component-help.tsx,280^
    } //^ti-component-help\ti-component-help.tsx,281^
    /**
     * Fire an widget event.
     *
     * @param {string} eventName the event name, in dash notation
     * @param detail the event detail
     */
    async fire(eventName, detail) {
        return this['base'][`${this.fire.name}`](eventName, detail); //^ti-component-help\ti-component-help.tsx,291^
    } //^ti-component-help\ti-component-help.tsx,292^
    static get is() { return "ti-component-help"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["ti-component-help.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["ti-component-help.css"]
    }; }
    static get properties() { return {
        "tooltip": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "210",
                        "name": "order"
                    }],
                "text": "Controls the tooltip that is displayed for this widget."
            },
            "attribute": "tooltip",
            "reflect": false,
            "defaultValue": "''"
        },
        "hidden": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "200",
                        "name": "order"
                    }],
                "text": "Sets to `true` to hide the element, otherwise `false`."
            },
            "attribute": "hidden",
            "reflect": true,
            "defaultValue": "false"
        }
    }; }
    static get states() { return {
        "widgetName": {},
        "demoHTML": {}
    }; }
    static get events() { return [{
            "method": "cssPropertyChanged",
            "name": "css-property-changed",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Event `css-property-changed`, with `detail: { name: string, value: string }`."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "setCSSProperty": {
            "complexType": {
                "signature": "(name: string, value: string) => Promise<void>",
                "parameters": [{
                        "tags": [{
                                "text": "name the element style name",
                                "name": "param"
                            }],
                        "text": "the element style name"
                    }, {
                        "tags": [{
                                "text": "value the new CSS property to be set",
                                "name": "param"
                            }],
                        "text": "the new CSS property to be set"
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Sets the CSS property.",
                "tags": [{
                        "name": "param",
                        "text": "name the element style name"
                    }, {
                        "name": "param",
                        "text": "value the new CSS property to be set"
                    }]
            }
        },
        "getCSSProperty": {
            "complexType": {
                "signature": "(name: string) => Promise<string>",
                "parameters": [{
                        "tags": [{
                                "text": "name the element style property",
                                "name": "param"
                            }],
                        "text": "the element style property"
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<string>"
            },
            "docs": {
                "text": "Returns the value of a CSS property.",
                "tags": [{
                        "name": "param",
                        "text": "name the element style property"
                    }, {
                        "name": "returns",
                        "text": "the value of the property"
                    }]
            }
        },
        "refresh": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Refresh the element.",
                "tags": []
            }
        },
        "fire": {
            "complexType": {
                "signature": "(eventName: string, detail: object) => Promise<void>",
                "parameters": [{
                        "tags": [{
                                "text": "eventName the event name, in dash notation",
                                "name": "param"
                            }],
                        "text": "the event name, in dash notation"
                    }, {
                        "tags": [{
                                "text": "detail the event detail",
                                "name": "param"
                            }],
                        "text": "the event detail"
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Fire an widget event.",
                "tags": [{
                        "name": "param",
                        "text": "eventName the event name, in dash notation"
                    }, {
                        "name": "param",
                        "text": "detail the event detail"
                    }]
            }
        }
    }; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "widgetName",
            "methodName": "onWidgetNameChanged"
        }]; }
} //^ti-component-help\ti-component-help.tsx,304^
