/**
 *  Copyright (c) 2020, Texas Instruments Incorporated
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  *   Redistributions of source code must retain the above copyright
 *  notice, this list of conditions and the following disclaimer.
 *  notice, this list of conditions and the following disclaimer in the
 *  documentation and/or other materials provided with the distribution.
 *  *   Neither the name of Texas Instruments Incorporated nor the names of
 *  its contributors may be used to endorse or promote products derived
 *  from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 *  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 *  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 *  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
import { h } from "@stencil/core"; //^ti-widget-input\ti-widget-input.tsx,29^
import { TiWidgetBaseIntermediateValue } from '../ti-widget-base/ti-widget-base-intermediate-value'; //^ti-widget-input\ti-widget-input.tsx,31^
import { DataConverter } from '../ti-core-databind/lib/CoreDatabind'; //^ti-widget-input\ti-widget-input.tsx,35^
/**
 * `ti-widget-input` is an editable text field.
 * @label Input
 * @group Inputs
 * @archetype <ti-widget-input></ti-widget-input>
 */
export class TiWidgetInput {
    constructor() {
        this.base = new ( //^ti-widget-input\ti-widget-input.tsx,52^
        class extends TiWidgetBaseIntermediateValue {
            get input() {
                return this.parent; //^ti-widget-input\ti-widget-input.tsx,55^
            } //^ti-widget-input\ti-widget-input.tsx,56^
            get element() {
                return this.input.el; //^ti-widget-input\ti-widget-input.tsx,59^
            } //^ti-widget-input\ti-widget-input.tsx,60^
            get value() {
                return this.input.displayValue; //^ti-widget-input\ti-widget-input.tsx,63^
            } //^ti-widget-input\ti-widget-input.tsx,64^
            onValueChanged(newValue, oldValue) {
                const editing = this.input.editing; //^ti-widget-input\ti-widget-input.tsx,67^
                const format = this.input.format; //^ti-widget-input\ti-widget-input.tsx,68^
                let value = newValue; //^ti-widget-input\ti-widget-input.tsx,69^
                if (format !== 'text') { //^ti-widget-input\ti-widget-input.tsx,71^
                    value = DataConverter.convert(newValue, 'string', 'number'); //^ti-widget-input\ti-widget-input.tsx,72^
                    if (editing && isNaN(value)) { //^ti-widget-input\ti-widget-input.tsx,73^
                        return; //^ti-widget-input\ti-widget-input.tsx,74^
                    } //^ti-widget-input\ti-widget-input.tsx,75^
                }
                else { //^ti-widget-input\ti-widget-input.tsx,76^
                    value = newValue; //^ti-widget-input\ti-widget-input.tsx,77^
                } //^ti-widget-input\ti-widget-input.tsx,78^
                this.input.value = value; //^ti-widget-input\ti-widget-input.tsx,80^
                this.input.valueChanged.emit({ value: value }); //^ti-widget-input\ti-widget-input.tsx,81^
            } //^ti-widget-input\ti-widget-input.tsx,82^
        } //^ti-widget-input\ti-widget-input.tsx,83^
        )(this); //^ti-widget-input\ti-widget-input.tsx,84^
        /**
         * The display format type.
         * @order 3
         */
        this.format = 'text'; //^ti-widget-input\ti-widget-input.tsx,96^
        this.editing = false; //^ti-widget-input\ti-widget-input.tsx,122^
        // #region ti-widget-base/ti-widget-base-intermediate-value-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * Controls whether or not intermediate changes due to the user's mouse dragging or typing are committed
         * to the value attribute. If intermediate changes are not allowed, then the value attribute will only
         * update when the user has finished dragging or entering text.
         * @order 10
         */
        this.intermediateChanges = false; //^ti-widget-input\ti-widget-input.tsx,179^
        /**
         * Controls the tooltip that is displayed for this widget.
         * @order 210
         */
        this.tooltip = ''; //^ti-widget-input\ti-widget-input.tsx,197^
        // #endregion
        // #region ti-element-base/ti-element-base-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * Sets to `true` to hide the element, otherwise `false`.
         *
         * @order 200
         */
        this.hidden = false; //^ti-widget-input\ti-widget-input.tsx,247^
        // #endregion
        // #region ti-widget-base/ti-widget-base-title-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * The widget caption text.
         * @order 207
         */
        this.caption = ''; //^ti-widget-input\ti-widget-input.tsx,255^
        /**
         * The widget info icon help text.
         * @order 208
         */
        this.infoText = ''; //^ti-widget-input\ti-widget-input.tsx,261^
        // #endregion
        // #region ti-widget-base/ti-widget-base-disabled-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * Controls the widget disabled state.
         * @order 202
         */
        this.disabled = false; //^ti-widget-input\ti-widget-input.tsx,269^
        // #endregion
        // #region ti-widget-base/ti-widget-base-readonly-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * Controls the widget readonly state.
         * @order 201
         */
        this.readonly = false; //^ti-widget-input\ti-widget-input.tsx,277^
    }
    render() {
        return this.base.render(//^ti-widget-input\ti-widget-input.tsx,125^
        h("ti-input", { value: this.displayValue, placeholder: this.placeholder, disabled: this.disabled, readonly: this.readonly }, "   //^ti-widget-input\\ti-widget-input.tsx,130^"), //^ti-widget-input\ti-widget-input.tsx,131^
        { caption: this.caption, infoText: this.infoText } //^ti-widget-input\ti-widget-input.tsx,132^
        ); //^ti-widget-input\ti-widget-input.tsx,133^
    } //^ti-widget-input\ti-widget-input.tsx,134^
    componentWillLoad() {
        this.updateDisplayValue(); //^ti-widget-input\ti-widget-input.tsx,137^
    } //^ti-widget-input\ti-widget-input.tsx,138^
    onTiChanged(event) {
        this.editing = !event.detail.commit; //^ti-widget-input\ti-widget-input.tsx,142^
        this.base.onIntermediateValueChanged(event.detail.value, !this.editing); //^ti-widget-input\ti-widget-input.tsx,143^
    } //^ti-widget-input\ti-widget-input.tsx,144^
    onValueChanged(newValue) {
        this.updateDisplayValue(); //^ti-widget-input\ti-widget-input.tsx,148^
    } //^ti-widget-input\ti-widget-input.tsx,149^
    onFormatChanged(newValue) {
        this.updateDisplayValue(); //^ti-widget-input\ti-widget-input.tsx,153^
    } //^ti-widget-input\ti-widget-input.tsx,154^
    onPrecisionChanged(newValue) {
        this.updateDisplayValue(); //^ti-widget-input\ti-widget-input.tsx,158^
    } //^ti-widget-input\ti-widget-input.tsx,159^
    updateDisplayValue() {
        if (this.value !== null && this.value !== undefined) { //^ti-widget-input\ti-widget-input.tsx,162^
            if (this.format !== 'text') { //^ti-widget-input\ti-widget-input.tsx,163^
                this.displayValue = DataConverter.convert(this.value, typeof this.value, this.format, this.precision); //^ti-widget-input\ti-widget-input.tsx,164^
            }
            else { //^ti-widget-input\ti-widget-input.tsx,165^
                this.displayValue = this.value.toString(); //^ti-widget-input\ti-widget-input.tsx,166^
            } //^ti-widget-input\ti-widget-input.tsx,167^
        } //^ti-widget-input\ti-widget-input.tsx,168^
    } //^ti-widget-input\ti-widget-input.tsx,169^
    /**
     * Sets the CSS property.
     *
     * @param {string} name the element style name
     * @param {string} value the new CSS property to be set
     */
    async setCSSProperty(name, value) {
        return this['base'][`${this.setCSSProperty.name}`](name, value); //^ti-widget-input\ti-widget-input.tsx,207^
    } //^ti-widget-input\ti-widget-input.tsx,208^
    /**
     * Returns the value of a CSS property.
     *
     * @param {string} name the element style property
     * @returns {string} the value of the property
     */
    async getCSSProperty(name) {
        return this['base'][`${this.getCSSProperty.name}`](name); //^ti-widget-input\ti-widget-input.tsx,218^
    } //^ti-widget-input\ti-widget-input.tsx,219^
    /**
     * Refresh the element.
     */
    async refresh() {
        return this['base'][`${this.refresh.name}`](); //^ti-widget-input\ti-widget-input.tsx,226^
    } //^ti-widget-input\ti-widget-input.tsx,227^
    /**
     * Fire an widget event.
     *
     * @param {string} eventName the event name, in dash notation
     * @param detail the event detail
     */
    async fire(eventName, detail) {
        return this['base'][`${this.fire.name}`](eventName, detail); //^ti-widget-input\ti-widget-input.tsx,237^
    } //^ti-widget-input\ti-widget-input.tsx,238^
    static get is() { return "ti-widget-input"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["ti-widget-input.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["ti-widget-input.css"]
    }; }
    static get properties() { return {
        "value": {
            "type": "any",
            "mutable": false,
            "complexType": {
                "original": "ValueType",
                "resolved": "number | string",
                "references": {
                    "ValueType": {
                        "location": "local"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "2",
                        "name": "order"
                    }],
                "text": "The input value."
            },
            "attribute": "value",
            "reflect": false
        },
        "format": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "FormatType",
                "resolved": "\"binary\" | \"dec\" | \"exp\" | \"hex\" | \"q\" | \"text\"",
                "references": {
                    "FormatType": {
                        "location": "local"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "3",
                        "name": "order"
                    }],
                "text": "The display format type."
            },
            "attribute": "format",
            "reflect": false,
            "defaultValue": "'text'"
        },
        "precision": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [{
                        "text": "4",
                        "name": "order"
                    }],
                "text": "The display format precision, only valid for numeric format type.<br><br>\n\n`binary` minimum digits with zero extended.<br>\n`dec` number of decimal places to round to.<br>\n`exp` number of decimal places to round to.<br>\n`hex` minimum digits with zero extended.<br>\n`q` the number of bits used to designate the fractional portion of the number."
            },
            "attribute": "precision",
            "reflect": false
        },
        "placeholder": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "5",
                        "name": "order"
                    }],
                "text": "Placeholder text when input is empty."
            },
            "attribute": "placeholder",
            "reflect": false
        },
        "intermediateChanges": {
            "type": "boolean",
            "mutable": true,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "10",
                        "name": "order"
                    }],
                "text": "Controls whether or not intermediate changes due to the user's mouse dragging or typing are committed\nto the value attribute. If intermediate changes are not allowed, then the value attribute will only\nupdate when the user has finished dragging or entering text."
            },
            "attribute": "intermediate-changes",
            "reflect": false,
            "defaultValue": "false"
        },
        "tooltip": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "210",
                        "name": "order"
                    }],
                "text": "Controls the tooltip that is displayed for this widget."
            },
            "attribute": "tooltip",
            "reflect": false,
            "defaultValue": "''"
        },
        "hidden": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "200",
                        "name": "order"
                    }],
                "text": "Sets to `true` to hide the element, otherwise `false`."
            },
            "attribute": "hidden",
            "reflect": true,
            "defaultValue": "false"
        },
        "caption": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "207",
                        "name": "order"
                    }],
                "text": "The widget caption text."
            },
            "attribute": "caption",
            "reflect": true,
            "defaultValue": "''"
        },
        "infoText": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "208",
                        "name": "order"
                    }],
                "text": "The widget info icon help text."
            },
            "attribute": "info-text",
            "reflect": true,
            "defaultValue": "''"
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "202",
                        "name": "order"
                    }],
                "text": "Controls the widget disabled state."
            },
            "attribute": "disabled",
            "reflect": true,
            "defaultValue": "false"
        },
        "readonly": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "201",
                        "name": "order"
                    }],
                "text": "Controls the widget readonly state."
            },
            "attribute": "readonly",
            "reflect": true,
            "defaultValue": "false"
        }
    }; }
    static get states() { return {
        "displayValue": {},
        "editing": {}
    }; }
    static get events() { return [{
            "method": "valueChanged",
            "name": "value-changed",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Fired when the `value` property changed."
            },
            "complexType": {
                "original": "{ value: ValueType }",
                "resolved": "{ value: ValueType; }",
                "references": {
                    "ValueType": {
                        "location": "local"
                    }
                }
            }
        }, {
            "method": "cssPropertyChanged",
            "name": "css-property-changed",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Event `css-property-changed`, with `detail: { name: string, value: string }`."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "setCSSProperty": {
            "complexType": {
                "signature": "(name: string, value: string) => Promise<void>",
                "parameters": [{
                        "tags": [{
                                "text": "name the element style name",
                                "name": "param"
                            }],
                        "text": "the element style name"
                    }, {
                        "tags": [{
                                "text": "value the new CSS property to be set",
                                "name": "param"
                            }],
                        "text": "the new CSS property to be set"
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Sets the CSS property.",
                "tags": [{
                        "name": "param",
                        "text": "name the element style name"
                    }, {
                        "name": "param",
                        "text": "value the new CSS property to be set"
                    }]
            }
        },
        "getCSSProperty": {
            "complexType": {
                "signature": "(name: string) => Promise<string>",
                "parameters": [{
                        "tags": [{
                                "text": "name the element style property",
                                "name": "param"
                            }],
                        "text": "the element style property"
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<string>"
            },
            "docs": {
                "text": "Returns the value of a CSS property.",
                "tags": [{
                        "name": "param",
                        "text": "name the element style property"
                    }, {
                        "name": "returns",
                        "text": "the value of the property"
                    }]
            }
        },
        "refresh": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Refresh the element.",
                "tags": []
            }
        },
        "fire": {
            "complexType": {
                "signature": "(eventName: string, detail: object) => Promise<void>",
                "parameters": [{
                        "tags": [{
                                "text": "eventName the event name, in dash notation",
                                "name": "param"
                            }],
                        "text": "the event name, in dash notation"
                    }, {
                        "tags": [{
                                "text": "detail the event detail",
                                "name": "param"
                            }],
                        "text": "the event detail"
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Fire an widget event.",
                "tags": [{
                        "name": "param",
                        "text": "eventName the event name, in dash notation"
                    }, {
                        "name": "param",
                        "text": "detail the event detail"
                    }]
            }
        }
    }; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "value",
            "methodName": "onValueChanged"
        }, {
            "propName": "format",
            "methodName": "onFormatChanged"
        }, {
            "propName": "precision",
            "methodName": "onPrecisionChanged"
        }]; }
    static get listeners() { return [{
            "name": "tiChange",
            "method": "onTiChanged",
            "target": undefined,
            "capture": false,
            "passive": false
        }]; }
} //^ti-widget-input\ti-widget-input.tsx,280^
