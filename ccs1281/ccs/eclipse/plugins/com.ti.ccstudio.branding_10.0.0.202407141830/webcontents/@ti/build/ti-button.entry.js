import { r as registerInstance, h, H as Host, c as getElement } from './core-800e68f4.js';

var ButtonStyle;
(function (ButtonStyle) {
    ButtonStyle["primary"] = "primary";
    ButtonStyle["secondary"] = "secondary";
    ButtonStyle["text"] = "text";
})(ButtonStyle || (ButtonStyle = {}));
var ButtonSize;
(function (ButtonSize) {
    ButtonSize["compact"] = "compact";
    ButtonSize["normal"] = "normal";
})(ButtonSize || (ButtonSize = {}));

const Button = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this._size = ButtonSize.normal;
        this._style = ButtonStyle.primary;
        /**
         * Property for button style and size variants.<br>
         * Style can only be: `primary`, `secondary`, or `text`. Style is `primary` by default.<br>
         * Can also include size as either `normal` or `compact`. Size is `normal` by default.<br>
         * When both are specified they should be separated by a space as in `primary compact`.
         */
        this.appearance = ButtonStyle.primary;
        /**
         * link id required for metrics
         */
        this.dataLid = "";
    }
    handleAppearanceChange(appearance) {
        // transform appearance string into an array of options
        const appearances = appearance.toLowerCase().split(/\s+/);
        if (!appearances.some(style => {
            if ([ButtonStyle.primary, ButtonStyle.secondary, ButtonStyle.text].indexOf(style) >= 0) {
                this._style = style;
                return true;
            }
            return false;
        })) {
            this._style = ButtonStyle.primary; // default style
        }
        if (!appearances.some(size => {
            if (size === ButtonSize.compact) {
                this._size = size;
                return true;
            }
            return false;
        })) {
            this._size = ButtonSize.normal; // default size
        }
    }
    componentWillLoad() {
        this._init();
        this.handleAppearanceChange(this.appearance);
    }
    componentWillUpdate() {
        this._init();
    }
    _init() {
        // check for an anchor element
        const anchorEl = this.hostElement.querySelector('a');
        this._hasAnchor = !!anchorEl;
        if (this._hasAnchor) {
            // for non-shadow support apply class because ::slotted() doesn't work
            if (!document.head.attachShadow) {
                anchorEl.className = 'ti-button-content sc-ti-button'; // replace user classes
            }
            else {
                anchorEl.className = ''; // remove any user classes
            }
            // if ti-button is disabled, disabled the anchor click
            if (this.disabled) {
                anchorEl.onclick = (event) => event.preventDefault();
            }
        }
        // if ti-button is disabled - disable any click handler
        if (this.disabled && this.hostElement.onclick) {
            this.hostElement.onclick = null;
        }
    }
    render() {
        return (h(Host, { class: {
                'ti-button-compact': this._size === ButtonSize.compact,
                'ti-button-disabled': this.disabled,
                'ti-button-primary': this._style === ButtonStyle.primary,
                'ti-button-secondary': this._style === ButtonStyle.secondary,
                'ti-button-text': this._style === ButtonStyle.text
            } }, 
        // Choose which template variant to return based on the hasAnchor property
        (this._hasAnchor) ?
            // place a slotted anchor alone
            h("slot", null)
            // place other slotted content in a button element
            : h("button", { class: "ti-button-content", disabled: this.disabled }, h("slot", null))));
    }
    get hostElement() { return getElement(this); }
    static get watchers() { return {
        "appearance": ["handleAppearanceChange"]
    }; }
    static get style() { return "/*\n* ==========================================================================\n* _polaris.colors.scss\n* This file imports the Polaris color palette.\n* ==========================================================================\n*/\n/*\n* --------------------------------------------------------------------------\n* color palette\n* --------------------------------------------------------------------------\n*/\n/*\n* ==========================================================================\n* _polaris.mixins.scss\n* This file contains Polaris mixins\n* prefix with mix-\n* ==========================================================================\n*/\n/*\n* ==========================================================================\n* _polaris-variables.scss\n* This file contains global-css variables and is using component based naming.\n*\n* Naming structure: [application(namespacing)]-[type]-[function]-[property]\n* ==========================================================================\n*/\n/*\n* --------------------------------------------------------------------------\n* Color variables\n* --------------------------------------------------------------------------\n*/\n/*\n* Polaris Component color definitions\n*/\n/*\n* Polaris Card Background color definitions\n* Ref: (http://polaris/01-ui-style-foundations.html#02-style-principles.03-background-color)\n*/\n/*\n* --------------------------------------------------------------------------\n* shape variables\n* --------------------------------------------------------------------------\n*/\n/*\n* Polaris border radius definitions\n* Ref: (http://polaris/01-ui-style-foundations.html#02-style-principles.05-border-radius)\n*/\n/*\n* Polaris box shadow definitions\n* Ref: (http://polaris/01-ui-style-foundations.html#02-style-principles.06-box-shadow)\n*/\n/*\n* --------------------------------------------------------------------------\n* font variables\n* Ref: (http://polaris/01-ui-style-foundations.html#07-typography-fundamentals)\n* --------------------------------------------------------------------------\n*/\n/*\n* Font stack definitions\n*/\n/*\n* Font families\n*/\n/*\n* Root HTML and BODY tag values\n*/\n/*\n* Font size cadence values\n*/\n/*\n* Standard Paragraph font sizes\n*/\n/*\n* Header tag font sizes\n*/\n/*\n* Line height cadence values\n*/\n/*\n* Font weight values\n*/\n/*\n* --------------------------------------------------------------------------\n* spacing values variables\n* --------------------------------------------------------------------------\n*/\n/*\n* Base spacing cadence values\n* (base grid size x multiplier) / root font size = rem value\n*/\n/*\n* Component/element specific spacing\n*/\n/*\n* --------------------------------------------------------------------------\n* page layout variables\n* --------------------------------------------------------------------------\n*/\n/*\n* --------------------------------------------------------------------------\n* animation variables\n* ref: (http://polaris/01-ui-style-foundations.html#04-motion)\n* --------------------------------------------------------------------------\n*/\n/*\n* Animation easing types\n*/\n/*\n* Animation timings\n*/\n/*\n* --------------------------------------------------------------------------\n* icon size variables\n* --------------------------------------------------------------------------\n*/\n/*\n* --------------------------------------------------------------------------\n* legacy variable names\n* - May still be used in other component repos\n* --------------------------------------------------------------------------\n*/\n/* Font variables */\n/* Space size variables */\n/*\n* ==========================================================================\n* _ti-core.scss\n*\n*  This files contains mixins uses within TI Webcomponents\n* ==========================================================================\n*/\n/*\n * Base style for trigger element\n */\n/*\n* Tooltip trigger main mixin.\n* Use to add style to trigger tooltip display.\n* For example:\n*\n* .tooltip-trigger:hover {\n*     \@include ti-tooltip-trigger();\n* }\n*\n* Typically not used directly, but via the other mixins below.\n*/\n/*\n* Mixin for adding style to trigger tooltip display to\n* an element selector on hover, focus and checked.\n* For example:\n*\n* .tooltip-trigger {\n     \@include ti-tooltip-trigger-element();\n* }\n*/\n/*\n* Mixin for adding style to trigger tooltip display to\n* a web component shadow host on hover, focus and checked.\n* Use in the web component style sheet outside of :host{}.\n* For example:\n*\n* \@include ti-tooltip-trigger-host();\n* :host {\n*     ...\n* }\n*\n* The optional $selector parameter allows a CSS selector\n* which will be added to the :host selector to allow control\n* over the host trigger via a style class or another selector.\n* For example:\n*\n* \@include ti-tooltip-trigger-host(\'.ti-tooltip-trigger\');\n*\n* creates code like\n*\n* :host(.ti-tooltip-trigger:hover) {\n*     ...\n* }\n*\n* instead of\n*\n* :host(:hover) {\n*     ...\n* }\n*/\n/*\n* ==========================================================================\n* _polaris-variables.scss\n* This file contains global-css variables and is using component based naming.\n*\n* Naming structure: [application(namespacing)]-[type]-[function]-[property]\n* ==========================================================================\n*/\n/*\n* --------------------------------------------------------------------------\n* Color variables\n* --------------------------------------------------------------------------\n*/\n/*\n* Polaris Component color definitions\n*/\n/*\n* Polaris Card Background color definitions\n* Ref: (http://polaris/01-ui-style-foundations.html#02-style-principles.03-background-color)\n*/\n/*\n* --------------------------------------------------------------------------\n* shape variables\n* --------------------------------------------------------------------------\n*/\n/*\n* Polaris border radius definitions\n* Ref: (http://polaris/01-ui-style-foundations.html#02-style-principles.05-border-radius)\n*/\n/*\n* Polaris box shadow definitions\n* Ref: (http://polaris/01-ui-style-foundations.html#02-style-principles.06-box-shadow)\n*/\n/*\n* --------------------------------------------------------------------------\n* font variables\n* Ref: (http://polaris/01-ui-style-foundations.html#07-typography-fundamentals)\n* --------------------------------------------------------------------------\n*/\n/*\n* Font stack definitions\n*/\n/*\n* Font families\n*/\n/*\n* Root HTML and BODY tag values\n*/\n/*\n* Font size cadence values\n*/\n/*\n* Standard Paragraph font sizes\n*/\n/*\n* Header tag font sizes\n*/\n/*\n* Line height cadence values\n*/\n/*\n* Font weight values\n*/\n/*\n* --------------------------------------------------------------------------\n* spacing values variables\n* --------------------------------------------------------------------------\n*/\n/*\n* Base spacing cadence values\n* (base grid size x multiplier) / root font size = rem value\n*/\n/*\n* Component/element specific spacing\n*/\n/*\n* --------------------------------------------------------------------------\n* page layout variables\n* --------------------------------------------------------------------------\n*/\n/*\n* --------------------------------------------------------------------------\n* animation variables\n* ref: (http://polaris/01-ui-style-foundations.html#04-motion)\n* --------------------------------------------------------------------------\n*/\n/*\n* Animation easing types\n*/\n/*\n* Animation timings\n*/\n/*\n* --------------------------------------------------------------------------\n* icon size variables\n* --------------------------------------------------------------------------\n*/\n/*\n* --------------------------------------------------------------------------\n* legacy variable names\n* - May still be used in other component repos\n* --------------------------------------------------------------------------\n*/\n/* Font variables */\n/* Space size variables */\n/*\n * ==========================================================================\n * button.scss\n * Imported from globalsass from Kayin\n * Last edited by Gord Tranter 2019-02-13\n * ==========================================================================\n */\n/*\n * --------------------------------------------------------------------------\n * Common button element styles map\n *\n * This map contains the style values for the various button style options. Format:\n *   <style-name>: (\n *       color: <color-value>,\n *       background-color: <color-value>,\n *       border-color: <color-value>,\n *       font-weight: <font-weight-value>,\n *       hover: (\n *           background-color: <color-value>,\n *           border-color: <color-value>\n *       )\n *   )\n * --------------------------------------------------------------------------\n */\n/*\n * This is the placeholder for common button element styles\n */\n:host(.ti-button-text) .ti-button-content,\n:host(.ti-button-text) ::slotted(a), :host(.ti-button-secondary) .ti-button-content,\n:host(.ti-button-secondary) ::slotted(a), :host(.ti-button-primary) .ti-button-content,\n:host(.ti-button-primary) ::slotted(a) {\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  display: inline-block;\n  cursor: pointer;\n  white-space: nowrap;\n  border-width: 1px;\n  border-style: solid;\n  border-radius: 2px;\n  font-family: \"Roboto\", \"Franklin Gothic Medium\", Tahoma, sans-serif;\n  font-size: inherit;\n  -webkit-transition: all 100ms linear;\n  transition: all 100ms linear;\n}\n\n/*\n * This mixin sets up the colors used for button variations\n * Usage: \@apply-ti-button-style($styleName);\n * Valid $styleName values are the keys of $buttons-style-map.\n */\n/* adjustments for bg svg icon */\n:host {\n  display: inline-block;\n  font-size: 14px;\n}\n:host button,\n:host ::slotted(a) {\n  width: 100%;\n  -webkit-box-sizing: border-box !important;\n  box-sizing: border-box !important;\n  text-align: center;\n}\n:host button::-moz-focus-inner {\n  border: none;\n}\n:host ::slotted(ti-svg-icon) {\n  margin-right: 0.5rem;\n  fill: inherit !important;\n}\n:host .ti-button-content:hover,\n:host .ti-button-content:focus,\n:host ::slotted(a:hover),\n:host ::slotted(a:focus) {\n  outline: none;\n}\n\n/*\n * --------------------------------------------------------------------------\n * Set the button styles according to variation\n * --------------------------------------------------------------------------\n */\n:host(.ti-button-primary) .ti-button-content,\n:host(.ti-button-primary) ::slotted(a) {\n  text-decoration: none !important;\n  color: #ffffff !important;\n  fill: #ffffff !important;\n  background-color: #cc0000 !important;\n  border-color: #cc0000;\n  font-weight: 500;\n}\n:host(.ti-button-primary) .ti-button-content:hover,\n:host(.ti-button-primary) .ti-button-content:focus,\n:host(.ti-button-primary) ::slotted(a:hover),\n:host(.ti-button-primary) ::slotted(a:focus) {\n  text-decoration: none !important;\n  color: #ffffff !important;\n  fill: #ffffff !important;\n  background-color: #ee0000 !important;\n  border-color: #ee0000 !important;\n}\n:host(.ti-button-primary) ::slotted(ti-svg-icon) {\n  -webkit-filter: brightness(0) saturate(100%) invert(100%) sepia(9%) saturate(530%) hue-rotate(245deg) brightness(115%) contrast(100%);\n  filter: brightness(0) saturate(100%) invert(100%) sepia(9%) saturate(530%) hue-rotate(245deg) brightness(115%) contrast(100%);\n}\n\n:host(.ti-button-primary.ti-button-disabled) .ti-button-content,\n:host(.ti-button-primary.ti-button-disabled) ::slotted(a) {\n  color: #ffffff !important;\n  fill: #ffffff !important;\n  background-color: #cccccc !important;\n  border-color: #cccccc !important;\n}\n:host(.ti-button-primary.ti-button-disabled) .ti-button-content:hover,\n:host(.ti-button-primary.ti-button-disabled) .ti-button-content:focus,\n:host(.ti-button-primary.ti-button-disabled) ::slotted(a:hover),\n:host(.ti-button-primary.ti-button-disabled) ::slotted(a:focus) {\n  text-decoration: none !important;\n  cursor: not-allowed;\n  color: #ffffff !important;\n  fill: #ffffff !important;\n  background-color: #cccccc !important;\n  border-color: #cccccc !important;\n}\n\n:host(.ti-button-secondary) .ti-button-content,\n:host(.ti-button-secondary) ::slotted(a) {\n  text-decoration: none !important;\n  color: #cc0000 !important;\n  fill: #cc0000 !important;\n  background-color: #ffffff !important;\n  border-color: #cc0000;\n  font-weight: 500;\n}\n:host(.ti-button-secondary) .ti-button-content:hover,\n:host(.ti-button-secondary) .ti-button-content:focus,\n:host(.ti-button-secondary) ::slotted(a:hover),\n:host(.ti-button-secondary) ::slotted(a:focus) {\n  text-decoration: none !important;\n  color: #ffffff !important;\n  fill: #ffffff !important;\n  background-color: #ee0000 !important;\n  border-color: #ee0000 !important;\n}\n:host(.ti-button-secondary) ::slotted(ti-svg-icon) {\n  -webkit-filter: brightness(0) saturate(100%) invert(10%) sepia(99%) saturate(5383%) hue-rotate(2deg) brightness(90%) contrast(112%);\n  filter: brightness(0) saturate(100%) invert(10%) sepia(99%) saturate(5383%) hue-rotate(2deg) brightness(90%) contrast(112%);\n}\n\n:host(.ti-button-secondary:hover) ::slotted(ti-svg-icon) {\n  -webkit-filter: brightness(0) saturate(100%) invert(100%) sepia(9%) saturate(530%) hue-rotate(245deg) brightness(115%) contrast(100%);\n  filter: brightness(0) saturate(100%) invert(100%) sepia(9%) saturate(530%) hue-rotate(245deg) brightness(115%) contrast(100%);\n}\n\n:host(.ti-button-secondary.ti-button-disabled) .ti-button-content,\n:host(.ti-button-secondary.ti-button-disabled) ::slotted(a) {\n  color: #cccccc !important;\n  fill: #cccccc !important;\n  background-color: #ffffff !important;\n  border-color: #cccccc !important;\n}\n:host(.ti-button-secondary.ti-button-disabled) .ti-button-content:hover,\n:host(.ti-button-secondary.ti-button-disabled) .ti-button-content:focus,\n:host(.ti-button-secondary.ti-button-disabled) ::slotted(a:hover),\n:host(.ti-button-secondary.ti-button-disabled) ::slotted(a:focus) {\n  text-decoration: none !important;\n  cursor: not-allowed;\n  color: #cccccc !important;\n  fill: #cccccc !important;\n  background-color: #ffffff !important;\n  border-color: #cccccc !important;\n}\n:host(.ti-button-secondary.ti-button-disabled) ::slotted(ti-svg-icon) {\n  -webkit-filter: brightness(0) saturate(100%) invert(100%) sepia(0%) saturate(4840%) hue-rotate(66deg) brightness(92%) contrast(72%);\n  filter: brightness(0) saturate(100%) invert(100%) sepia(0%) saturate(4840%) hue-rotate(66deg) brightness(92%) contrast(72%);\n}\n\n:host(.ti-button-text) .ti-button-content,\n:host(.ti-button-text) ::slotted(a) {\n  text-decoration: none !important;\n  color: #007c8c !important;\n  fill: #007c8c !important;\n  background-color: transparent !important;\n  border-color: transparent;\n  font-weight: 400;\n}\n:host(.ti-button-text) .ti-button-content:hover,\n:host(.ti-button-text) .ti-button-content:focus,\n:host(.ti-button-text) ::slotted(a:hover),\n:host(.ti-button-text) ::slotted(a:focus) {\n  text-decoration: underline !important;\n  color: #007c8c !important;\n  fill: #007c8c !important;\n  background-color: transparent !important;\n  border-color: transparent !important;\n}\n:host(.ti-button-text) ::slotted(ti-svg-icon) {\n  -webkit-filter: brightness(0) saturate(100%) invert(27%) sepia(19%) saturate(1803%) hue-rotate(145deg) brightness(94%) contrast(91%);\n  filter: brightness(0) saturate(100%) invert(27%) sepia(19%) saturate(1803%) hue-rotate(145deg) brightness(94%) contrast(91%);\n}\n\n:host(.ti-button-text.ti-button-disabled) .ti-button-content,\n:host(.ti-button-text.ti-button-disabled) ::slotted(a) {\n  color: #cccccc !important;\n  fill: #cccccc !important;\n  background-color: transparent !important;\n  border-color: transparent !important;\n}\n:host(.ti-button-text.ti-button-disabled) .ti-button-content:hover,\n:host(.ti-button-text.ti-button-disabled) .ti-button-content:focus,\n:host(.ti-button-text.ti-button-disabled) ::slotted(a:hover),\n:host(.ti-button-text.ti-button-disabled) ::slotted(a:focus) {\n  text-decoration: none !important;\n  cursor: not-allowed;\n  color: #cccccc !important;\n  fill: #cccccc !important;\n  background-color: transparent !important;\n  border-color: transparent !important;\n}\n:host(.ti-button-text.ti-button-disabled) ::slotted(ti-svg-icon) {\n  -webkit-filter: brightness(0) saturate(100%) invert(100%) sepia(0%) saturate(4840%) hue-rotate(66deg) brightness(92%) contrast(72%);\n  filter: brightness(0) saturate(100%) invert(100%) sepia(0%) saturate(4840%) hue-rotate(66deg) brightness(92%) contrast(72%);\n}\n\n:host(:not(.ti-button-compact)) .ti-button-content,\n:host(:not(.ti-button-compact)) ::slotted(a) {\n  padding: 0 1rem;\n  line-height: 39px;\n  height: 40px;\n}\n\n:host(.ti-button-compact) .ti-button-content,\n:host(.ti-button-compact) ::slotted(a) {\n  padding: 0 0.5rem;\n  line-height: 32px;\n  height: 32px;\n}"; }
};

export { Button as ti_button };
