import { r as registerInstance, d as createEvent, h, c as getElement } from './core-800e68f4.js';
import '../ti-core-assets/lib/TiUtils';
import { T as TiWidgetBase } from './ti-widget-base-fe722328.js';
import '../ti-core-assets/lib/TiFiles';
import '../ti-core-assets/lib/TiConsole';
import '../ti-core-assets/lib/TiLocalStorage';
import { TiConsole } from '../ti-core-assets/lib/TiConsole.js';

// components to hide from the help page
const hideComponents = ['ti-component-help', 'ti-widget-fragment-html']; 
const TiComponentHelp = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.base = new ( // keep on separate line to enable sourcemapping   
        class extends TiWidgetBase {
            get element() {
                return this.parent.el; 
            } 
        })(this); 
        this.manifestList = []; 
        /**
         * The name of the widget selected. If empty, none is selected for display.
         */
        this.widgetName = ''; 
        /**
         * The the HTML fragment code for the demo related to the widget selected.
         */
        this.demoHTML = ''; 
        /**
         * Controls the tooltip that is displayed for this widget.
         * @order 210
         */
        this.tooltip = ''; 
        // #endregion
        // #region ti-element-base/ti-element-base-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * Sets to `true` to hide the element, otherwise `false`.
         *
         * @order 200
         */
        this.hidden = false; 
        this.cssPropertyChanged = createEvent(this, "css-property-changed", 7);
    }
    onWidgetNameChanged(newValue) {
        //trigger new component data replacement
        if (newValue) { 
            const newComponent = this.componentList.find(x => {
                return x.tag === this.widgetName; 
            }); 
            // get demo info if it exists
            this.getDemoHTML(newComponent); 
            this.targetComponent = newComponent; 
        } 
    } 
    /*
    * Find the html code for the demo page for a selected widget if the `@demo` tag is
    * found in the docstring.
    */
    async getDemoHTML(newComponent) {
        if (newComponent.docsTags.findIndex((element) => element.name === 'demo') !== -1) { 
            try { 
                const response = await fetch('@ti/' + this.widgetName + '/demo/index.html'); 
                if (!response.ok) { 
                    // 404: page not found
                    throw new Error(`No demo for ${this.widgetName} at '@ti/${this.widgetName}'/demo/index.html' found`); 
                }
                else { 
                    this.demoHTML = await response.text(); 
                } 
            }
            catch (e) { 
                // if failed to get response
                TiConsole.error('ti-component-help', e.message); 
                this.demoHTML = ''; 
            } 
        }
        else { 
            TiConsole.log('ti-component-help', 'no demo tag found'); 
            this.demoHTML = ''; // no @demo tag found   
        } 
    } 
    async setManifest() {
        return await new Promise(resolve => {
            // get manifest sidebar information
            for (const component in this.componentList) { 
                const tag = this.componentList[component].tag; 
                // hide entries that need to be hidden
                if (!hideComponents.includes(tag)) { 
                    this.manifestList.push(tag); 
                } 
            } 
            resolve(this.manifestList.sort()); 
        }); 
    } 
    async getComponentData() {
        try { 
            // read in generated info in stencil-docs.json
            const response = await (await fetch('./stencil-docs.json')).json(); 
            const stencilDocs = response; 
            this.componentList = stencilDocs.components; 
            await this.setManifest(); 
            // set widget if name is put in the address ie: '/v3/components/#ti-widget-led'
            if (location.hash)
                this.widgetName = location.hash.slice(1); 
        }
        catch (e) { 
            TiConsole.error('ti-component-help', `Something went wrong: ${e.message}`); 
        }
        ; 
    } 
    async componentWillLoad() {
        await this.getComponentData(); 
    } 
    render() {
        // JSXON
        if (this.widgetName) {
            return ([
                h("div", { class: "sidebar" }, h("h2", null, "GUI Composer"), h("h3", null, "v3 Components"), this.manifestList.map(components => h("li", { onClick: () => this.widgetName = components }, components))),
                h("div", { class: "documentation" }, h("h1", null, this.targetComponent.tag), h("ti-widget-markdown", { class: "description", text: this.targetComponent.docs }), h("ti-widget-fragment-html", { text: this.demoHTML }), h("div", { hidden: this.targetComponent.props.length < 1 }, h("h2", null, "Properties"), this.targetComponent.props.map(property => h("div", null, h("h3", null, property.name), h("ul", null, h("b", null, "Type:"), " ", property.type), h("ul", null, h("b", null, "Default:"), " ", property.default), h("ul", null, property.docs)))), h("div", { hidden: this.targetComponent.events.length < 1 }, h("h2", null, "Events"), this.targetComponent.events.map(event => h("div", null, h("h3", null, event.event), h("ul", null, h("b", null, "Detail:"), " ", event.detail), h("ul", null, event.docs)))), h("div", { hidden: this.targetComponent.methods.length < 1 }, h("h2", null, "Methods"), this.targetComponent.methods.map(method => h("div", null, h("h3", null, method.name), h("ul", null, h("code", null, method.signature)), h("ul", null, method.docs)))))
            ]);
        }
        else {
            return ([
                h("div", { class: "sidebar" }, h("h2", null, "GUI Composer"), h("h3", null, "v3 Components"), this.manifestList.map(components => h("li", { onClick: () => this.widgetName = components }, components))),
                h("div", { id: "titlePage", class: "documentation" }, h("h1", null, "GUI Composer v3 Component Documentation"))
            ]);
        }
        // JSXOFF
    } 
    /**
     * Sets the CSS property.
     *
     * @param {string} name the element style name
     * @param {string} value the new CSS property to be set
     */
    async setCSSProperty(name, value) {
        return this['base'][`${this.setCSSProperty.name}`](name, value); 
    } 
    /**
     * Returns the value of a CSS property.
     *
     * @param {string} name the element style property
     * @returns {string} the value of the property
     */
    async getCSSProperty(name) {
        return this['base'][`${this.getCSSProperty.name}`](name); 
    } 
    /**
     * Refresh the element.
     */
    async refresh() {
        return this['base'][`${this.refresh.name}`](); 
    } 
    /**
     * Fire an widget event.
     *
     * @param {string} eventName the event name, in dash notation
     * @param detail the event detail
     */
    async fire(eventName, detail) {
        return this['base'][`${this.fire.name}`](eventName, detail); 
    } 
    get el() { return getElement(this); }
    static get watchers() { return {
        "widgetName": ["onWidgetNameChanged"]
    }; }
    static get style() { return "/*\n* ==========================================================================\n* _polaris.colors.scss\n* This file imports the Polaris color palette.\n* ==========================================================================\n*/\n/*\n* --------------------------------------------------------------------------\n* color palette\n* --------------------------------------------------------------------------\n*/\n/*\n* ==========================================================================\n* _polaris.mixins.scss\n* This file contains Polaris mixins\n* prefix with mix-\n* ==========================================================================\n*/\n/*\n* ==========================================================================\n* _polaris-variables.scss\n* This file contains global-css variables and is using component based naming.\n*\n* Naming structure: [application(namespacing)]-[type]-[function]-[property]\n* ==========================================================================\n*/\n/*\n* --------------------------------------------------------------------------\n* Color variables\n* --------------------------------------------------------------------------\n*/\n/*\n* Polaris Component color definitions\n*/\n/*\n* Polaris Card Background color definitions\n* Ref: (http://polaris/01-ui-style-foundations.html#02-style-principles.03-background-color)\n*/\n/*\n* --------------------------------------------------------------------------\n* shape variables\n* --------------------------------------------------------------------------\n*/\n/*\n* Polaris border radius definitions\n* Ref: (http://polaris/01-ui-style-foundations.html#02-style-principles.05-border-radius)\n*/\n/*\n* Polaris box shadow definitions\n* Ref: (http://polaris/01-ui-style-foundations.html#02-style-principles.06-box-shadow)\n*/\n/*\n* --------------------------------------------------------------------------\n* font variables\n* Ref: (http://polaris/01-ui-style-foundations.html#07-typography-fundamentals)\n* --------------------------------------------------------------------------\n*/\n/*\n* Font stack definitions\n*/\n/*\n* Font families\n*/\n/*\n* Root HTML and BODY tag values\n*/\n/*\n* Font size cadence values\n*/\n/*\n* Standard Paragraph font sizes\n*/\n/*\n* Header tag font sizes\n*/\n/*\n* Line height cadence values\n*/\n/*\n* Font weight values\n*/\n/*\n* --------------------------------------------------------------------------\n* spacing values variables\n* --------------------------------------------------------------------------\n*/\n/*\n* Base spacing cadence values\n* (base grid size x multiplier) / root font size = rem value\n*/\n/*\n* Component/element specific spacing\n*/\n/*\n* --------------------------------------------------------------------------\n* page layout variables\n* --------------------------------------------------------------------------\n*/\n/*\n* --------------------------------------------------------------------------\n* animation variables\n* ref: (http://polaris/01-ui-style-foundations.html#04-motion)\n* --------------------------------------------------------------------------\n*/\n/*\n* Animation easing types\n*/\n/*\n* Animation timings\n*/\n/*\n* --------------------------------------------------------------------------\n* icon size variables\n* --------------------------------------------------------------------------\n*/\n/*\n* --------------------------------------------------------------------------\n* legacy variable names\n* - May still be used in other component repos\n* --------------------------------------------------------------------------\n*/\n/* Font variables */\n/* Space size variables */\n/*\n* ==========================================================================\n* _ti-core.scss\n*\n*  This files contains mixins uses within TI Webcomponents\n* ==========================================================================\n*/\n/*\n * Base style for trigger element\n */\n/*\n* Tooltip trigger main mixin.\n* Use to add style to trigger tooltip display.\n* For example:\n*\n* .tooltip-trigger:hover {\n*     \@include ti-tooltip-trigger();\n* }\n*\n* Typically not used directly, but via the other mixins below.\n*/\n/*\n* Mixin for adding style to trigger tooltip display to\n* an element selector on hover, focus and checked.\n* For example:\n*\n* .tooltip-trigger {\n     \@include ti-tooltip-trigger-element();\n* }\n*/\n/*\n* Mixin for adding style to trigger tooltip display to\n* a web component shadow host on hover, focus and checked.\n* Use in the web component style sheet outside of :host{}.\n* For example:\n*\n* \@include ti-tooltip-trigger-host();\n* :host {\n*     ...\n* }\n*\n* The optional $selector parameter allows a CSS selector\n* which will be added to the :host selector to allow control\n* over the host trigger via a style class or another selector.\n* For example:\n*\n* \@include ti-tooltip-trigger-host(\'.ti-tooltip-trigger\');\n*\n* creates code like\n*\n* :host(.ti-tooltip-trigger:hover) {\n*     ...\n* }\n*\n* instead of\n*\n* :host(:hover) {\n*     ...\n* }\n*/\n/* chrome: scroll width */\n::-webkit-scrollbar {\n  width: 7.5px;\n}\n\n/* chrome: scroll Track */\n::-webkit-scrollbar-track {\n  background: var(--ti-scroll-track-color, inherit);\n}\n\n/* chrome: scroll Handle */\n::-webkit-scrollbar-thumb {\n  background: var(--ti-scroll-thumb-color, inherit);\n}\n\n/* chrome: scroll Handle on hover */\n::-webkit-scrollbar-thumb:hover {\n  background: var(--ti-scroll-thumb-color-hover, inherit);\n}\n\n*:focus {\n  outline: none;\n}\n\n:host {\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  -o-user-select: none;\n  user-select: none;\n  font-family: \"Roboto\", \"Open Sans\", \"Segoe UI\", Tahoma, sans-serif;\n  font-size: 14px;\n  font-weight: 400;\n  color: var(--theme-font-color, #231f20);\n  margin: 5px;\n  display: inline-block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n:host([readonly]:not([disabled])) {\n  pointer-events: none;\n}\n:host([readonly]:not([disabled])) #elementWrapper {\n  pointer-events: none;\n}\n\n:host([disabled]) {\n  cursor: not-allowed;\n}\n:host([disabled]) #elementWrapper {\n  cursor: not-allowed;\n}\n\n:host([caption]:not([caption=\"\"])) {\n  margin-top: 27px;\n}\n\n:host([caption]:not([caption=\"\"])),\n:host([info-text]:not([info-text=\"\"])) {\n  overflow: visible;\n  position: relative;\n}\n\n:host([caption=\"\"][info-text]:not([info-text=\"\"])),\n:host([info-text]:not([info-text=\"\"]):not([caption])) {\n  margin-right: 27px;\n}\n\n#elementWrapper {\n  height: inherit;\n  width: inherit;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-align: center;\n  align-items: center;\n}\n\n.root-container {\n  position: relative;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n}\n.root-container .header-container.top {\n  top: -22px;\n  -ms-flex-direction: row;\n  flex-direction: row;\n}\n.root-container .header-container.side {\n  right: -22px;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  height: inherit;\n}\n.root-container .header-container {\n  position: absolute;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-align: center;\n  align-items: center;\n}\n.root-container .header-container .icon,\n.root-container .header-container ti-widget-icon {\n  margin: auto;\n  height: 18px;\n  width: 18px;\n  display: block;\n}\n.root-container .header-container .caption {\n  -ms-flex: 1;\n  flex: 1;\n  white-space: nowrap;\n  margin-right: 2px;\n  font-weight: 400;\n  font-size: 16px;\n  color: var(--theme-header-font-color, #63666a);\n}\n\n:host {\n  -webkit-user-select: auto;\n  -khtml-user-select: auto;\n  -moz-user-select: auto;\n  -ms-user-select: auto;\n  -o-user-select: auto;\n  user-select: auto;\n  margin: 8px;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  display: -ms-flexbox;\n  display: flex;\n}\n\n.sidebar {\n  position: fixed;\n  overflow: auto;\n  height: 100%;\n  min-width: 200px;\n  padding: 0 20px 20px;\n  background: #f9f9f9;\n}\n\n.sidebar li {\n  color: var(--theme-secondary-color, #115566);\n  font-weight: bold;\n  cursor: pointer;\n  line-height: 1.7em;\n  list-style: none;\n  line-height: 28px;\n}\n\n.documentation {\n  padding: 0 20px;\n  max-width: 900px;\n  position: absolute;\n  margin-left: 241px;\n}\n\ncode {\n  font-size: 18px;\n}"; }
};

export { TiComponentHelp as ti_component_help };

//# sourceMappingURL=ti-component-help.entry.js.map