import { r as registerInstance, d as createEvent, h, c as getElement } from './core-800e68f4.js';
import '../ti-core-assets/lib/TiUtils';
import { T as TiWidgetBase } from './ti-widget-base-fe722328.js';
import '../ti-core-assets/lib/TiFiles';
import '../ti-core-assets/lib/TiConsole';
import '../ti-core-assets/lib/TiLocalStorage';

const TiWidgetLed = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.base = new ( // keep on separate line to enable sourcemapping   
        class extends TiWidgetBase {
            get element() {
                return this.led.el; 
            } 
            get led() {
                return this.parent; 
            } 
            // @overriden
            onCSSPropertyChanged(name, value) {
                this.led.onCSSChangedHandler(name, value); 
            } 
        })(this); 
        /**
         * The LED active state. When true, turns the LED 'on'.
         * @order 2
         */
        this.on = false; 
        /**
         * When true, turns the LED glow gradient 'on'.
         * @order 3
         */
        this.glow = true; 
        this.oldOn = false; 
        this.ledOnColor = '#ff0000'; 
        this.ledOffColor = '#696969'; 
        /**
         * Controls the tooltip that is displayed for this widget.
         * @order 210
         */
        this.tooltip = ''; 
        // #endregion
        // #region ti-element-base/ti-element-base-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * Sets to `true` to hide the element, otherwise `false`.
         *
         * @order 200
         */
        this.hidden = false; 
        // #endregion
        // #region ti-widget-base/ti-widget-base-title-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * The widget caption text.
         * @order 207
         */
        this.caption = ''; 
        /**
         * The widget info icon help text.
         * @order 208
         */
        this.infoText = ''; 
        this.onChanged = createEvent(this, "on-changed", 7);
        this.onGlow = createEvent(this, "glow-changed", 7);
        this.cssPropertyChanged = createEvent(this, "css-property-changed", 7);
    }
    render() {
        // JSXON
        return this.base.render(h("div", { id: "top" }, h("div", null, h("svg", { width: "100%", height: "100%", viewBox: "0 0 80 80", preserveAspectRatio: "xMidYMid meet", id: "led-wrapper" }, h("g", { transform: "translate(4.3915046,4.8449881)", id: "led-shadow-grey" }, h("path", { id: "led_shadow_path", d: "m 57.281661,35.520848 c 0,11.693806 -9.436019,21.19661 -21.129748,21.279304 -11.69373,0.08269 -21.263201,-9.285718 -21.428582,-20.978355 -0.165383,-11.692636 9.18499,-21.576404 20.826686,-21.575994 11.694023,4.1e-4 21.939035,9.13316 21.772824,21.219838" })), h("g", { id: "led-residual-shine", class: "css-bind" }, h("path", { id: "led_res_path", fill: this.getColor(this.ledOnColor, this.ledOffColor, this.on), stroke: this.getColor(this.ledOnColor, this.ledOffColor, this.on), d: "m 61.673165,40.365836 c 0,11.693806 -9.436019,21.19661 -21.129748,21.279304 -11.69373,0.08269 -21.263201,-9.285718 -21.428582,-20.978355 -0.165383,-11.692636 9.18499,-21.576404 20.826686,-21.575994 11.694023,4.1e-4 21.939035,9.13316 21.772824,21.219838" })), h("g", { transform: "translate(25.3915046,25.8449881)", id: "led-lit-color", class: "css-bind" }, h("path", { id: "led_path", transform: "scale(0.4,0.4)", fill: this.getColor(this.ledOnColor, this.ledOffColor, this.on), d: "m 76.355601,35.518697 c 0,22.185856 -17.902315,40.21487 -40.088026,40.371759 C 14.081864,76.047345 -4.0736375,58.273303 -4.3874056,36.089666 -4.7011736,13.906029 13.038647,-4.8457656 35.12564,-4.8449881 57.311908,-4.8442107 76.749061,12.482731 76.433728,35.413956" })), h("g", { transform: "translate(-28,-28)", display: this.getGlow(), id: "glow-circle", class: "css-bind" }, h("path", { id: "glow_path", transform: "scale(1.7,1.7)", fill: this.getColor(this.ledOnColor, this.ledOffColor, this.on), d: "m 60.588751,40.365959 c 0,11.097298 -8.954684,20.115356 -20.051908,20.193831 C 29.439617,60.63826 20.358289,51.747744 20.201344,40.651556 20.044398,29.555368 28.917803,20.175778 39.965649,20.176167 c 11.097504,3.88e-4 20.81991,8.667271 20.662181,20.1374" }))))));
        // JSXOFF
    } 
    componentWillLoad() {
        this.oldOn = this.on; 
    } 
    componentDidLoad() {
        setTimeout(async () => {
            const c1 = await this.getCSSProperty('--ti-widget-led-on-color'); 
            const c2 = await this.getCSSProperty('--ti-widget-led-off-color'); 
            /* apply custom css */
            if (c1)
                this.ledOnColor = c1; 
            if (c2)
                this.ledOffColor = c2; 
            this.refresh(); 
        }); 
    } 
    onGlowChanged(newValue) {
        this.refresh(); 
        this.onGlow.emit({ value: newValue }); 
    } 
    onOnChanged(newValue, oldValue) {
        if (newValue !== this.oldOn) { 
            this.oldOn = newValue; 
            this.refresh(); 
            this.onChanged.emit({ value: newValue }); 
        }
        else { 
            this.on = this.oldOn; 
        } 
    } 
    /**
     * @private
     */
    getColor(ledOnColor, offColor, isOn) {
        return isOn ? ledOnColor : offColor; 
    } 
    /**
     * @private
     */
    getGlow() {
        return (this.glow && this.on) ? 'inline' : 'none'; 
    } 
    onCSSChangedHandler(name, value) {
        if (name === '--ti-widget-led-on-color') { 
            this.ledOnColor = value; 
            this.refresh(); 
        } 
        if (name === '--ti-widget-led-off-color') { 
            this.ledOffColor = value; 
            this.refresh(); 
        } 
    } 
    /**
     * Sets the CSS property.
     *
     * @param {string} name the element style name
     * @param {string} value the new CSS property to be set
     */
    async setCSSProperty(name, value) {
        return this['base'][`${this.setCSSProperty.name}`](name, value); 
    } 
    /**
     * Returns the value of a CSS property.
     *
     * @param {string} name the element style property
     * @returns {string} the value of the property
     */
    async getCSSProperty(name) {
        return this['base'][`${this.getCSSProperty.name}`](name); 
    } 
    /**
     * Refresh the element.
     */
    async refresh() {
        return this['base'][`${this.refresh.name}`](); 
    } 
    /**
     * Fire an widget event.
     *
     * @param {string} eventName the event name, in dash notation
     * @param detail the event detail
     */
    async fire(eventName, detail) {
        return this['base'][`${this.fire.name}`](eventName, detail); 
    } 
    get el() { return getElement(this); }
    static get watchers() { return {
        "glow": ["onGlowChanged"],
        "on": ["onOnChanged"]
    }; }
    static get style() { return "/*\n* ==========================================================================\n* _polaris.colors.scss\n* This file imports the Polaris color palette.\n* ==========================================================================\n*/\n/*\n* --------------------------------------------------------------------------\n* color palette\n* --------------------------------------------------------------------------\n*/\n/*\n* ==========================================================================\n* _polaris.mixins.scss\n* This file contains Polaris mixins\n* prefix with mix-\n* ==========================================================================\n*/\n/*\n* ==========================================================================\n* _polaris-variables.scss\n* This file contains global-css variables and is using component based naming.\n*\n* Naming structure: [application(namespacing)]-[type]-[function]-[property]\n* ==========================================================================\n*/\n/*\n* --------------------------------------------------------------------------\n* Color variables\n* --------------------------------------------------------------------------\n*/\n/*\n* Polaris Component color definitions\n*/\n/*\n* Polaris Card Background color definitions\n* Ref: (http://polaris/01-ui-style-foundations.html#02-style-principles.03-background-color)\n*/\n/*\n* --------------------------------------------------------------------------\n* shape variables\n* --------------------------------------------------------------------------\n*/\n/*\n* Polaris border radius definitions\n* Ref: (http://polaris/01-ui-style-foundations.html#02-style-principles.05-border-radius)\n*/\n/*\n* Polaris box shadow definitions\n* Ref: (http://polaris/01-ui-style-foundations.html#02-style-principles.06-box-shadow)\n*/\n/*\n* --------------------------------------------------------------------------\n* font variables\n* Ref: (http://polaris/01-ui-style-foundations.html#07-typography-fundamentals)\n* --------------------------------------------------------------------------\n*/\n/*\n* Font stack definitions\n*/\n/*\n* Font families\n*/\n/*\n* Root HTML and BODY tag values\n*/\n/*\n* Font size cadence values\n*/\n/*\n* Standard Paragraph font sizes\n*/\n/*\n* Header tag font sizes\n*/\n/*\n* Line height cadence values\n*/\n/*\n* Font weight values\n*/\n/*\n* --------------------------------------------------------------------------\n* spacing values variables\n* --------------------------------------------------------------------------\n*/\n/*\n* Base spacing cadence values\n* (base grid size x multiplier) / root font size = rem value\n*/\n/*\n* Component/element specific spacing\n*/\n/*\n* --------------------------------------------------------------------------\n* page layout variables\n* --------------------------------------------------------------------------\n*/\n/*\n* --------------------------------------------------------------------------\n* animation variables\n* ref: (http://polaris/01-ui-style-foundations.html#04-motion)\n* --------------------------------------------------------------------------\n*/\n/*\n* Animation easing types\n*/\n/*\n* Animation timings\n*/\n/*\n* --------------------------------------------------------------------------\n* icon size variables\n* --------------------------------------------------------------------------\n*/\n/*\n* --------------------------------------------------------------------------\n* legacy variable names\n* - May still be used in other component repos\n* --------------------------------------------------------------------------\n*/\n/* Font variables */\n/* Space size variables */\n/*\n* ==========================================================================\n* _ti-core.scss\n*\n*  This files contains mixins uses within TI Webcomponents\n* ==========================================================================\n*/\n/*\n * Base style for trigger element\n */\n/*\n* Tooltip trigger main mixin.\n* Use to add style to trigger tooltip display.\n* For example:\n*\n* .tooltip-trigger:hover {\n*     \@include ti-tooltip-trigger();\n* }\n*\n* Typically not used directly, but via the other mixins below.\n*/\n/*\n* Mixin for adding style to trigger tooltip display to\n* an element selector on hover, focus and checked.\n* For example:\n*\n* .tooltip-trigger {\n     \@include ti-tooltip-trigger-element();\n* }\n*/\n/*\n* Mixin for adding style to trigger tooltip display to\n* a web component shadow host on hover, focus and checked.\n* Use in the web component style sheet outside of :host{}.\n* For example:\n*\n* \@include ti-tooltip-trigger-host();\n* :host {\n*     ...\n* }\n*\n* The optional $selector parameter allows a CSS selector\n* which will be added to the :host selector to allow control\n* over the host trigger via a style class or another selector.\n* For example:\n*\n* \@include ti-tooltip-trigger-host(\'.ti-tooltip-trigger\');\n*\n* creates code like\n*\n* :host(.ti-tooltip-trigger:hover) {\n*     ...\n* }\n*\n* instead of\n*\n* :host(:hover) {\n*     ...\n* }\n*/\n/* chrome: scroll width */\n::-webkit-scrollbar {\n  width: 7.5px;\n}\n\n/* chrome: scroll Track */\n::-webkit-scrollbar-track {\n  background: var(--ti-scroll-track-color, inherit);\n}\n\n/* chrome: scroll Handle */\n::-webkit-scrollbar-thumb {\n  background: var(--ti-scroll-thumb-color, inherit);\n}\n\n/* chrome: scroll Handle on hover */\n::-webkit-scrollbar-thumb:hover {\n  background: var(--ti-scroll-thumb-color-hover, inherit);\n}\n\n*:focus {\n  outline: none;\n}\n\n:host {\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  -o-user-select: none;\n  user-select: none;\n  font-family: \"Roboto\", \"Open Sans\", \"Segoe UI\", Tahoma, sans-serif;\n  font-size: 14px;\n  font-weight: 400;\n  color: var(--theme-font-color, #231f20);\n  margin: 5px;\n  display: inline-block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n:host([readonly]:not([disabled])) {\n  pointer-events: none;\n}\n:host([readonly]:not([disabled])) #elementWrapper {\n  pointer-events: none;\n}\n\n:host([disabled]) {\n  cursor: not-allowed;\n}\n:host([disabled]) #elementWrapper {\n  cursor: not-allowed;\n}\n\n:host([caption]:not([caption=\"\"])) {\n  margin-top: 27px;\n}\n\n:host([caption]:not([caption=\"\"])),\n:host([info-text]:not([info-text=\"\"])) {\n  overflow: visible;\n  position: relative;\n}\n\n:host([caption=\"\"][info-text]:not([info-text=\"\"])),\n:host([info-text]:not([info-text=\"\"]):not([caption])) {\n  margin-right: 27px;\n}\n\n#elementWrapper {\n  height: inherit;\n  width: inherit;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-align: center;\n  align-items: center;\n}\n\n.root-container {\n  position: relative;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n}\n.root-container .header-container.top {\n  top: -22px;\n  -ms-flex-direction: row;\n  flex-direction: row;\n}\n.root-container .header-container.side {\n  right: -22px;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  height: inherit;\n}\n.root-container .header-container {\n  position: absolute;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-align: center;\n  align-items: center;\n}\n.root-container .header-container .icon,\n.root-container .header-container ti-widget-icon {\n  margin: auto;\n  height: 18px;\n  width: 18px;\n  display: block;\n}\n.root-container .header-container .caption {\n  -ms-flex: 1;\n  flex: 1;\n  white-space: nowrap;\n  margin-right: 2px;\n  font-weight: 400;\n  font-size: 16px;\n  color: var(--theme-header-font-color, #63666a);\n}\n\n[disabled] {\n  background-color: #f1e3e3;\n}\n\nsvg {\n  overflow: visible;\n}\n\n/* only used for colour change event handling */\n.css-bind {\n  --ti-widget-led-on-color: #ff0000;\n  --ti-widget-led-off-color: #696969;\n}\n\n#top {\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  vertical-align: middle;\n}\n\n#led-wrapper {\n  -webkit-transform-origin: 50% 50%;\n  transform-origin: 50% 50%;\n}\n\n#led-shadow-grey {\n  display: inline;\n}\n\n#led_shadow_path {\n  display: inline;\n  fill: #333333;\n  fill-opacity: 1;\n  stroke: #d0d0d0;\n  stroke-width: 10;\n  stroke-linecap: square;\n  stroke-miterlimit: 4;\n  stroke-dasharray: none;\n  stroke-opacity: 1;\n}\n\n#led-residual-shine {\n  display: inline;\n}\n\n#led_res_path {\n  display: inline;\n  opacity: 0.55;\n  fill-opacity: 0.55;\n  stroke-width: 2;\n  stroke-miterlimit: 4;\n  stroke-dasharray: none;\n  stroke-opacity: 0.5;\n}\n\n#led-lit-color {\n  display: inline;\n}\n\n#led_path {\n  display: inline;\n  fill-opacity: 1;\n}\n\n#glow_path {\n  display: inline;\n  fill-opacity: 0.18;\n}"; }
};

export { TiWidgetLed as ti_widget_led };

//# sourceMappingURL=ti-widget-led.entry.js.map