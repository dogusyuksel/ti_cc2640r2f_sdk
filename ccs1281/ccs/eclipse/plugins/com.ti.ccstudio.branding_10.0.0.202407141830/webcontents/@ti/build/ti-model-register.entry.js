import { r as registerInstance, c as getElement } from './core-800e68f4.js';
import { RegisterModel } from './lib/RegisterModel';

const TiModelRegister = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.impl = undefined; 
        // #region ti-target-configuration/ti-codec-base-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * A flag indicating that this model, transport, or codec is not necessary for connecting
         * to the target, and any failure should not prevent connection.
         *
         * @type {boolean}
         * @order 77
         */
        this.optional = false; 
        /**
         * The optional identifier of a target device that is associated with this model, transport or codec.
         * Specifying a target device idicates that this is necessary and/or optional for this connecting
         * to the specified device.  The absence of a target device indicates this is necessary and/or optional
         * for any device.
         *
         * @type {string}
         * @order 80
         */
        this.deviceId = undefined; 
        // #endregion
        /**
         * The optional flag that if ture indicates that multi-device support is required.  All devices must be
         * of the same class, and therefore same register set.  Also, they all must be available on the same
         * interface through a single codec which also has multi-device support.
         *
         * @type {boolean}
         * @order 94
         */
        this.isDeviceArray = false; 
        /**
         * Under normal operation, this register model will queue up register writes when the target is not connected,
         * to be performed when the device first becomes connected.  If this flag is set, then write operations are instead
         * discard when the target is disconnected, and will not write the values to the target upon connection.
         *
         * @type {boolean}
         * @order 98
         */
        this.ignoreWriteOperationsWhenDisconnected = false; 
    }
    connectedCallback() {
        this.impl = new RegisterModel(this.el); 
    }
    ; 
    get el() { return getElement(this); }
};
; 

export { TiModelRegister as ti_model_register };

//# sourceMappingURL=ti-model-register.entry.js.map