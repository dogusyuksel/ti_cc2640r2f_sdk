import { r as registerInstance, d as createEvent, h, c as getElement } from './core-800e68f4.js';
import '../ti-core-assets/lib/TiUtils';
import './ti-widget-base-fe722328.js';
import '../ti-core-assets/lib/TiFiles';
import '../ti-core-assets/lib/TiConsole';
import '../ti-core-assets/lib/TiLocalStorage';
import { T as TiWidgetBaseCheck } from './ti-widget-base-check-8ccd7c7d.js';

const TiWidgetRadio = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.base = new ( 
        class extends TiWidgetBaseCheck {
            get radio() {
                return this.parent; 
            } 
            get element() {
                return this.radio.el; 
            } 
        } 
        )(this); 
        // #region ti-widget-base/ti-widget-base-check-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * If true, the widget is checked.
         * @order 2
         */
        this.checked = false; 
        /**
         * Provides label text to display
         * @order 3
         */
        this.label = 'Check'; 
        /**
         * Controls the tooltip that is displayed for this widget.
         * @order 210
         */
        this.tooltip = ''; 
        // #endregion
        // #region ti-element-base/ti-element-base-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * Sets to `true` to hide the element, otherwise `false`.
         *
         * @order 200
         */
        this.hidden = false; 
        // #endregion
        // #region ti-widget-base/ti-widget-base-disabled-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * Controls the widget disabled state.
         * @order 202
         */
        this.disabled = false; 
        this.checkedChanged = createEvent(this, "checked-changed", 7);
        this.cssPropertyChanged = createEvent(this, "css-property-changed", 7);
    }
    componentWillLoad() {
        this.el.className = 'ti-radio'; 
        this.value = this.value || `${this.el.getAttribute('id')}`; 
        if (this.el.parentElement.attributes.getNamedItem('horizontal')) { 
            this.el.classList.add('horizontal'); 
        } 
    } 
    render() {
        // JSXON
        return this.base.render(h("ti-radio", { value: this.value, disabled: this.disabled, selected: this.checked }, this.base.renderCheck()));
        // JSXOFF
    } 
    onTiChanged(event) {
        this.checked = event.detail.selected; 
        this.value = event.detail.value; 
        this.checkedChanged.emit({ value: this.checked }); 
    } 
    onCheckedChanged(newValue) {
        this.checkedChanged.emit({ value: newValue }); 
    } 
    /**
     * Sets the CSS property.
     *
     * @param {string} name the element style name
     * @param {string} value the new CSS property to be set
     */
    async setCSSProperty(name, value) {
        return this['base'][`${this.setCSSProperty.name}`](name, value); 
    } 
    /**
     * Returns the value of a CSS property.
     *
     * @param {string} name the element style property
     * @returns {string} the value of the property
     */
    async getCSSProperty(name) {
        return this['base'][`${this.getCSSProperty.name}`](name); 
    } 
    /**
     * Refresh the element.
     */
    async refresh() {
        return this['base'][`${this.refresh.name}`](); 
    } 
    /**
     * Fire an widget event.
     *
     * @param {string} eventName the event name, in dash notation
     * @param detail the event detail
     */
    async fire(eventName, detail) {
        return this['base'][`${this.fire.name}`](eventName, detail); 
    } 
    get el() { return getElement(this); }
    static get watchers() { return {
        "checked": ["onCheckedChanged"]
    }; }
    static get style() { return "/*\n* ==========================================================================\n* _polaris.colors.scss\n* This file imports the Polaris color palette.\n* ==========================================================================\n*/\n/*\n* --------------------------------------------------------------------------\n* color palette\n* --------------------------------------------------------------------------\n*/\n/*\n* ==========================================================================\n* _polaris.mixins.scss\n* This file contains Polaris mixins\n* prefix with mix-\n* ==========================================================================\n*/\n/*\n* ==========================================================================\n* _polaris-variables.scss\n* This file contains global-css variables and is using component based naming.\n*\n* Naming structure: [application(namespacing)]-[type]-[function]-[property]\n* ==========================================================================\n*/\n/*\n* --------------------------------------------------------------------------\n* Color variables\n* --------------------------------------------------------------------------\n*/\n/*\n* Polaris Component color definitions\n*/\n/*\n* Polaris Card Background color definitions\n* Ref: (http://polaris/01-ui-style-foundations.html#02-style-principles.03-background-color)\n*/\n/*\n* --------------------------------------------------------------------------\n* shape variables\n* --------------------------------------------------------------------------\n*/\n/*\n* Polaris border radius definitions\n* Ref: (http://polaris/01-ui-style-foundations.html#02-style-principles.05-border-radius)\n*/\n/*\n* Polaris box shadow definitions\n* Ref: (http://polaris/01-ui-style-foundations.html#02-style-principles.06-box-shadow)\n*/\n/*\n* --------------------------------------------------------------------------\n* font variables\n* Ref: (http://polaris/01-ui-style-foundations.html#07-typography-fundamentals)\n* --------------------------------------------------------------------------\n*/\n/*\n* Font stack definitions\n*/\n/*\n* Font families\n*/\n/*\n* Root HTML and BODY tag values\n*/\n/*\n* Font size cadence values\n*/\n/*\n* Standard Paragraph font sizes\n*/\n/*\n* Header tag font sizes\n*/\n/*\n* Line height cadence values\n*/\n/*\n* Font weight values\n*/\n/*\n* --------------------------------------------------------------------------\n* spacing values variables\n* --------------------------------------------------------------------------\n*/\n/*\n* Base spacing cadence values\n* (base grid size x multiplier) / root font size = rem value\n*/\n/*\n* Component/element specific spacing\n*/\n/*\n* --------------------------------------------------------------------------\n* page layout variables\n* --------------------------------------------------------------------------\n*/\n/*\n* --------------------------------------------------------------------------\n* animation variables\n* ref: (http://polaris/01-ui-style-foundations.html#04-motion)\n* --------------------------------------------------------------------------\n*/\n/*\n* Animation easing types\n*/\n/*\n* Animation timings\n*/\n/*\n* --------------------------------------------------------------------------\n* icon size variables\n* --------------------------------------------------------------------------\n*/\n/*\n* --------------------------------------------------------------------------\n* legacy variable names\n* - May still be used in other component repos\n* --------------------------------------------------------------------------\n*/\n/* Font variables */\n/* Space size variables */\n/*\n* ==========================================================================\n* _ti-core.scss\n*\n*  This files contains mixins uses within TI Webcomponents\n* ==========================================================================\n*/\n/*\n * Base style for trigger element\n */\n/*\n* Tooltip trigger main mixin.\n* Use to add style to trigger tooltip display.\n* For example:\n*\n* .tooltip-trigger:hover {\n*     \@include ti-tooltip-trigger();\n* }\n*\n* Typically not used directly, but via the other mixins below.\n*/\n/*\n* Mixin for adding style to trigger tooltip display to\n* an element selector on hover, focus and checked.\n* For example:\n*\n* .tooltip-trigger {\n     \@include ti-tooltip-trigger-element();\n* }\n*/\n/*\n* Mixin for adding style to trigger tooltip display to\n* a web component shadow host on hover, focus and checked.\n* Use in the web component style sheet outside of :host{}.\n* For example:\n*\n* \@include ti-tooltip-trigger-host();\n* :host {\n*     ...\n* }\n*\n* The optional $selector parameter allows a CSS selector\n* which will be added to the :host selector to allow control\n* over the host trigger via a style class or another selector.\n* For example:\n*\n* \@include ti-tooltip-trigger-host(\'.ti-tooltip-trigger\');\n*\n* creates code like\n*\n* :host(.ti-tooltip-trigger:hover) {\n*     ...\n* }\n*\n* instead of\n*\n* :host(:hover) {\n*     ...\n* }\n*/\n/* chrome: scroll width */\n::-webkit-scrollbar {\n  width: 7.5px;\n}\n\n/* chrome: scroll Track */\n::-webkit-scrollbar-track {\n  background: var(--ti-scroll-track-color, inherit);\n}\n\n/* chrome: scroll Handle */\n::-webkit-scrollbar-thumb {\n  background: var(--ti-scroll-thumb-color, inherit);\n}\n\n/* chrome: scroll Handle on hover */\n::-webkit-scrollbar-thumb:hover {\n  background: var(--ti-scroll-thumb-color-hover, inherit);\n}\n\n*:focus {\n  outline: none;\n}\n\n:host {\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  -o-user-select: none;\n  user-select: none;\n  font-family: \"Roboto\", \"Open Sans\", \"Segoe UI\", Tahoma, sans-serif;\n  font-size: 14px;\n  font-weight: 400;\n  color: var(--theme-font-color, #231f20);\n  margin: 5px;\n  display: inline-block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n:host([readonly]:not([disabled])) {\n  pointer-events: none;\n}\n:host([readonly]:not([disabled])) #elementWrapper {\n  pointer-events: none;\n}\n\n:host([disabled]) {\n  cursor: not-allowed;\n}\n:host([disabled]) #elementWrapper {\n  cursor: not-allowed;\n}\n\n:host([caption]:not([caption=\"\"])) {\n  margin-top: 27px;\n}\n\n:host([caption]:not([caption=\"\"])),\n:host([info-text]:not([info-text=\"\"])) {\n  overflow: visible;\n  position: relative;\n}\n\n:host([caption=\"\"][info-text]:not([info-text=\"\"])),\n:host([info-text]:not([info-text=\"\"]):not([caption])) {\n  margin-right: 27px;\n}\n\n#elementWrapper {\n  height: inherit;\n  width: inherit;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-align: center;\n  align-items: center;\n}\n\n.root-container {\n  position: relative;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n}\n.root-container .header-container.top {\n  top: -22px;\n  -ms-flex-direction: row;\n  flex-direction: row;\n}\n.root-container .header-container.side {\n  right: -22px;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  height: inherit;\n}\n.root-container .header-container {\n  position: absolute;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-align: center;\n  align-items: center;\n}\n.root-container .header-container .icon,\n.root-container .header-container ti-widget-icon {\n  margin: auto;\n  height: 18px;\n  width: 18px;\n  display: block;\n}\n.root-container .header-container .caption {\n  -ms-flex: 1;\n  flex: 1;\n  white-space: nowrap;\n  margin-right: 2px;\n  font-weight: 400;\n  font-size: 16px;\n  color: var(--theme-header-font-color, #63666a);\n}\n\n:host([label-when-checked]:not([label-when-checked=\"\"])) .labelContainer {\n  display: grid;\n}\n:host([label-when-checked]:not([label-when-checked=\"\"])) .label, :host([label-when-checked]:not([label-when-checked=\"\"])) .labelWhenChecked {\n  white-space: nowrap;\n  grid-row-start: 1;\n  grid-column-start: 1;\n}\n\n:host([label-when-checked]:not([label-when-checked=\"\"])[checked]) .label {\n  visibility: hidden;\n}\n\n:host([label-when-checked]:not([label-when-checked=\"\"]):not([checked])) .labelWhenChecked {\n  visibility: hidden;\n}\n\n:host(.horizontal) {\n  margin-right: 10px;\n}\n\nti-radio span {\n  font-family: \"Roboto\", \"Open Sans\", \"Segoe UI\", Tahoma, sans-serif;\n  font-size: 14px;\n  font-weight: 400;\n  color: var(--theme-font-color, #231f20);\n}"; }
};

export { TiWidgetRadio as ti_widget_radio };

//# sourceMappingURL=ti-widget-radio.entry.js.map