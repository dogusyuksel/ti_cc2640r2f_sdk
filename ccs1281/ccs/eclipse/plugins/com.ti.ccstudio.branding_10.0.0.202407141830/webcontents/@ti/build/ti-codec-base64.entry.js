import { r as registerInstance, c as getElement } from './core-800e68f4.js';
import { Base64PacketCodec } from '../ti-codec-base64/lib/Base64PacketCodec';

const TiCodecBase64 = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.impl = undefined; 
        // #region ti-target-configuration/ti-codec-base-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * A flag indicating that this model, transport, or codec is not necessary for connecting
         * to the target, and any failure should not prevent connection.
         *
         * @type {boolean}
         * @order 77
         */
        this.optional = false; 
        /**
         * The optional identifier of a target device that is associated with this model, transport or codec.
         * Specifying a target device idicates that this is necessary and/or optional for this connecting
         * to the specified device.  The absence of a target device indicates this is necessary and/or optional
         * for any device.
         *
         * @type {string}
         * @order 80
         */
        this.deviceId = undefined; 
    }
    // #endregion
    connectedCallback() {
        this.impl = new Base64PacketCodec(this.el); 
    }
    ; 
    get el() { return getElement(this); }
};
; 

export { TiCodecBase64 as ti_codec_base64 };

//# sourceMappingURL=ti-codec-base64.entry.js.map