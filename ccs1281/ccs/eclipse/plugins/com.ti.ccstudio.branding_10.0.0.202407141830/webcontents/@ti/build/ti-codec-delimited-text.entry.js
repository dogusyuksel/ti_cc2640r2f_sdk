import { r as registerInstance, c as getElement } from './core-800e68f4.js';
import { DelimitedTextCodec } from '../ti-codec-delimited-text/lib/DelimitedTextCodec';

const TiCodecDelimitedText = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.impl = undefined; 
        /**
         * This character sequence is used to delimit packets of data.  Whenever this codec encounters
         * this sequence of characters, all the data accumlated up until this point is passed along to
         * the next codec in the chain as an entire packet.  This property is optional and if not
         * presentm the default delimiter used is the carrage return.
         *
         * @type {boolean}
         * @order 30
         */
        this.delimiter = undefined; 
        /**
         * This character sequence is used to escape the delimiter sequence when it occurs inside the packet data.
         * During encoding, any delimiter sequence will have on escapeChar inserted before it to indicated that
         * it is part of the packet an not a real delimiter.  Also any escapeChar that occurs in the packet of data to
         * encode, is also escaped.  So two escape sequenes in a row represent a single escape sequence in the data.
         * When data is decoded, the opposite occurs.  This property is optional, and if omitted, there is no
         * escape sequencing used at all, and it is assumed that delimiters will not occur in the packet data.
         *
         * @type {boolean}
         * @order 33
         */
        this.escapeChar = undefined; 
        // #region ti-target-configuration/ti-codec-base-props.tsx:
        // -----------Autogenerated - do not edit--------------
        /**
         * A flag indicating that this model, transport, or codec is not necessary for connecting
         * to the target, and any failure should not prevent connection.
         *
         * @type {boolean}
         * @order 77
         */
        this.optional = false; 
        /**
         * The optional identifier of a target device that is associated with this model, transport or codec.
         * Specifying a target device idicates that this is necessary and/or optional for this connecting
         * to the specified device.  The absence of a target device indicates this is necessary and/or optional
         * for any device.
         *
         * @type {string}
         * @order 80
         */
        this.deviceId = undefined; 
    }
    // #endregion
    connectedCallback() {
        this.impl = new DelimitedTextCodec(this.el); 
    }
    ; 
    get el() { return getElement(this); }
};
; 

export { TiCodecDelimitedText as ti_codec_delimited_text };

//# sourceMappingURL=ti-codec-delimited-text.entry.js.map