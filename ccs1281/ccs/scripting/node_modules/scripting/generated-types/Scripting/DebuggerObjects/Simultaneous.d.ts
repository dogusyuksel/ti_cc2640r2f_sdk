// Copyright (c) 2024 Texas Instruments
// DO NOT EDIT THIS FILE!!!!
// This file was autogenerated using tsInterfaceDef.xdt
// from ds/code/cc_app_studio/Modules/JSONInterface/../AsyncInterface/include/AsyncInterface/Scripting/DebuggerObjects/Simultaneous.h

export interface Simultaneous {

	/**
	 * Simultaneously run all targets specified.
	 *
	 * @remarks The targets should be specified by their full names. The full names
	 * of targets can be obtained from {@link DebugSession.getName} or
	 * {@DebuggerScripting.listCores}.
	 *
	 * Will throw if any target specified:
	 * * does not exist,
	 * * is not connected (see {@Target.connect}), or
	 * * is not halted.
	 *
	 * @param targets - A list of the targets to run.
	 * @param waitForHalt - Whether the operation should wait for all targets to halt
	 * after running. Defaults to true.
	 *
	 * @example
	 * ```
	 * const session1 = ds.openSession("Cortex_R5_0_0");
	 * const session2 = ds.openSession("Cortex_R5_0_1");
	 *
	 * // In this case, the full names of each core is longer than what we provided to openSession
	 * const targets = [session1.getName(), session2.getName()];
	 *
	 * // Assume we have connected, loaded a program, etc. on both cores.
	 *
	 * // Run both targets simultaneously and wait for both to halt
	 * ds.simultaneous.run(targets);
	 *
	 * // Run both targets simultaneously return immediately once both are running
	 * ds.simultaneous.run(targets, false);
	 * ```
	 */
	run(
		targets: string | string[],
		waitForHalt?: boolean,
	): void;

	/**
	 * Simultaneously halt all targets specified.
	 *
	 * @remarks The targets should be specified by their full names. The full names
	 * of targets can be obtained from {@link DebugSession.getName} or
	 * {@DebuggerScripting.listCores}.
	 *
	 * Will throw if any target specified:
	 * * does not exist, or
	 * * is not connected (see {@Target.connect}).
	 *
	 * @param targets - A list of the targets to halt.
	 *
	 * @example
	 * ```
	 * const session1 = ds.openSession("Cortex_R5_0_0");
	 * const session2 = ds.openSession("Cortex_R5_0_1");
	 *
	 * // In this case, the full names of each core is longer than what we provided to openSession
	 * const targets = [session1.getName(), session2.getName()];
	 *
	 * // Assume we have connected, loaded a program, issued a run, etc. on both cores.
	 *
	 * // Halt both targets simultaneously
	 * ds.simultaneous.halt(targets);
	 * ```
	 */
	halt(targets: string | string[]): void;

	/**
	 * Simultaneously perform an assembly step-into operation on all targets specified.
	 *
	 * @remarks The targets should be specified by their full names. The full names
	 * of targets can be obtained from {@link DebugSession.getName} or
	 * {@DebuggerScripting.listCores}.
	 *
	 * Will throw if any target specified:
	 * * does not exist,
	 * * is not connected (see {@Target.connect}), or
	 * * is not halted.
	 *
	 * @param targets - A list of the targets to step.
	 *
	 * @example
	 * ```
	 * const session1 = ds.openSession("Cortex_R5_0_0");
	 * const session2 = ds.openSession("Cortex_R5_0_1");
	 *
	 * // In this case, the full names of each core is longer than what we provided to openSession
	 * const targets = [session1.getName(), session2.getName()];
	 *
	 * // Assume we have connected, loaded a program, etc. on both cores.
	 *
	 * // Step both targets simultaneously
	 * ds.simultaneous.asmStepInto(targets);
	 * ```
	 */
	asmStepInto(targets: string | string[]): void;


}