import { setupSynchronousClient, Module } from "./syncAgent";
import { DSLiteSync, TaskSync } from "./generated-types";
import { DebuggerScripting } from "./index";
/**
 * An object housing optional configuration options for the Javascript scripting module.
 */
export type ScriptingOptions = {
    /**
     * Initial timeout value. By default, there is no timeout.
     */
    timeout?: number;
    /**
     * Full path to the ccs root folder of an installation of CCS. This is only
     * necessary if the scripting node module has been moved.
     */
    ccsRoot?: string;
    /** @internal
     * Whether the debugger should be launched in-process and use an in-process communication
     * mechanism instead of websockets. This is an experimental feature. It can useful if
     * security policies block websocket communication. Default is false.
     */
    inProcess?: boolean;
    /**
     * @internal
     */
    exposeRaw?: boolean;
};
interface DSLiteModule extends Omit<DSLiteSync, "addListener" | "removeListener" | "getSubModule">, Pick<Module, "addListener" | "removeListener" | "close"> {
    getSubModule(name: "trace"): TraceModule;
    getSubModule(name: string): TaskSync;
}
interface TraceModule extends Module {
    scripting: any;
    close(): void;
}
/**
 * Blocks execution for a given amount of time
 *
 * @param ms - The sleep duration in milliseconds
 */
export declare function sleep(ms: number): void;
/**
 * Initialize the debugger process for scripting
 *
 * @returns A {@link DebuggerScripting} object.
 */
export declare function initScripting(options?: ScriptingOptions): DebuggerScripting;
export declare function initScriptingConsole(syncAgent: ReturnType<typeof setupSynchronousClient>, dsPort: number): DebuggerScripting;
export declare function wrapDSModule(syncAgent: ReturnType<typeof setupSynchronousClient>, ds: DSLiteModule, options: {
    exposeRaw: boolean;
    onShutdown?: () => void;
}): DebuggerScripting;
export {};
